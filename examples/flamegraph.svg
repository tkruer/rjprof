<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="566" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="549.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="549.00"> </text><svg id="frames" x="10" width="1180" total_samples="42585420509"><g><title>java.io.BufferedWriter.flushBuffer (7,940,419 samples, 0.02%)</title><rect x="23.5129%" y="453" width="0.0186%" height="15" fill="rgb(227,0,7)" fg:x="10013073915" fg:w="7940419"/><text x="23.7629%" y="463.50"></text></g><g><title>java.io.OutputStreamWriter.write (6,887,711 samples, 0.02%)</title><rect x="23.5154%" y="437" width="0.0162%" height="15" fill="rgb(217,0,24)" fg:x="10014126623" fg:w="6887711"/><text x="23.7654%" y="447.50"></text></g><g><title>sun.nio.cs.StreamEncoder.write (5,849,170 samples, 0.01%)</title><rect x="23.5178%" y="421" width="0.0137%" height="15" fill="rgb(221,193,54)" fg:x="10015165164" fg:w="5849170"/><text x="23.7678%" y="431.50"></text></g><g><title>sun.nio.cs.StreamEncoder.implWrite (4,822,337 samples, 0.01%)</title><rect x="23.5202%" y="405" width="0.0113%" height="15" fill="rgb(248,212,6)" fg:x="10016191997" fg:w="4822337"/><text x="23.7702%" y="415.50"></text></g><g><title>java.io.PrintStream.writeln (13,095,298 samples, 0.03%)</title><rect x="23.5087%" y="469" width="0.0308%" height="15" fill="rgb(208,68,35)" fg:x="10011278125" fg:w="13095298"/><text x="23.7587%" y="479.50"></text></g><g><title>java.io.PrintStream.println (14,907,756 samples, 0.04%)</title><rect x="23.5045%" y="485" width="0.0350%" height="15" fill="rgb(232,128,0)" fg:x="10009473542" fg:w="14907756"/><text x="23.7545%" y="495.50"></text></g><g><title>java.lang.ClassLoader.loadClass (10,394,704 samples, 0.02%)</title><rect x="23.5395%" y="485" width="0.0244%" height="15" fill="rgb(207,160,47)" fg:x="10024381298" fg:w="10394704"/><text x="23.7895%" y="495.50"></text></g><g><title>jdk.internal.loader.BuiltinClassLoader.loadClass (9,059,912 samples, 0.02%)</title><rect x="23.5426%" y="469" width="0.0213%" height="15" fill="rgb(228,23,34)" fg:x="10025716090" fg:w="9059912"/><text x="23.7926%" y="479.50"></text></g><g><title>jdk.internal.loader.BuiltinClassLoader.loadClassOrNull (7,729,536 samples, 0.02%)</title><rect x="23.5457%" y="453" width="0.0182%" height="15" fill="rgb(218,30,26)" fg:x="10027046466" fg:w="7729536"/><text x="23.7957%" y="463.50"></text></g><g><title>java.lang.Thread.sleepNanos (20,011,960,458 samples, 46.99%)</title><rect x="47.0609%" y="469" width="46.9925%" height="15" fill="rgb(220,122,19)" fg:x="20041078752" fg:w="20011960458"/><text x="47.3109%" y="479.50">java.lang.Thread.sleepNanos</text></g><g><title>java.lang.Thread.sleepNanos0 (10,005,085,292 samples, 23.49%)</title><rect x="70.5593%" y="453" width="23.4942%" height="15" fill="rgb(250,228,42)" fg:x="30047953918" fg:w="10005085292"/><text x="70.8093%" y="463.50">java.lang.Thread.sleepNanos0</text></g><g><title>com.example.Main.main (40,053,039,835 samples, 94.05%)</title><rect x="0.0000%" y="501" width="94.0534%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="40053039835"/><text x="0.2500%" y="511.50">com.example.Main.main</text></g><g><title>java.lang.Thread.sleep (30,018,263,833 samples, 70.49%)</title><rect x="23.5639%" y="485" width="70.4895%" height="15" fill="rgb(216,20,37)" fg:x="10034776002" fg:w="30018263833"/><text x="23.8139%" y="495.50">java.lang.Thread.sleep</text></g><g><title>java.lang.ClassLoader.loadClass (4,660,797 samples, 0.01%)</title><rect x="94.0537%" y="501" width="0.0109%" height="15" fill="rgb(206,188,39)" fg:x="40053169418" fg:w="4660797"/><text x="94.3037%" y="511.50"></text></g><g><title>jdk.internal.misc.CarrierThreadLocal.isPresent (4,567,749 samples, 0.01%)</title><rect x="94.0778%" y="485" width="0.0107%" height="15" fill="rgb(217,207,13)" fg:x="40063422800" fg:w="4567749"/><text x="94.3278%" y="495.50"></text></g><g><title>java.lang.Thread.exit (17,359,703 samples, 0.04%)</title><rect x="94.0701%" y="501" width="0.0408%" height="15" fill="rgb(231,73,38)" fg:x="40060164757" fg:w="17359703"/><text x="94.3201%" y="511.50"></text></g><g><title>jdk.internal.misc.TerminatingThreadLocal.threadTerminated (9,533,911 samples, 0.02%)</title><rect x="94.0885%" y="485" width="0.0224%" height="15" fill="rgb(225,20,46)" fg:x="40067990549" fg:w="9533911"/><text x="94.3385%" y="495.50"></text></g><g><title>jdk.internal.misc.TerminatingThreadLocal._threadTerminated (5,864,832 samples, 0.01%)</title><rect x="94.0971%" y="469" width="0.0138%" height="15" fill="rgb(210,31,41)" fg:x="40071659628" fg:w="5864832"/><text x="94.3471%" y="479.50"></text></g><g><title>java.lang.ClassLoader.defineClass1 (12,701,249 samples, 0.03%)</title><rect x="95.5903%" y="325" width="0.0298%" height="15" fill="rgb(221,200,47)" fg:x="40707535419" fg:w="12701249"/><text x="95.8403%" y="335.50"></text></g><g><title>java.lang.ClassLoader.loadClass (10,452,249 samples, 0.02%)</title><rect x="95.5956%" y="309" width="0.0245%" height="15" fill="rgb(226,26,5)" fg:x="40709784419" fg:w="10452249"/><text x="95.8456%" y="319.50"></text></g><g><title>jdk.internal.loader.BuiltinClassLoader.loadClass (9,044,957 samples, 0.02%)</title><rect x="95.5989%" y="293" width="0.0212%" height="15" fill="rgb(249,33,26)" fg:x="40711191711" fg:w="9044957"/><text x="95.8489%" y="303.50"></text></g><g><title>jdk.internal.loader.BuiltinClassLoader.loadClassOrNull (7,646,499 samples, 0.02%)</title><rect x="95.6022%" y="277" width="0.0180%" height="15" fill="rgb(235,183,28)" fg:x="40712590169" fg:w="7646499"/><text x="95.8522%" y="287.50"></text></g><g><title>java.net.URL.toString (5,109,292 samples, 0.01%)</title><rect x="95.6225%" y="309" width="0.0120%" height="15" fill="rgb(221,5,38)" fg:x="40721236126" fg:w="5109292"/><text x="95.8725%" y="319.50"></text></g><g><title>java.lang.ClassLoader.defineClassSourceLocation (6,109,417 samples, 0.01%)</title><rect x="95.6201%" y="325" width="0.0143%" height="15" fill="rgb(247,18,42)" fg:x="40720236668" fg:w="6109417"/><text x="95.8701%" y="335.50"></text></g><g><title>java.lang.ClassLoader.defineClass (27,415,458 samples, 0.06%)</title><rect x="95.5814%" y="341" width="0.0644%" height="15" fill="rgb(241,131,45)" fg:x="40703746961" fg:w="27415458"/><text x="95.8314%" y="351.50"></text></g><g><title>java.security.SecureClassLoader$CodeSourceKey.hashCode (4,314,249 samples, 0.01%)</title><rect x="95.6543%" y="309" width="0.0101%" height="15" fill="rgb(249,31,29)" fg:x="40734765339" fg:w="4314249"/><text x="95.9043%" y="319.50"></text></g><g><title>java.security.SecureClassLoader.defineClass (40,450,917 samples, 0.09%)</title><rect x="95.5697%" y="357" width="0.0950%" height="15" fill="rgb(225,111,53)" fg:x="40698753753" fg:w="40450917"/><text x="95.8197%" y="367.50"></text></g><g><title>java.security.SecureClassLoader.getProtectionDomain (8,042,251 samples, 0.02%)</title><rect x="95.6458%" y="341" width="0.0189%" height="15" fill="rgb(238,160,17)" fg:x="40731162419" fg:w="8042251"/><text x="95.8958%" y="351.50"></text></g><g><title>java.util.concurrent.ConcurrentHashMap.computeIfAbsent (6,814,042 samples, 0.02%)</title><rect x="95.6487%" y="325" width="0.0160%" height="15" fill="rgb(214,148,48)" fg:x="40732390628" fg:w="6814042"/><text x="95.8987%" y="335.50"></text></g><g><title>jdk.internal.loader.ClassLoaders$AppClassLoader.defineOrCheckPackage (8,308,749 samples, 0.02%)</title><rect x="95.6647%" y="357" width="0.0195%" height="15" fill="rgb(232,36,49)" fg:x="40739204670" fg:w="8308749"/><text x="95.9147%" y="367.50"></text></g><g><title>jdk.internal.loader.BuiltinClassLoader.defineOrCheckPackage (6,902,708 samples, 0.02%)</title><rect x="95.6680%" y="341" width="0.0162%" height="15" fill="rgb(209,103,24)" fg:x="40740610711" fg:w="6902708"/><text x="95.9180%" y="351.50"></text></g><g><title>jdk.internal.loader.Resource.getByteBuffer (15,490,044 samples, 0.04%)</title><rect x="95.6842%" y="357" width="0.0364%" height="15" fill="rgb(229,88,8)" fg:x="40747513419" fg:w="15490044"/><text x="95.9342%" y="367.50"></text></g><g><title>jdk.internal.loader.Resource.cachedInputStream (13,728,919 samples, 0.03%)</title><rect x="95.6883%" y="341" width="0.0322%" height="15" fill="rgb(213,181,19)" fg:x="40749274544" fg:w="13728919"/><text x="95.9383%" y="351.50"></text></g><g><title>jdk.internal.loader.URLClassPath$JarLoader$1.getInputStream (11,977,586 samples, 0.03%)</title><rect x="95.6924%" y="325" width="0.0281%" height="15" fill="rgb(254,191,54)" fg:x="40751025877" fg:w="11977586"/><text x="95.9424%" y="335.50"></text></g><g><title>java.util.jar.JarFile.getInputStream (10,234,461 samples, 0.02%)</title><rect x="95.6965%" y="309" width="0.0240%" height="15" fill="rgb(241,83,37)" fg:x="40752769002" fg:w="10234461"/><text x="95.9465%" y="319.50"></text></g><g><title>java.util.zip.ZipFile.getInputStream (8,499,419 samples, 0.02%)</title><rect x="95.7006%" y="293" width="0.0200%" height="15" fill="rgb(233,36,39)" fg:x="40754504044" fg:w="8499419"/><text x="95.9506%" y="303.50"></text></g><g><title>java.io.File.&lt;init&gt; (6,148,459 samples, 0.01%)</title><rect x="95.8001%" y="245" width="0.0144%" height="15" fill="rgb(226,3,54)" fg:x="40796883214" fg:w="6148459"/><text x="96.0501%" y="255.50"></text></g><g><title>java.lang.String.hashCode (6,899,211 samples, 0.02%)</title><rect x="95.8403%" y="181" width="0.0162%" height="15" fill="rgb(245,192,40)" fg:x="40813997338" fg:w="6899211"/><text x="96.0903%" y="191.50"></text></g><g><title>java.lang.StringLatin1.hashCode (5,483,961 samples, 0.01%)</title><rect x="95.8436%" y="165" width="0.0129%" height="15" fill="rgb(238,167,29)" fg:x="40815412588" fg:w="5483961"/><text x="96.0936%" y="175.50"></text></g><g><title>java.util.concurrent.ConcurrentHashMap.compute (9,594,417 samples, 0.02%)</title><rect x="95.8360%" y="197" width="0.0225%" height="15" fill="rgb(232,182,51)" fg:x="40812180922" fg:w="9594417"/><text x="96.0860%" y="207.50"></text></g><g><title>jdk.internal.loader.NativeLibraries.acquireNativeLibraryLock (11,746,459 samples, 0.03%)</title><rect x="95.8315%" y="213" width="0.0276%" height="15" fill="rgb(231,60,39)" fg:x="40810240880" fg:w="11746459"/><text x="96.0815%" y="223.50"></text></g><g><title>java.util.zip.CRC32.&lt;clinit&gt; (54,405,919 samples, 0.13%)</title><rect x="95.7347%" y="341" width="0.1278%" height="15" fill="rgb(208,69,12)" fg:x="40769022671" fg:w="54405919"/><text x="95.9847%" y="351.50"></text></g><g><title>java.util.zip.ZipUtils.loadLibrary (49,715,376 samples, 0.12%)</title><rect x="95.7457%" y="325" width="0.1167%" height="15" fill="rgb(235,93,37)" fg:x="40773713214" fg:w="49715376"/><text x="95.9957%" y="335.50"></text></g><g><title>jdk.internal.loader.BootLoader.loadLibrary (45,059,167 samples, 0.11%)</title><rect x="95.7566%" y="309" width="0.1058%" height="15" fill="rgb(213,116,39)" fg:x="40778369423" fg:w="45059167"/><text x="96.0066%" y="319.50"></text></g><g><title>jdk.internal.loader.NativeLibraries.loadLibrary (40,410,667 samples, 0.09%)</title><rect x="95.7676%" y="293" width="0.0949%" height="15" fill="rgb(222,207,29)" fg:x="40783017923" fg:w="40410667"/><text x="96.0176%" y="303.50"></text></g><g><title>jdk.internal.loader.NativeLibraries.loadLibrary (35,779,626 samples, 0.08%)</title><rect x="95.7784%" y="277" width="0.0840%" height="15" fill="rgb(206,96,30)" fg:x="40787648964" fg:w="35779626"/><text x="96.0284%" y="287.50"></text></g><g><title>jdk.internal.loader.NativeLibraries.findFromPaths (31,157,543 samples, 0.07%)</title><rect x="95.7893%" y="261" width="0.0732%" height="15" fill="rgb(218,138,4)" fg:x="40792271047" fg:w="31157543"/><text x="96.0393%" y="271.50"></text></g><g><title>jdk.internal.loader.NativeLibraries.loadLibrary (20,395,708 samples, 0.05%)</title><rect x="95.8146%" y="245" width="0.0479%" height="15" fill="rgb(250,191,14)" fg:x="40803032882" fg:w="20395708"/><text x="96.0646%" y="255.50"></text></g><g><title>jdk.internal.loader.NativeLibraries.loadLibrary (15,785,418 samples, 0.04%)</title><rect x="95.8254%" y="229" width="0.0371%" height="15" fill="rgb(239,60,40)" fg:x="40807643172" fg:w="15785418"/><text x="96.0754%" y="239.50"></text></g><g><title>jdk.internal.loader.URLClassPath$JarLoader$1.getBytes (66,792,832 samples, 0.16%)</title><rect x="95.7206%" y="357" width="0.1568%" height="15" fill="rgb(206,27,48)" fg:x="40763003463" fg:w="66792832"/><text x="95.9706%" y="367.50"></text></g><g><title>jdk.internal.loader.Resource.getBytes (5,886,620 samples, 0.01%)</title><rect x="95.8636%" y="341" width="0.0138%" height="15" fill="rgb(225,35,8)" fg:x="40823909675" fg:w="5886620"/><text x="96.1136%" y="351.50"></text></g><g><title>java.util.jar.Attributes$Name.of (6,228,544 samples, 0.01%)</title><rect x="95.9757%" y="229" width="0.0146%" height="15" fill="rgb(250,213,24)" fg:x="40871639708" fg:w="6228544"/><text x="96.2257%" y="239.50"></text></g><g><title>java.util.ImmutableCollections$MapN.get (5,215,170 samples, 0.01%)</title><rect x="95.9780%" y="213" width="0.0122%" height="15" fill="rgb(247,123,22)" fg:x="40872653082" fg:w="5215170"/><text x="96.2280%" y="223.50"></text></g><g><title>java.util.jar.Attributes.putValue (9,306,210 samples, 0.02%)</title><rect x="95.9721%" y="245" width="0.0219%" height="15" fill="rgb(231,138,38)" fg:x="40870115458" fg:w="9306210"/><text x="96.2221%" y="255.50"></text></g><g><title>java.util.jar.Attributes.read (22,860,664 samples, 0.05%)</title><rect x="95.9607%" y="261" width="0.0537%" height="15" fill="rgb(231,145,46)" fg:x="40865279961" fg:w="22860664"/><text x="96.2107%" y="271.50"></text></g><g><title>java.util.jar.Manifest$FastInputStream.readLine (8,717,957 samples, 0.02%)</title><rect x="95.9939%" y="245" width="0.0205%" height="15" fill="rgb(251,118,11)" fg:x="40879422668" fg:w="8717957"/><text x="96.2439%" y="255.50"></text></g><g><title>java.util.jar.Manifest$FastInputStream.readLine (7,514,333 samples, 0.02%)</title><rect x="95.9968%" y="229" width="0.0176%" height="15" fill="rgb(217,147,25)" fg:x="40880626292" fg:w="7514333"/><text x="96.2468%" y="239.50"></text></g><g><title>java.util.jar.Manifest$FastInputStream.fill (6,352,374 samples, 0.01%)</title><rect x="95.9995%" y="213" width="0.0149%" height="15" fill="rgb(247,81,37)" fg:x="40881788251" fg:w="6352374"/><text x="96.2495%" y="223.50"></text></g><g><title>java.util.zip.InflaterInputStream.read (5,261,207 samples, 0.01%)</title><rect x="96.0021%" y="197" width="0.0124%" height="15" fill="rgb(209,12,38)" fg:x="40882879418" fg:w="5261207"/><text x="96.2521%" y="207.50"></text></g><g><title>java.util.jar.Manifest.&lt;init&gt; (36,209,915 samples, 0.09%)</title><rect x="95.9303%" y="309" width="0.0850%" height="15" fill="rgb(227,1,9)" fg:x="40852324253" fg:w="36209915"/><text x="96.1803%" y="319.50"></text></g><g><title>java.util.jar.Manifest.&lt;init&gt; (32,201,915 samples, 0.08%)</title><rect x="95.9397%" y="293" width="0.0756%" height="15" fill="rgb(248,47,43)" fg:x="40856332253" fg:w="32201915"/><text x="96.1897%" y="303.50"></text></g><g><title>java.util.jar.Manifest.read (26,970,998 samples, 0.06%)</title><rect x="95.9520%" y="277" width="0.0633%" height="15" fill="rgb(221,10,30)" fg:x="40861563170" fg:w="26970998"/><text x="96.2020%" y="287.50"></text></g><g><title>java.util.zip.ZipCoder$UTF8ZipCoder.compare (5,291,495 samples, 0.01%)</title><rect x="96.0297%" y="277" width="0.0124%" height="15" fill="rgb(210,229,1)" fg:x="40894632960" fg:w="5291495"/><text x="96.2797%" y="287.50"></text></g><g><title>java.util.zip.ZipFile$Source.getEntryPos (7,439,996 samples, 0.02%)</title><rect x="96.0264%" y="293" width="0.0175%" height="15" fill="rgb(222,148,37)" fg:x="40893242627" fg:w="7439996"/><text x="96.2764%" y="303.50"></text></g><g><title>java.util.zip.ZipFile.getInputStream (17,058,541 samples, 0.04%)</title><rect x="96.0183%" y="309" width="0.0401%" height="15" fill="rgb(234,67,33)" fg:x="40889803751" fg:w="17058541"/><text x="96.2683%" y="319.50"></text></g><g><title>java.util.jar.JarFile.getManifest (69,506,789 samples, 0.16%)</title><rect x="95.8952%" y="341" width="0.1632%" height="15" fill="rgb(247,98,35)" fg:x="40837355753" fg:w="69506789"/><text x="96.1452%" y="351.50"></text></g><g><title>java.util.jar.JarFile.getManifestFromReference (62,047,039 samples, 0.15%)</title><rect x="95.9127%" y="325" width="0.1457%" height="15" fill="rgb(247,138,52)" fg:x="40844815503" fg:w="62047039"/><text x="96.1627%" y="335.50"></text></g><g><title>jdk.internal.loader.BuiltinClassLoader.defineClass (233,377,749 samples, 0.55%)</title><rect x="95.5107%" y="373" width="0.5480%" height="15" fill="rgb(213,79,30)" fg:x="40673636043" fg:w="233377749"/><text x="95.7607%" y="383.50"></text></g><g><title>jdk.internal.loader.URLClassPath$JarLoader$1.getManifest (77,187,998 samples, 0.18%)</title><rect x="95.8775%" y="357" width="0.1813%" height="15" fill="rgb(246,177,23)" fg:x="40829825794" fg:w="77187998"/><text x="96.1275%" y="367.50"></text></g><g><title>java.util.zip.ZipCoder$UTF8ZipCoder.compare (5,249,754 samples, 0.01%)</title><rect x="96.1747%" y="277" width="0.0123%" height="15" fill="rgb(230,62,27)" fg:x="40956397960" fg:w="5249754"/><text x="96.4247%" y="287.50"></text></g><g><title>java.util.zip.ZipFile$Source.getEntryPos (9,531,298 samples, 0.02%)</title><rect x="96.1707%" y="293" width="0.0224%" height="15" fill="rgb(216,154,8)" fg:x="40954710835" fg:w="9531298"/><text x="96.4207%" y="303.50"></text></g><g><title>java.util.jar.JarFile.getJarEntry (28,778,840 samples, 0.07%)</title><rect x="96.1453%" y="341" width="0.0676%" height="15" fill="rgb(244,35,45)" fg:x="40943866459" fg:w="28778840"/><text x="96.3953%" y="351.50"></text></g><g><title>java.util.jar.JarFile.getEntry (25,153,506 samples, 0.06%)</title><rect x="96.1538%" y="325" width="0.0591%" height="15" fill="rgb(251,115,12)" fg:x="40947491793" fg:w="25153506"/><text x="96.4038%" y="335.50"></text></g><g><title>java.util.zip.ZipFile.getEntry (21,525,714 samples, 0.05%)</title><rect x="96.1623%" y="309" width="0.0505%" height="15" fill="rgb(240,54,50)" fg:x="40951119585" fg:w="21525714"/><text x="96.4123%" y="319.50"></text></g><g><title>java.util.zip.ZipFile.getZipEntry (8,402,874 samples, 0.02%)</title><rect x="96.1931%" y="293" width="0.0197%" height="15" fill="rgb(233,84,52)" fg:x="40964242425" fg:w="8402874"/><text x="96.4431%" y="303.50"></text></g><g><title>java.net.URL.&lt;init&gt; (16,024,833 samples, 0.04%)</title><rect x="96.2220%" y="325" width="0.0376%" height="15" fill="rgb(207,117,47)" fg:x="40976545716" fg:w="16024833"/><text x="96.4720%" y="335.50"></text></g><g><title>java.net.URL.&lt;init&gt; (13,242,375 samples, 0.03%)</title><rect x="96.2285%" y="309" width="0.0311%" height="15" fill="rgb(249,43,39)" fg:x="40979328174" fg:w="13242375"/><text x="96.4785%" y="319.50"></text></g><g><title>sun.net.www.protocol.jar.Handler.parseURL (9,584,332 samples, 0.02%)</title><rect x="96.2371%" y="293" width="0.0225%" height="15" fill="rgb(209,38,44)" fg:x="40982986217" fg:w="9584332"/><text x="96.4871%" y="303.50"></text></g><g><title>jdk.internal.loader.URLClassPath$JarLoader.createResource (23,563,375 samples, 0.06%)</title><rect x="96.2128%" y="341" width="0.0553%" height="15" fill="rgb(236,212,23)" fg:x="40972645299" fg:w="23563375"/><text x="96.4628%" y="351.50"></text></g><g><title>jdk.internal.loader.URLClassPath$JarLoader.getResource (59,895,965 samples, 0.14%)</title><rect x="96.1275%" y="357" width="0.1406%" height="15" fill="rgb(242,79,21)" fg:x="40936312959" fg:w="59895965"/><text x="96.3775%" y="367.50"></text></g><g><title>java.io.InputStream.readNBytes (5,565,911 samples, 0.01%)</title><rect x="96.4149%" y="261" width="0.0131%" height="15" fill="rgb(211,96,35)" fg:x="41058681215" fg:w="5565911"/><text x="96.6649%" y="271.50"></text></g><g><title>java.util.zip.InflaterInputStream.read (4,590,328 samples, 0.01%)</title><rect x="96.4172%" y="245" width="0.0108%" height="15" fill="rgb(253,215,40)" fg:x="41059656798" fg:w="4590328"/><text x="96.6672%" y="255.50"></text></g><g><title>java.util.jar.JarFile.getBytes (22,133,244 samples, 0.05%)</title><rect x="96.4065%" y="277" width="0.0520%" height="15" fill="rgb(211,81,21)" fg:x="41055127923" fg:w="22133244"/><text x="96.6565%" y="287.50"></text></g><g><title>java.util.zip.ZipFile.getInputStream (11,530,041 samples, 0.03%)</title><rect x="96.4314%" y="261" width="0.0271%" height="15" fill="rgb(208,190,38)" fg:x="41065731126" fg:w="11530041"/><text x="96.6814%" y="271.50"></text></g><g><title>java.util.zip.ZipCoder$UTF8ZipCoder.compare (6,021,583 samples, 0.01%)</title><rect x="96.4888%" y="229" width="0.0141%" height="15" fill="rgb(235,213,38)" fg:x="41090142793" fg:w="6021583"/><text x="96.7388%" y="239.50"></text></g><g><title>java.util.Arrays.mismatch (4,569,210 samples, 0.01%)</title><rect x="96.4922%" y="213" width="0.0107%" height="15" fill="rgb(237,122,38)" fg:x="41091595166" fg:w="4569210"/><text x="96.7422%" y="223.50"></text></g><g><title>java.util.zip.ZipFile$Source.getEntryPos (10,719,671 samples, 0.03%)</title><rect x="96.4842%" y="245" width="0.0252%" height="15" fill="rgb(244,218,35)" fg:x="41088216168" fg:w="10719671"/><text x="96.7342%" y="255.50"></text></g><g><title>java.util.jar.JarFile.getManEntry (31,338,336 samples, 0.07%)</title><rect x="96.4585%" y="277" width="0.0736%" height="15" fill="rgb(240,68,47)" fg:x="41077261167" fg:w="31338336"/><text x="96.7085%" y="287.50"></text></g><g><title>java.util.zip.ZipFile.getEntry (24,518,543 samples, 0.06%)</title><rect x="96.4745%" y="261" width="0.0576%" height="15" fill="rgb(210,16,53)" fg:x="41084080960" fg:w="24518543"/><text x="96.7245%" y="271.50"></text></g><g><title>java.util.zip.ZipFile.getZipEntry (9,663,372 samples, 0.02%)</title><rect x="96.5094%" y="245" width="0.0227%" height="15" fill="rgb(235,124,12)" fg:x="41098936131" fg:w="9663372"/><text x="96.7594%" y="255.50"></text></g><g><title>java.util.jar.JavaUtilJarAccessImpl.jarFileHasClassPathAttribute (78,418,914 samples, 0.18%)</title><rect x="96.3482%" y="325" width="0.1841%" height="15" fill="rgb(224,169,11)" fg:x="41030290007" fg:w="78418914"/><text x="96.5982%" y="335.50"></text></g><g><title>java.util.jar.JarFile.hasClassPathAttribute (70,129,373 samples, 0.16%)</title><rect x="96.3677%" y="309" width="0.1647%" height="15" fill="rgb(250,166,2)" fg:x="41038579548" fg:w="70129373"/><text x="96.6177%" y="319.50"></text></g><g><title>java.util.jar.JarFile.checkForSpecialAttributes (61,850,706 samples, 0.15%)</title><rect x="96.3871%" y="293" width="0.1452%" height="15" fill="rgb(242,216,29)" fg:x="41046858215" fg:w="61850706"/><text x="96.6371%" y="303.50"></text></g><g><title>jdk.internal.loader.URLClassPath$JarLoader.getClassPath (86,733,789 samples, 0.20%)</title><rect x="96.3287%" y="341" width="0.2037%" height="15" fill="rgb(230,116,27)" fg:x="41021975840" fg:w="86733789"/><text x="96.5787%" y="351.50"></text></g><g><title>java.lang.String.valueOf (6,717,539 samples, 0.02%)</title><rect x="96.5935%" y="293" width="0.0158%" height="15" fill="rgb(228,99,48)" fg:x="41134759464" fg:w="6717539"/><text x="96.8435%" y="303.50"></text></g><g><title>java.net.URL.toString (5,634,372 samples, 0.01%)</title><rect x="96.5961%" y="277" width="0.0132%" height="15" fill="rgb(253,11,6)" fg:x="41135842631" fg:w="5634372"/><text x="96.8461%" y="287.50"></text></g><g><title>java.net.URL.toExternalForm (4,560,705 samples, 0.01%)</title><rect x="96.5986%" y="261" width="0.0107%" height="15" fill="rgb(247,143,39)" fg:x="41136916298" fg:w="4560705"/><text x="96.8486%" y="271.50"></text></g><g><title>java.lang.StringBuilder.append (9,064,121 samples, 0.02%)</title><rect x="96.5893%" y="309" width="0.0213%" height="15" fill="rgb(236,97,10)" fg:x="41132974422" fg:w="9064121"/><text x="96.8393%" y="319.50"></text></g><g><title>java.nio.file.Files.readAttributes (10,318,620 samples, 0.02%)</title><rect x="96.7555%" y="197" width="0.0242%" height="15" fill="rgb(233,208,19)" fg:x="41203735290" fg:w="10318620"/><text x="97.0055%" y="207.50"></text></g><g><title>sun.nio.fs.UnixFileSystemProvider.readAttributes (8,951,120 samples, 0.02%)</title><rect x="96.7587%" y="181" width="0.0210%" height="15" fill="rgb(216,164,2)" fg:x="41205102790" fg:w="8951120"/><text x="97.0087%" y="191.50"></text></g><g><title>sun.nio.fs.UnixFileAttributeViews$Basic.readAttributes (7,436,955 samples, 0.02%)</title><rect x="96.7623%" y="165" width="0.0175%" height="15" fill="rgb(220,129,5)" fg:x="41206616955" fg:w="7436955"/><text x="97.0123%" y="175.50"></text></g><g><title>sun.nio.fs.UnixFileAttributes.get (6,231,581 samples, 0.01%)</title><rect x="96.7651%" y="149" width="0.0146%" height="15" fill="rgb(242,17,10)" fg:x="41207822329" fg:w="6231581"/><text x="97.0151%" y="159.50"></text></g><g><title>sun.nio.fs.UnixNativeDispatcher.stat (5,181,247 samples, 0.01%)</title><rect x="96.7676%" y="133" width="0.0122%" height="15" fill="rgb(242,107,0)" fg:x="41208872663" fg:w="5181247"/><text x="97.0176%" y="143.50"></text></g><g><title>java.util.HashMap.get (4,584,087 samples, 0.01%)</title><rect x="96.7797%" y="197" width="0.0108%" height="15" fill="rgb(251,28,31)" fg:x="41214053910" fg:w="4584087"/><text x="97.0297%" y="207.50"></text></g><g><title>java.lang.String.charAt (4,468,960 samples, 0.01%)</title><rect x="96.8187%" y="149" width="0.0105%" height="15" fill="rgb(233,223,10)" fg:x="41230648747" fg:w="4468960"/><text x="97.0687%" y="159.50"></text></g><g><title>java.util.zip.ZipFile$Source.get (37,545,790 samples, 0.09%)</title><rect x="96.7411%" y="213" width="0.0882%" height="15" fill="rgb(215,21,27)" fg:x="41197600249" fg:w="37545790"/><text x="96.9911%" y="223.50"></text></g><g><title>sun.nio.fs.UnixFileSystem.getPath (16,481,668 samples, 0.04%)</title><rect x="96.7906%" y="197" width="0.0387%" height="15" fill="rgb(232,23,21)" fg:x="41218664371" fg:w="16481668"/><text x="97.0406%" y="207.50"></text></g><g><title>sun.nio.fs.UnixPath.&lt;init&gt; (12,569,584 samples, 0.03%)</title><rect x="96.7997%" y="181" width="0.0295%" height="15" fill="rgb(244,5,23)" fg:x="41222576455" fg:w="12569584"/><text x="97.0497%" y="191.50"></text></g><g><title>sun.nio.fs.UnixPath.normalizeAndCheck (8,162,459 samples, 0.02%)</title><rect x="96.8101%" y="165" width="0.0192%" height="15" fill="rgb(226,81,46)" fg:x="41226983580" fg:w="8162459"/><text x="97.0601%" y="175.50"></text></g><g><title>java.util.zip.ZipFile$CleanableResource.&lt;init&gt; (45,868,202 samples, 0.11%)</title><rect x="96.7215%" y="229" width="0.1077%" height="15" fill="rgb(247,70,30)" fg:x="41189278129" fg:w="45868202"/><text x="96.9715%" y="239.50"></text></g><g><title>java.util.jar.JarFile.&lt;init&gt; (75,121,375 samples, 0.18%)</title><rect x="96.6581%" y="277" width="0.1764%" height="15" fill="rgb(212,68,19)" fg:x="41162256334" fg:w="75121375"/><text x="96.9081%" y="287.50"></text></g><g><title>java.util.zip.ZipFile.&lt;init&gt; (66,761,458 samples, 0.16%)</title><rect x="96.6777%" y="261" width="0.1568%" height="15" fill="rgb(240,187,13)" fg:x="41170616251" fg:w="66761458"/><text x="96.9277%" y="271.50"></text></g><g><title>java.util.zip.ZipFile.&lt;init&gt; (58,584,250 samples, 0.14%)</title><rect x="96.6969%" y="245" width="0.1376%" height="15" fill="rgb(223,113,26)" fg:x="41178793459" fg:w="58584250"/><text x="96.9469%" y="255.50"></text></g><g><title>jdk.internal.loader.URLClassPath$JarLoader.ensureOpen (97,728,294 samples, 0.23%)</title><rect x="96.6111%" y="309" width="0.2295%" height="15" fill="rgb(206,192,2)" fg:x="41142262585" fg:w="97728294"/><text x="96.8611%" y="319.50"></text></g><g><title>jdk.internal.loader.URLClassPath$JarLoader.getJarFile (88,325,044 samples, 0.21%)</title><rect x="96.6332%" y="293" width="0.2074%" height="15" fill="rgb(241,108,4)" fg:x="41151665835" fg:w="88325044"/><text x="96.8832%" y="303.50"></text></g><g><title>jdk.internal.loader.URLClassPath$JarLoader.newURL (4,524,411 samples, 0.01%)</title><rect x="96.8406%" y="309" width="0.0106%" height="15" fill="rgb(247,173,49)" fg:x="41239990879" fg:w="4524411"/><text x="97.0906%" y="319.50"></text></g><g><title>jdk.internal.loader.URLClassPath.getLoader (135,815,743 samples, 0.32%)</title><rect x="96.5324%" y="341" width="0.3189%" height="15" fill="rgb(224,114,35)" fg:x="41108709629" fg:w="135815743"/><text x="96.7824%" y="351.50"></text></g><g><title>jdk.internal.loader.URLClassPath$JarLoader.&lt;init&gt; (123,511,284 samples, 0.29%)</title><rect x="96.5612%" y="325" width="0.2900%" height="15" fill="rgb(245,159,27)" fg:x="41121014088" fg:w="123511284"/><text x="96.8112%" y="335.50"></text></g><g><title>jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull (625,305,239 samples, 1.47%)</title><rect x="95.3871%" y="389" width="1.4684%" height="15" fill="rgb(245,172,44)" fg:x="40620996628" fg:w="625305239"/><text x="95.6371%" y="399.50"></text></g><g><title>jdk.internal.loader.URLClassPath.getResource (339,288,075 samples, 0.80%)</title><rect x="96.0587%" y="373" width="0.7967%" height="15" fill="rgb(236,23,11)" fg:x="40907013792" fg:w="339288075"/><text x="96.3087%" y="383.50"></text></g><g><title>jdk.internal.loader.URLClassPath.getLoader (250,092,943 samples, 0.59%)</title><rect x="96.2682%" y="357" width="0.5873%" height="15" fill="rgb(205,117,38)" fg:x="40996208924" fg:w="250092943"/><text x="96.5182%" y="367.50"></text></g><g><title>jdk.internal.loader.BuiltinClassLoader.loadClassOrNull (4,744,928 samples, 0.01%)</title><rect x="96.8585%" y="389" width="0.0111%" height="15" fill="rgb(237,72,25)" fg:x="41247606076" fg:w="4744928"/><text x="97.1085%" y="399.50"></text></g><g><title>java.lang.Class.forName (901,381,297 samples, 2.12%)</title><rect x="94.7530%" y="469" width="2.1166%" height="15" fill="rgb(244,70,9)" fg:x="40350970082" fg:w="901381297"/><text x="95.0030%" y="479.50">j..</text></g><g><title>java.lang.Class.forName0 (847,772,547 samples, 1.99%)</title><rect x="94.8789%" y="453" width="1.9908%" height="15" fill="rgb(217,125,39)" fg:x="40404578832" fg:w="847772547"/><text x="95.1289%" y="463.50">j..</text></g><g><title>java.lang.ClassLoader.loadClass (794,167,213 samples, 1.86%)</title><rect x="95.0048%" y="437" width="1.8649%" height="15" fill="rgb(235,36,10)" fg:x="40458184166" fg:w="794167213"/><text x="95.2548%" y="447.50">j..</text></g><g><title>jdk.internal.loader.BuiltinClassLoader.loadClass (740,574,088 samples, 1.74%)</title><rect x="95.1306%" y="421" width="1.7390%" height="15" fill="rgb(251,123,47)" fg:x="40511777291" fg:w="740574088"/><text x="95.3806%" y="431.50"></text></g><g><title>jdk.internal.loader.BuiltinClassLoader.loadClassOrNull (686,985,504 samples, 1.61%)</title><rect x="95.2565%" y="405" width="1.6132%" height="15" fill="rgb(221,13,13)" fg:x="40565365875" fg:w="686985504"/><text x="95.5065%" y="415.50"></text></g><g><title>java.lang.Runtime.version (4,845,207 samples, 0.01%)</title><rect x="96.8783%" y="453" width="0.0114%" height="15" fill="rgb(238,131,9)" fg:x="41256043709" fg:w="4845207"/><text x="97.1283%" y="463.50"></text></g><g><title>java.util.jar.JarFile.&lt;clinit&gt; (8,874,245 samples, 0.02%)</title><rect x="96.8697%" y="469" width="0.0208%" height="15" fill="rgb(211,50,8)" fg:x="41252371754" fg:w="8874245"/><text x="97.1197%" y="479.50"></text></g><g><title>jdk.internal.loader.ClassLoaderHelper.parsePath (7,749,626 samples, 0.02%)</title><rect x="98.2567%" y="133" width="0.0182%" height="15" fill="rgb(245,182,24)" fg:x="41843046548" fg:w="7749626"/><text x="98.5067%" y="143.50"></text></g><g><title>jdk.internal.loader.NativeLibraries$LibraryPaths.&lt;clinit&gt; (10,931,585 samples, 0.03%)</title><rect x="98.2493%" y="149" width="0.0257%" height="15" fill="rgb(242,14,37)" fg:x="41839866089" fg:w="10931585"/><text x="98.4993%" y="159.50"></text></g><g><title>java.io.UnixFileSystem.resolve (4,316,462 samples, 0.01%)</title><rect x="98.3161%" y="117" width="0.0101%" height="15" fill="rgb(246,228,12)" fg:x="41868315753" fg:w="4316462"/><text x="98.5661%" y="127.50"></text></g><g><title>java.io.File.&lt;init&gt; (8,911,416 samples, 0.02%)</title><rect x="98.3053%" y="133" width="0.0209%" height="15" fill="rgb(213,55,15)" fg:x="41863721466" fg:w="8911416"/><text x="98.5553%" y="143.50"></text></g><g><title>jdk.internal.loader.NativeLibraries$NativeLibraryImpl.open (12,323,583 samples, 0.03%)</title><rect x="98.3920%" y="101" width="0.0289%" height="15" fill="rgb(209,9,3)" fg:x="41900662384" fg:w="12323583"/><text x="98.6420%" y="111.50"></text></g><g><title>jdk.internal.loader.NativeLibraries.load (4,605,455 samples, 0.01%)</title><rect x="98.4102%" y="85" width="0.0108%" height="15" fill="rgb(230,59,30)" fg:x="41908380512" fg:w="4605455"/><text x="98.6602%" y="95.50"></text></g><g><title>java.lang.String.hashCode (9,316,287 samples, 0.02%)</title><rect x="98.4342%" y="69" width="0.0219%" height="15" fill="rgb(209,121,21)" fg:x="41918637175" fg:w="9316287"/><text x="98.6842%" y="79.50"></text></g><g><title>java.lang.StringLatin1.hashCode (7,402,620 samples, 0.02%)</title><rect x="98.4387%" y="53" width="0.0174%" height="15" fill="rgb(220,109,13)" fg:x="41920550842" fg:w="7402620"/><text x="98.6887%" y="63.50"></text></g><g><title>jdk.internal.util.ArraysSupport.hashCodeOfUnsigned (5,526,204 samples, 0.01%)</title><rect x="98.4431%" y="37" width="0.0130%" height="15" fill="rgb(232,18,1)" fg:x="41922427258" fg:w="5526204"/><text x="98.6931%" y="47.50"></text></g><g><title>java.util.concurrent.ConcurrentHashMap.compute (14,381,082 samples, 0.03%)</title><rect x="98.4278%" y="85" width="0.0338%" height="15" fill="rgb(215,41,42)" fg:x="41915900467" fg:w="14381082"/><text x="98.6778%" y="95.50"></text></g><g><title>jdk.internal.loader.NativeLibraries.acquireNativeLibraryLock (17,577,748 samples, 0.04%)</title><rect x="98.4210%" y="101" width="0.0413%" height="15" fill="rgb(224,123,36)" fg:x="41912985967" fg:w="17577748"/><text x="98.6710%" y="111.50"></text></g><g><title>jdk.internal.loader.BootLoader.loadLibrary (141,039,293 samples, 0.33%)</title><rect x="98.1355%" y="197" width="0.3312%" height="15" fill="rgb(240,125,3)" fg:x="41791394964" fg:w="141039293"/><text x="98.3855%" y="207.50"></text></g><g><title>jdk.internal.loader.NativeLibraries.loadLibrary (124,858,126 samples, 0.29%)</title><rect x="98.1734%" y="181" width="0.2932%" height="15" fill="rgb(205,98,50)" fg:x="41807576131" fg:w="124858126"/><text x="98.4234%" y="191.50"></text></g><g><title>jdk.internal.loader.NativeLibraries.loadLibrary (108,706,459 samples, 0.26%)</title><rect x="98.2114%" y="165" width="0.2553%" height="15" fill="rgb(205,185,37)" fg:x="41823727798" fg:w="108706459"/><text x="98.4614%" y="175.50"></text></g><g><title>jdk.internal.loader.NativeLibraries.findFromPaths (81,636,583 samples, 0.19%)</title><rect x="98.2749%" y="149" width="0.1917%" height="15" fill="rgb(238,207,15)" fg:x="41850797674" fg:w="81636583"/><text x="98.5249%" y="159.50"></text></g><g><title>jdk.internal.loader.NativeLibraries.loadLibrary (59,795,917 samples, 0.14%)</title><rect x="98.3262%" y="133" width="0.1404%" height="15" fill="rgb(213,199,42)" fg:x="41872638340" fg:w="59795917"/><text x="98.5762%" y="143.50"></text></g><g><title>jdk.internal.loader.NativeLibraries.loadLibrary (47,016,875 samples, 0.11%)</title><rect x="98.3562%" y="117" width="0.1104%" height="15" fill="rgb(235,201,11)" fg:x="41885417382" fg:w="47016875"/><text x="98.6062%" y="127.50"></text></g><g><title>sun.nio.fs.UnixNativeDispatcher.&lt;clinit&gt; (164,459,129 samples, 0.39%)</title><rect x="98.0946%" y="213" width="0.3862%" height="15" fill="rgb(207,46,11)" fg:x="41773986130" fg:w="164459129"/><text x="98.3446%" y="223.50"></text></g><g><title>sun.nio.fs.UnixNativeDispatcher.init (6,011,002 samples, 0.01%)</title><rect x="98.4666%" y="197" width="0.0141%" height="15" fill="rgb(241,35,35)" fg:x="41932434257" fg:w="6011002"/><text x="98.7166%" y="207.50"></text></g><g><title>java.lang.ClassLoader.findNative (4,811,877 samples, 0.01%)</title><rect x="98.4695%" y="181" width="0.0113%" height="15" fill="rgb(243,32,47)" fg:x="41933633382" fg:w="4811877"/><text x="98.7195%" y="191.50"></text></g><g><title>sun.nio.fs.UnixNativeDispatcher.getcwd (5,404,542 samples, 0.01%)</title><rect x="98.4808%" y="213" width="0.0127%" height="15" fill="rgb(247,202,23)" fg:x="41938445259" fg:w="5404542"/><text x="98.7308%" y="223.50"></text></g><g><title>java.lang.ClassLoader.findNative (4,362,584 samples, 0.01%)</title><rect x="98.4832%" y="197" width="0.0102%" height="15" fill="rgb(219,102,11)" fg:x="41939487217" fg:w="4362584"/><text x="98.7332%" y="207.50"></text></g><g><title>sun.nio.fs.UnixPath.normalizeAndCheck (4,782,034 samples, 0.01%)</title><rect x="98.4959%" y="213" width="0.0112%" height="15" fill="rgb(243,110,44)" fg:x="41944911638" fg:w="4782034"/><text x="98.7459%" y="223.50"></text></g><g><title>sun.nio.fs.MacOSXFileSystem.&lt;init&gt; (241,283,670 samples, 0.57%)</title><rect x="97.9417%" y="261" width="0.5666%" height="15" fill="rgb(222,74,54)" fg:x="41708868421" fg:w="241283670"/><text x="98.1917%" y="271.50"></text></g><g><title>sun.nio.fs.BsdFileSystem.&lt;init&gt; (219,762,128 samples, 0.52%)</title><rect x="97.9922%" y="245" width="0.5161%" height="15" fill="rgb(216,99,12)" fg:x="41730389963" fg:w="219762128"/><text x="98.2422%" y="255.50"></text></g><g><title>sun.nio.fs.UnixFileSystem.&lt;init&gt; (198,250,669 samples, 0.47%)</title><rect x="98.0427%" y="229" width="0.4655%" height="15" fill="rgb(226,22,26)" fg:x="41751901422" fg:w="198250669"/><text x="98.2927%" y="239.50"></text></g><g><title>sun.nio.fs.MacOSXFileSystemProvider.&lt;init&gt; (350,557,632 samples, 0.82%)</title><rect x="97.6852%" y="341" width="0.8232%" height="15" fill="rgb(217,163,10)" fg:x="41599632293" fg:w="350557632"/><text x="97.9352%" y="351.50"></text></g><g><title>sun.nio.fs.BsdFileSystemProvider.&lt;init&gt; (328,765,840 samples, 0.77%)</title><rect x="97.7363%" y="325" width="0.7720%" height="15" fill="rgb(213,25,53)" fg:x="41621424085" fg:w="328765840"/><text x="97.9863%" y="335.50"></text></g><g><title>sun.nio.fs.UnixFileSystemProvider.&lt;init&gt; (306,983,465 samples, 0.72%)</title><rect x="97.7875%" y="309" width="0.7209%" height="15" fill="rgb(252,105,26)" fg:x="41643206460" fg:w="306983465"/><text x="98.0375%" y="319.50"></text></g><g><title>sun.nio.fs.MacOSXFileSystemProvider.newFileSystem (285,180,589 samples, 0.67%)</title><rect x="97.8387%" y="293" width="0.6697%" height="15" fill="rgb(220,39,43)" fg:x="41665009336" fg:w="285180589"/><text x="98.0887%" y="303.50"></text></g><g><title>sun.nio.fs.MacOSXFileSystemProvider.newFileSystem (263,450,006 samples, 0.62%)</title><rect x="97.8897%" y="277" width="0.6186%" height="15" fill="rgb(229,68,48)" fg:x="41686739919" fg:w="263450006"/><text x="98.1397%" y="287.50"></text></g><g><title>sun.nio.fs.DefaultFileSystemProvider.&lt;clinit&gt; (374,573,302 samples, 0.88%)</title><rect x="97.6288%" y="357" width="0.8796%" height="15" fill="rgb(252,8,32)" fg:x="41575617956" fg:w="374573302"/><text x="97.8788%" y="367.50"></text></g><g><title>java.util.zip.ZipFile$Source.&lt;clinit&gt; (397,225,509 samples, 0.93%)</title><rect x="97.5756%" y="373" width="0.9328%" height="15" fill="rgb(223,20,43)" fg:x="41552974582" fg:w="397225509"/><text x="97.8256%" y="383.50"></text></g><g><title>sun.nio.fs.AbstractBasicFileAttributeView.&lt;clinit&gt; (4,606,126 samples, 0.01%)</title><rect x="98.5878%" y="293" width="0.0108%" height="15" fill="rgb(229,81,49)" fg:x="41984012383" fg:w="4606126"/><text x="98.8378%" y="303.50"></text></g><g><title>sun.nio.fs.BsdFileAttributeViews.createBasicView (5,740,208 samples, 0.01%)</title><rect x="98.5853%" y="309" width="0.0135%" height="15" fill="rgb(236,28,36)" fg:x="41982944591" fg:w="5740208"/><text x="98.8353%" y="319.50"></text></g><g><title>sun.nio.fs.BsdFileSystemProvider.getFileAttributeView (6,842,874 samples, 0.02%)</title><rect x="98.5827%" y="325" width="0.0161%" height="15" fill="rgb(249,185,26)" fg:x="41981842675" fg:w="6842874"/><text x="98.8327%" y="335.50"></text></g><g><title>sun.nio.fs.NativeBuffers.getNativeBufferFromCache (16,989,915 samples, 0.04%)</title><rect x="98.6567%" y="261" width="0.0399%" height="15" fill="rgb(249,174,33)" fg:x="42013383346" fg:w="16989915"/><text x="98.9067%" y="271.50"></text></g><g><title>jdk.internal.misc.CarrierThreadLocal.get (15,657,207 samples, 0.04%)</title><rect x="98.6599%" y="245" width="0.0368%" height="15" fill="rgb(233,201,37)" fg:x="42014716054" fg:w="15657207"/><text x="98.9099%" y="255.50"></text></g><g><title>java.lang.System$1.getCarrierThreadLocal (14,337,915 samples, 0.03%)</title><rect x="98.6630%" y="229" width="0.0337%" height="15" fill="rgb(221,78,26)" fg:x="42016035346" fg:w="14337915"/><text x="98.9130%" y="239.50"></text></g><g><title>java.lang.ThreadLocal.getCarrierThreadLocal (13,031,582 samples, 0.03%)</title><rect x="98.6660%" y="213" width="0.0306%" height="15" fill="rgb(250,127,30)" fg:x="42017341679" fg:w="13031582"/><text x="98.9160%" y="223.50"></text></g><g><title>java.lang.ThreadLocal.get (11,736,540 samples, 0.03%)</title><rect x="98.6691%" y="197" width="0.0276%" height="15" fill="rgb(230,49,44)" fg:x="42018636721" fg:w="11736540"/><text x="98.9191%" y="207.50"></text></g><g><title>java.lang.ThreadLocal.setInitialValue (10,468,416 samples, 0.02%)</title><rect x="98.6720%" y="181" width="0.0246%" height="15" fill="rgb(229,67,23)" fg:x="42019904845" fg:w="10468416"/><text x="98.9220%" y="191.50"></text></g><g><title>jdk.internal.misc.TerminatingThreadLocal.register (8,800,124 samples, 0.02%)</title><rect x="98.6760%" y="165" width="0.0207%" height="15" fill="rgb(249,83,47)" fg:x="42021573137" fg:w="8800124"/><text x="98.9260%" y="175.50"></text></g><g><title>jdk.internal.misc.CarrierThreadLocal.get (7,623,623 samples, 0.02%)</title><rect x="98.6787%" y="149" width="0.0179%" height="15" fill="rgb(215,43,3)" fg:x="42022749638" fg:w="7623623"/><text x="98.9287%" y="159.50"></text></g><g><title>java.lang.System$1.getCarrierThreadLocal (6,671,706 samples, 0.02%)</title><rect x="98.6810%" y="133" width="0.0157%" height="15" fill="rgb(238,154,13)" fg:x="42023701555" fg:w="6671706"/><text x="98.9310%" y="143.50"></text></g><g><title>java.lang.ThreadLocal.getCarrierThreadLocal (5,733,998 samples, 0.01%)</title><rect x="98.6832%" y="117" width="0.0135%" height="15" fill="rgb(219,56,2)" fg:x="42024639263" fg:w="5733998"/><text x="98.9332%" y="127.50"></text></g><g><title>java.lang.ThreadLocal.get (4,810,540 samples, 0.01%)</title><rect x="98.6853%" y="101" width="0.0113%" height="15" fill="rgb(233,0,4)" fg:x="42025562721" fg:w="4810540"/><text x="98.9353%" y="111.50"></text></g><g><title>sun.nio.fs.UnixNativeDispatcher.copyToNativeBuffer (25,191,961 samples, 0.06%)</title><rect x="98.6376%" y="277" width="0.0592%" height="15" fill="rgb(235,30,7)" fg:x="42005217259" fg:w="25191961"/><text x="98.8876%" y="287.50"></text></g><g><title>java.nio.file.Files.readAttributes (64,169,135 samples, 0.15%)</title><rect x="98.5571%" y="357" width="0.1507%" height="15" fill="rgb(250,79,13)" fg:x="41970957965" fg:w="64169135"/><text x="98.8071%" y="367.50"></text></g><g><title>sun.nio.fs.UnixFileSystemProvider.readAttributes (58,685,884 samples, 0.14%)</title><rect x="98.5700%" y="341" width="0.1378%" height="15" fill="rgb(211,146,34)" fg:x="41976441216" fg:w="58685884"/><text x="98.8200%" y="351.50"></text></g><g><title>sun.nio.fs.UnixFileAttributeViews$Basic.readAttributes (46,441,551 samples, 0.11%)</title><rect x="98.5987%" y="325" width="0.1091%" height="15" fill="rgb(228,22,38)" fg:x="41988685549" fg:w="46441551"/><text x="98.8487%" y="335.50"></text></g><g><title>sun.nio.fs.UnixFileAttributes.get (42,092,049 samples, 0.10%)</title><rect x="98.6089%" y="309" width="0.0988%" height="15" fill="rgb(235,168,5)" fg:x="41993035051" fg:w="42092049"/><text x="98.8589%" y="319.50"></text></g><g><title>sun.nio.fs.UnixNativeDispatcher.stat (37,856,966 samples, 0.09%)</title><rect x="98.6189%" y="293" width="0.0889%" height="15" fill="rgb(221,155,16)" fg:x="41997270134" fg:w="37856966"/><text x="98.8689%" y="303.50"></text></g><g><title>sun.nio.fs.UnixNativeDispatcher.stat0 (4,717,880 samples, 0.01%)</title><rect x="98.6967%" y="277" width="0.0111%" height="15" fill="rgb(215,215,53)" fg:x="42030409220" fg:w="4717880"/><text x="98.9467%" y="287.50"></text></g><g><title>java.util.zip.ZipFile$Source.checkAndAddEntry (44,118,797 samples, 0.10%)</title><rect x="98.7819%" y="325" width="0.1036%" height="15" fill="rgb(223,4,10)" fg:x="42066674435" fg:w="44118797"/><text x="99.0319%" y="335.50"></text></g><g><title>java.util.zip.ZipFile$Source.nextEntryPos (6,437,502 samples, 0.02%)</title><rect x="98.8932%" y="325" width="0.0151%" height="15" fill="rgb(234,103,6)" fg:x="42114084863" fg:w="6437502"/><text x="99.1432%" y="335.50"></text></g><g><title>java.util.zip.ZipFile$Source.initCEN (66,849,928 samples, 0.16%)</title><rect x="98.7517%" y="341" width="0.1570%" height="15" fill="rgb(227,97,0)" fg:x="42053806393" fg:w="66849928"/><text x="99.0017%" y="351.50"></text></g><g><title>java.util.zip.ZipFile$Source.&lt;init&gt; (82,423,889 samples, 0.19%)</title><rect x="98.7157%" y="357" width="0.1935%" height="15" fill="rgb(234,150,53)" fg:x="42038515807" fg:w="82423889"/><text x="98.9657%" y="367.50"></text></g><g><title>java.util.zip.ZipFile$Source.get (173,931,358 samples, 0.41%)</title><rect x="98.5084%" y="373" width="0.4084%" height="15" fill="rgb(228,201,54)" fg:x="41950200091" fg:w="173931358"/><text x="98.7584%" y="383.50"></text></g><g><title>java.lang.ref.Cleaner.create (6,742,669 samples, 0.02%)</title><rect x="98.9201%" y="357" width="0.0158%" height="15" fill="rgb(222,22,37)" fg:x="42125545658" fg:w="6742669"/><text x="99.1701%" y="367.50"></text></g><g><title>jdk.internal.ref.CleanerImpl.start (4,516,127 samples, 0.01%)</title><rect x="98.9253%" y="341" width="0.0106%" height="15" fill="rgb(237,53,32)" fg:x="42127772200" fg:w="4516127"/><text x="99.1753%" y="351.50"></text></g><g><title>jdk.internal.ref.CleanerFactory.&lt;clinit&gt; (8,166,378 samples, 0.02%)</title><rect x="98.9168%" y="373" width="0.0192%" height="15" fill="rgb(233,25,53)" fg:x="42124131449" fg:w="8166378"/><text x="99.1668%" y="383.50"></text></g><g><title>java.util.zip.ZipFile$CleanableResource.&lt;init&gt; (625,165,165 samples, 1.47%)</title><rect x="97.4679%" y="389" width="1.4680%" height="15" fill="rgb(210,40,34)" fg:x="41507133246" fg:w="625165165"/><text x="97.7179%" y="399.50"></text></g><g><title>java.nio.DirectByteBuffer.&lt;init&gt; (4,834,793 samples, 0.01%)</title><rect x="98.9748%" y="309" width="0.0114%" height="15" fill="rgb(241,220,44)" fg:x="42148835660" fg:w="4834793"/><text x="99.2248%" y="319.50"></text></g><g><title>jdk.internal.perf.PerfCounter.getZipFileOpenTime (20,590,795 samples, 0.05%)</title><rect x="98.9378%" y="389" width="0.0484%" height="15" fill="rgb(235,28,35)" fg:x="42133098658" fg:w="20590795"/><text x="99.1878%" y="399.50"></text></g><g><title>jdk.internal.perf.PerfCounter$CoreCounters.&lt;clinit&gt; (18,017,795 samples, 0.04%)</title><rect x="98.9439%" y="373" width="0.0423%" height="15" fill="rgb(210,56,17)" fg:x="42135671658" fg:w="18017795"/><text x="99.1939%" y="383.50"></text></g><g><title>jdk.internal.perf.PerfCounter.newPerfCounter (15,452,795 samples, 0.04%)</title><rect x="98.9499%" y="357" width="0.0363%" height="15" fill="rgb(224,130,29)" fg:x="42138236658" fg:w="15452795"/><text x="99.1999%" y="367.50"></text></g><g><title>jdk.internal.perf.PerfCounter.&lt;init&gt; (12,924,754 samples, 0.03%)</title><rect x="98.9558%" y="341" width="0.0304%" height="15" fill="rgb(235,212,8)" fg:x="42140764699" fg:w="12924754"/><text x="99.2058%" y="351.50"></text></g><g><title>jdk.internal.perf.Perf.createLong (6,863,210 samples, 0.02%)</title><rect x="98.9701%" y="325" width="0.0161%" height="15" fill="rgb(223,33,50)" fg:x="42146826243" fg:w="6863210"/><text x="99.2201%" y="335.50"></text></g><g><title>java.util.jar.JarFile.&lt;init&gt; (893,124,244 samples, 2.10%)</title><rect x="96.8905%" y="469" width="2.0973%" height="15" fill="rgb(219,149,13)" fg:x="41261245999" fg:w="893124244"/><text x="97.1405%" y="479.50">j..</text></g><g><title>java.util.jar.JarFile.&lt;init&gt; (843,589,246 samples, 1.98%)</title><rect x="97.0069%" y="453" width="1.9809%" height="15" fill="rgb(250,156,29)" fg:x="41310780997" fg:w="843589246"/><text x="97.2569%" y="463.50">j..</text></g><g><title>java.util.jar.JarFile.&lt;init&gt; (794,926,163 samples, 1.87%)</title><rect x="97.1211%" y="437" width="1.8667%" height="15" fill="rgb(216,193,19)" fg:x="41359444080" fg:w="794926163"/><text x="97.3711%" y="447.50">j..</text></g><g><title>java.util.zip.ZipFile.&lt;init&gt; (746,227,621 samples, 1.75%)</title><rect x="97.2355%" y="421" width="1.7523%" height="15" fill="rgb(216,135,14)" fg:x="41408142622" fg:w="746227621"/><text x="97.4855%" y="431.50"></text></g><g><title>java.util.zip.ZipFile.&lt;init&gt; (697,633,246 samples, 1.64%)</title><rect x="97.3496%" y="405" width="1.6382%" height="15" fill="rgb(241,47,5)" fg:x="41456736997" fg:w="697633246"/><text x="97.5996%" y="415.50"></text></g><g><title>java.util.zip.Inflater.end (9,444,417 samples, 0.02%)</title><rect x="99.0018%" y="389" width="0.0222%" height="15" fill="rgb(233,42,35)" fg:x="42160343871" fg:w="9444417"/><text x="99.2518%" y="399.50"></text></g><g><title>java.util.zip.Inflater$InflaterZStreamRef.clean (8,443,792 samples, 0.02%)</title><rect x="99.0042%" y="373" width="0.0198%" height="15" fill="rgb(231,13,6)" fg:x="42161344496" fg:w="8443792"/><text x="99.2542%" y="383.50"></text></g><g><title>jdk.internal.ref.PhantomCleanable.clean (7,449,417 samples, 0.02%)</title><rect x="99.0065%" y="357" width="0.0175%" height="15" fill="rgb(207,181,40)" fg:x="42162338871" fg:w="7449417"/><text x="99.2565%" y="367.50"></text></g><g><title>jdk.internal.ref.CleanerImpl$PhantomCleanableRef.performCleanup (6,459,665 samples, 0.02%)</title><rect x="99.0088%" y="341" width="0.0152%" height="15" fill="rgb(254,173,49)" fg:x="42163328623" fg:w="6459665"/><text x="99.2588%" y="351.50"></text></g><g><title>java.util.zip.Inflater$InflaterZStreamRef.run (5,531,540 samples, 0.01%)</title><rect x="99.0110%" y="325" width="0.0130%" height="15" fill="rgb(221,1,38)" fg:x="42164256748" fg:w="5531540"/><text x="99.2610%" y="335.50"></text></g><g><title>java.util.zip.Inflater.end (4,610,373 samples, 0.01%)</title><rect x="99.0132%" y="309" width="0.0108%" height="15" fill="rgb(206,124,46)" fg:x="42165177915" fg:w="4610373"/><text x="99.2632%" y="319.50"></text></g><g><title>java.util.zip.ZipFile.close (14,989,420 samples, 0.04%)</title><rect x="98.9888%" y="469" width="0.0352%" height="15" fill="rgb(249,21,11)" fg:x="42154799327" fg:w="14989420"/><text x="99.2388%" y="479.50"></text></g><g><title>java.util.zip.ZipFile$CleanableResource.clean (13,882,961 samples, 0.03%)</title><rect x="98.9914%" y="453" width="0.0326%" height="15" fill="rgb(222,201,40)" fg:x="42155905786" fg:w="13882961"/><text x="99.2414%" y="463.50"></text></g><g><title>jdk.internal.ref.PhantomCleanable.clean (12,780,086 samples, 0.03%)</title><rect x="98.9940%" y="437" width="0.0300%" height="15" fill="rgb(235,61,29)" fg:x="42157008661" fg:w="12780086"/><text x="99.2440%" y="447.50"></text></g><g><title>jdk.internal.ref.CleanerImpl$PhantomCleanableRef.performCleanup (11,664,461 samples, 0.03%)</title><rect x="98.9966%" y="421" width="0.0274%" height="15" fill="rgb(219,207,3)" fg:x="42158124286" fg:w="11664461"/><text x="99.2466%" y="431.50"></text></g><g><title>java.util.zip.ZipFile$CleanableResource.run (10,587,877 samples, 0.02%)</title><rect x="98.9991%" y="405" width="0.0249%" height="15" fill="rgb(222,56,46)" fg:x="42159200870" fg:w="10587877"/><text x="99.2491%" y="415.50"></text></g><g><title>java.util.zip.Inflater.inflate (4,826,330 samples, 0.01%)</title><rect x="99.2836%" y="373" width="0.0113%" height="15" fill="rgb(239,76,54)" fg:x="42280335209" fg:w="4826330"/><text x="99.5336%" y="383.50"></text></g><g><title>java.io.InputStream.readNBytes (9,766,248 samples, 0.02%)</title><rect x="99.2771%" y="405" width="0.0229%" height="15" fill="rgb(231,124,27)" fg:x="42277575791" fg:w="9766248"/><text x="99.5271%" y="415.50"></text></g><g><title>java.util.zip.InflaterInputStream.read (8,377,914 samples, 0.02%)</title><rect x="99.2804%" y="389" width="0.0197%" height="15" fill="rgb(249,195,6)" fg:x="42278964125" fg:w="8377914"/><text x="99.5304%" y="399.50"></text></g><g><title>java.util.zip.ZipFile$ZipFileInflaterInputStream.close (11,036,127 samples, 0.03%)</title><rect x="99.3000%" y="405" width="0.0259%" height="15" fill="rgb(237,174,47)" fg:x="42287342372" fg:w="11036127"/><text x="99.5500%" y="415.50"></text></g><g><title>jdk.internal.ref.PhantomCleanable.clean (9,646,170 samples, 0.02%)</title><rect x="99.3033%" y="389" width="0.0227%" height="15" fill="rgb(206,201,31)" fg:x="42288732329" fg:w="9646170"/><text x="99.5533%" y="399.50"></text></g><g><title>jdk.internal.ref.CleanerImpl$PhantomCleanableRef.performCleanup (8,520,378 samples, 0.02%)</title><rect x="99.3060%" y="373" width="0.0200%" height="15" fill="rgb(231,57,52)" fg:x="42289858121" fg:w="8520378"/><text x="99.5560%" y="383.50"></text></g><g><title>java.util.zip.ZipFile$InflaterCleanupAction.run (7,533,545 samples, 0.02%)</title><rect x="99.3083%" y="357" width="0.0177%" height="15" fill="rgb(248,177,22)" fg:x="42290844954" fg:w="7533545"/><text x="99.5583%" y="367.50"></text></g><g><title>java.util.zip.ZipFile$CleanableResource.releaseInflater (6,555,795 samples, 0.02%)</title><rect x="99.3106%" y="341" width="0.0154%" height="15" fill="rgb(215,211,37)" fg:x="42291822704" fg:w="6555795"/><text x="99.5606%" y="351.50"></text></g><g><title>java.util.zip.Inflater.reset (5,555,503 samples, 0.01%)</title><rect x="99.3129%" y="325" width="0.0130%" height="15" fill="rgb(241,128,51)" fg:x="42292822996" fg:w="5555503"/><text x="99.5629%" y="335.50"></text></g><g><title>java.util.zip.Inflater.reset (4,610,212 samples, 0.01%)</title><rect x="99.3151%" y="309" width="0.0108%" height="15" fill="rgb(227,165,31)" fg:x="42293768287" fg:w="4610212"/><text x="99.5651%" y="319.50"></text></g><g><title>java.util.zip.Inflater.initIDs (4,364,789 samples, 0.01%)</title><rect x="99.4184%" y="341" width="0.0102%" height="15" fill="rgb(228,167,24)" fg:x="42337737123" fg:w="4364789"/><text x="99.6684%" y="351.50"></text></g><g><title>java.io.File.&lt;init&gt; (5,814,005 samples, 0.01%)</title><rect x="99.5161%" y="261" width="0.0137%" height="15" fill="rgb(228,143,12)" fg:x="42379363911" fg:w="5814005"/><text x="99.7661%" y="271.50"></text></g><g><title>jdk.internal.loader.NativeLibraries$NativeLibraryImpl.open (5,220,166 samples, 0.01%)</title><rect x="99.5690%" y="229" width="0.0123%" height="15" fill="rgb(249,149,8)" fg:x="42401890628" fg:w="5220166"/><text x="99.8190%" y="239.50"></text></g><g><title>java.lang.String.hashCode (6,413,789 samples, 0.02%)</title><rect x="99.5895%" y="197" width="0.0151%" height="15" fill="rgb(243,35,44)" fg:x="42410627670" fg:w="6413789"/><text x="99.8395%" y="207.50"></text></g><g><title>java.lang.StringLatin1.hashCode (5,098,581 samples, 0.01%)</title><rect x="99.5926%" y="181" width="0.0120%" height="15" fill="rgb(246,89,9)" fg:x="42411942878" fg:w="5098581"/><text x="99.8426%" y="191.50"></text></g><g><title>java.util.concurrent.ConcurrentHashMap.compute (8,951,709 samples, 0.02%)</title><rect x="99.5856%" y="213" width="0.0210%" height="15" fill="rgb(233,213,13)" fg:x="42408925336" fg:w="8951709"/><text x="99.8356%" y="223.50"></text></g><g><title>jdk.internal.loader.NativeLibraries.acquireNativeLibraryLock (10,954,752 samples, 0.03%)</title><rect x="99.5813%" y="229" width="0.0257%" height="15" fill="rgb(233,141,41)" fg:x="42407110794" fg:w="10954752"/><text x="99.8313%" y="239.50"></text></g><g><title>java.util.zip.Inflater.&lt;clinit&gt; (90,136,842 samples, 0.21%)</title><rect x="99.3986%" y="357" width="0.2117%" height="15" fill="rgb(239,167,4)" fg:x="42329308457" fg:w="90136842"/><text x="99.6486%" y="367.50"></text></g><g><title>java.util.zip.ZipUtils.loadLibrary (77,343,387 samples, 0.18%)</title><rect x="99.4286%" y="341" width="0.1816%" height="15" fill="rgb(209,217,16)" fg:x="42342101912" fg:w="77343387"/><text x="99.6786%" y="351.50"></text></g><g><title>jdk.internal.loader.BootLoader.loadLibrary (69,868,845 samples, 0.16%)</title><rect x="99.4462%" y="325" width="0.1641%" height="15" fill="rgb(219,88,35)" fg:x="42349576454" fg:w="69868845"/><text x="99.6962%" y="335.50"></text></g><g><title>jdk.internal.loader.NativeLibraries.loadLibrary (62,402,054 samples, 0.15%)</title><rect x="99.4637%" y="309" width="0.1465%" height="15" fill="rgb(220,193,23)" fg:x="42357043245" fg:w="62402054"/><text x="99.7137%" y="319.50"></text></g><g><title>jdk.internal.loader.NativeLibraries.loadLibrary (54,951,846 samples, 0.13%)</title><rect x="99.4812%" y="293" width="0.1290%" height="15" fill="rgb(230,90,52)" fg:x="42364493453" fg:w="54951846"/><text x="99.7312%" y="303.50"></text></g><g><title>jdk.internal.loader.NativeLibraries.findFromPaths (47,512,096 samples, 0.11%)</title><rect x="99.4987%" y="277" width="0.1116%" height="15" fill="rgb(252,106,19)" fg:x="42371933203" fg:w="47512096"/><text x="99.7487%" y="287.50"></text></g><g><title>jdk.internal.loader.NativeLibraries.loadLibrary (34,265,883 samples, 0.08%)</title><rect x="99.5298%" y="261" width="0.0805%" height="15" fill="rgb(206,74,20)" fg:x="42385179416" fg:w="34265883"/><text x="99.7798%" y="271.50"></text></g><g><title>jdk.internal.loader.NativeLibraries.loadLibrary (26,793,675 samples, 0.06%)</title><rect x="99.5473%" y="245" width="0.0629%" height="15" fill="rgb(230,138,44)" fg:x="42392651624" fg:w="26793675"/><text x="99.7973%" y="255.50"></text></g><g><title>java.util.zip.ZipFile$CleanableResource.getInflater (106,071,668 samples, 0.25%)</title><rect x="99.3756%" y="373" width="0.2491%" height="15" fill="rgb(235,182,43)" fg:x="42319503124" fg:w="106071668"/><text x="99.6256%" y="383.50"></text></g><g><title>java.util.zip.Inflater.&lt;init&gt; (6,129,493 samples, 0.01%)</title><rect x="99.6103%" y="357" width="0.0144%" height="15" fill="rgb(242,16,51)" fg:x="42419445299" fg:w="6129493"/><text x="99.8603%" y="367.50"></text></g><g><title>java.util.zip.Inflater.init (4,346,119 samples, 0.01%)</title><rect x="99.6144%" y="341" width="0.0102%" height="15" fill="rgb(248,9,4)" fg:x="42421228673" fg:w="4346119"/><text x="99.8644%" y="351.50"></text></g><g><title>java.util.zip.ZipFile$ZipFileInflaterInputStream.&lt;init&gt; (116,823,044 samples, 0.27%)</title><rect x="99.3521%" y="389" width="0.2743%" height="15" fill="rgb(210,31,22)" fg:x="42309490916" fg:w="116823044"/><text x="99.6021%" y="399.50"></text></g><g><title>java.util.zip.ZipFile.getInputStream (131,045,916 samples, 0.31%)</title><rect x="99.3260%" y="405" width="0.3077%" height="15" fill="rgb(239,54,39)" fg:x="42298378499" fg:w="131045916"/><text x="99.5760%" y="415.50"></text></g><g><title>java.util.HashMap.hash (13,599,409 samples, 0.03%)</title><rect x="99.7004%" y="341" width="0.0319%" height="15" fill="rgb(230,99,41)" fg:x="42457841792" fg:w="13599409"/><text x="99.9504%" y="351.50"></text></g><g><title>sun.util.locale.BaseLocale.hashCode (9,043,119 samples, 0.02%)</title><rect x="99.7111%" y="325" width="0.0212%" height="15" fill="rgb(253,106,12)" fg:x="42462398082" fg:w="9043119"/><text x="99.9611%" y="335.50"></text></g><g><title>java.util.HashMap.put (20,078,027 samples, 0.05%)</title><rect x="99.6877%" y="357" width="0.0471%" height="15" fill="rgb(213,46,41)" fg:x="42452446918" fg:w="20078027"/><text x="99.9377%" y="367.50"></text></g><g><title>java.util.Locale.createConstant (26,161,978 samples, 0.06%)</title><rect x="99.6740%" y="373" width="0.0614%" height="15" fill="rgb(215,133,35)" fg:x="42446610004" fg:w="26161978"/><text x="99.9240%" y="383.50"></text></g><g><title>java.util.Locale.&lt;clinit&gt; (37,408,149 samples, 0.09%)</title><rect x="99.6572%" y="389" width="0.0878%" height="15" fill="rgb(213,28,5)" fg:x="42439442668" fg:w="37408149"/><text x="99.9072%" y="399.50"></text></g><g><title>java.util.jar.JarFile.getBytes (222,188,357 samples, 0.52%)</title><rect x="99.2260%" y="421" width="0.5217%" height="15" fill="rgb(215,77,49)" fg:x="42255811499" fg:w="222188357"/><text x="99.4760%" y="431.50"></text></g><g><title>sun.security.util.SignatureFileVerifier.&lt;clinit&gt; (48,575,441 samples, 0.11%)</title><rect x="99.6337%" y="405" width="0.1141%" height="15" fill="rgb(248,100,22)" fg:x="42429424415" fg:w="48575441"/><text x="99.8837%" y="415.50"></text></g><g><title>java.util.zip.ZipFile$Source.getEntryPos (6,637,834 samples, 0.02%)</title><rect x="99.7630%" y="389" width="0.0156%" height="15" fill="rgb(208,67,9)" fg:x="42484494482" fg:w="6637834"/><text x="100.0130%" y="399.50"></text></g><g><title>java.util.jar.JarFile.getManEntry (18,761,341 samples, 0.04%)</title><rect x="99.7478%" y="421" width="0.0441%" height="15" fill="rgb(219,133,21)" fg:x="42477999856" fg:w="18761341"/><text x="99.9978%" y="431.50"></text></g><g><title>java.util.zip.ZipFile.getEntry (14,706,715 samples, 0.03%)</title><rect x="99.7573%" y="405" width="0.0345%" height="15" fill="rgb(246,46,29)" fg:x="42482054482" fg:w="14706715"/><text x="100.0073%" y="415.50"></text></g><g><title>java.util.zip.ZipFile.getZipEntry (5,628,506 samples, 0.01%)</title><rect x="99.7786%" y="389" width="0.0132%" height="15" fill="rgb(246,185,52)" fg:x="42491132691" fg:w="5628506"/><text x="100.0286%" y="399.50"></text></g><g><title>java.util.jar.Attributes.putValue (8,720,461 samples, 0.02%)</title><rect x="99.8139%" y="373" width="0.0205%" height="15" fill="rgb(252,136,11)" fg:x="42506160319" fg:w="8720461"/><text x="100.0639%" y="383.50"></text></g><g><title>java.util.jar.Attributes.read (12,023,625 samples, 0.03%)</title><rect x="99.8067%" y="389" width="0.0282%" height="15" fill="rgb(219,138,53)" fg:x="42503101363" fg:w="12023625"/><text x="100.0567%" y="399.50"></text></g><g><title>java.util.jar.Manifest.&lt;init&gt; (18,016,292 samples, 0.04%)</title><rect x="99.7931%" y="421" width="0.0423%" height="15" fill="rgb(211,51,23)" fg:x="42497295279" fg:w="18016292"/><text x="100.0431%" y="431.50"></text></g><g><title>java.util.jar.Manifest.read (14,600,875 samples, 0.03%)</title><rect x="99.8011%" y="405" width="0.0343%" height="15" fill="rgb(247,221,28)" fg:x="42500710696" fg:w="14600875"/><text x="100.0511%" y="415.50"></text></g><g><title>java.util.jar.JarFile.getManifest (314,368,701 samples, 0.74%)</title><rect x="99.0972%" y="453" width="0.7382%" height="15" fill="rgb(251,222,45)" fg:x="42200962747" fg:w="314368701"/><text x="99.3472%" y="463.50"></text></g><g><title>java.util.jar.JarFile.getManifestFromReference (286,975,242 samples, 0.67%)</title><rect x="99.1615%" y="437" width="0.6739%" height="15" fill="rgb(217,162,53)" fg:x="42228356206" fg:w="286975242"/><text x="99.4115%" y="447.50"></text></g><g><title>sun.launcher.LauncherHelper.loadMainClass (2,298,384,492 samples, 5.40%)</title><rect x="94.4383%" y="485" width="5.3971%" height="15" fill="rgb(229,93,14)" fg:x="40216947498" fg:w="2298384492"/><text x="94.6883%" y="495.50">sun.lau..</text></g><g><title>sun.launcher.LauncherHelper.getMainClassFromJar (345,543,243 samples, 0.81%)</title><rect x="99.0240%" y="469" width="0.8114%" height="15" fill="rgb(209,67,49)" fg:x="42169788747" fg:w="345543243"/><text x="99.2740%" y="479.50"></text></g><g><title>java.lang.ClassLoader.getClassLoadingLock (8,206,883 samples, 0.02%)</title><rect x="99.9491%" y="325" width="0.0193%" height="15" fill="rgb(213,87,29)" fg:x="42563748324" fg:w="8206883"/><text x="100.1991%" y="335.50"></text></g><g><title>java.util.concurrent.ConcurrentHashMap.putIfAbsent (6,891,590 samples, 0.02%)</title><rect x="99.9522%" y="309" width="0.0162%" height="15" fill="rgb(205,151,52)" fg:x="42565063617" fg:w="6891590"/><text x="100.2022%" y="319.50"></text></g><g><title>java.util.concurrent.ConcurrentHashMap.putVal (5,626,840 samples, 0.01%)</title><rect x="99.9552%" y="293" width="0.0132%" height="15" fill="rgb(253,215,39)" fg:x="42566328367" fg:w="5626840"/><text x="100.2052%" y="303.50"></text></g><g><title>jdk.internal.loader.BuiltinClassLoader.findLoadedModule (4,814,467 samples, 0.01%)</title><rect x="99.9684%" y="325" width="0.0113%" height="15" fill="rgb(221,220,41)" fg:x="42571955916" fg:w="4814467"/><text x="100.2184%" y="335.50"></text></g><g><title>java.lang.Class.getDeclaredMethods0 (39,308,476 samples, 0.09%)</title><rect x="99.9047%" y="389" width="0.0923%" height="15" fill="rgb(218,133,21)" fg:x="42544820866" fg:w="39308476"/><text x="100.1547%" y="399.50"></text></g><g><title>java.lang.ClassLoader.loadClass (34,760,809 samples, 0.08%)</title><rect x="99.9153%" y="373" width="0.0816%" height="15" fill="rgb(221,193,43)" fg:x="42549368533" fg:w="34760809"/><text x="100.1653%" y="383.50"></text></g><g><title>jdk.internal.loader.BuiltinClassLoader.loadClass (30,292,558 samples, 0.07%)</title><rect x="99.9258%" y="357" width="0.0711%" height="15" fill="rgb(240,128,52)" fg:x="42553836784" fg:w="30292558"/><text x="100.1758%" y="367.50"></text></g><g><title>jdk.internal.loader.BuiltinClassLoader.loadClassOrNull (25,842,767 samples, 0.06%)</title><rect x="99.9363%" y="341" width="0.0607%" height="15" fill="rgb(253,114,12)" fg:x="42558286575" fg:w="25842767"/><text x="100.1863%" y="351.50"></text></g><g><title>jdk.internal.loader.BuiltinClassLoader.loadClassOrNull (7,358,959 samples, 0.02%)</title><rect x="99.9797%" y="325" width="0.0173%" height="15" fill="rgb(215,223,47)" fg:x="42576770383" fg:w="7358959"/><text x="100.2297%" y="335.50"></text></g><g><title>jdk.internal.loader.ClassLoaders$BootClassLoader.loadClassOrNull (5,913,126 samples, 0.01%)</title><rect x="99.9831%" y="309" width="0.0139%" height="15" fill="rgb(248,225,23)" fg:x="42578216216" fg:w="5913126"/><text x="100.2331%" y="319.50"></text></g><g><title>java.lang.System$1.findBootstrapClassOrNull (4,497,167 samples, 0.01%)</title><rect x="99.9864%" y="293" width="0.0106%" height="15" fill="rgb(250,108,0)" fg:x="42579632175" fg:w="4497167"/><text x="100.2364%" y="303.50"></text></g><g><title>java.lang.Class.privateGetDeclaredMethods (44,609,272 samples, 0.10%)</title><rect x="99.8935%" y="405" width="0.1048%" height="15" fill="rgb(228,208,7)" fg:x="42540065616" fg:w="44609272"/><text x="100.1435%" y="415.50"></text></g><g><title>java.lang.Class.getMethodsRecursive (49,671,982 samples, 0.12%)</title><rect x="99.8821%" y="421" width="0.1166%" height="15" fill="rgb(244,45,10)" fg:x="42535201616" fg:w="49671982"/><text x="100.1321%" y="431.50"></text></g><g><title>java.lang.System$1.findMethod (59,710,897 samples, 0.14%)</title><rect x="99.8589%" y="453" width="0.1402%" height="15" fill="rgb(207,125,25)" fg:x="42525328949" fg:w="59710897"/><text x="100.1089%" y="463.50"></text></g><g><title>java.lang.Class.findMethod (54,772,314 samples, 0.13%)</title><rect x="99.8705%" y="437" width="0.1286%" height="15" fill="rgb(210,195,18)" fg:x="42530267532" fg:w="54772314"/><text x="100.1205%" y="447.50"></text></g><g><title>jdk.internal.misc.MethodFinder.findMainMethod (64,704,438 samples, 0.15%)</title><rect x="99.8472%" y="469" width="0.1519%" height="15" fill="rgb(249,80,12)" fg:x="42520348324" fg:w="64704438"/><text x="100.0972%" y="479.50"></text></g><g><title>sun.launcher.LauncherHelper.checkAndLoadMain (2,507,211,680 samples, 5.89%)</title><rect x="94.1116%" y="501" width="5.8875%" height="15" fill="rgb(221,65,9)" fg:x="40077841374" fg:w="2507211680"/><text x="94.3616%" y="511.50">sun.lau..</text></g><g><title>sun.launcher.LauncherHelper.validateMainMethod (69,721,064 samples, 0.16%)</title><rect x="99.8354%" y="485" width="0.1637%" height="15" fill="rgb(235,49,36)" fg:x="42515331990" fg:w="69721064"/><text x="100.0854%" y="495.50"></text></g><g><title>all (42,585,420,509 samples, 100%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(225,32,20)" fg:x="0" fg:w="42585420509"/><text x="0.2500%" y="527.50"></text></g></svg></svg>