/* automatically generated by rust-bindgen 0.69.5 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const JNI_OK: u32 = 0;
pub const JNI_ERR: i32 = -1;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mbstate_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__mbstate8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__mbstate8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._mbstateL) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(_mbstateL)
        )
    );
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_pthread_handler_rec> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_pthread_handler_rec>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_pthread_handler_rec>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__routine) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__arg) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_attr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_attr_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_cond_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_condattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_condattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_condattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_mutex_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_mutexattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutexattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutexattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_once_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_once_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_once_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_rwlock_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlock_t>(),
        200usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_rwlockattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlockattr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_t>(),
        8192usize,
        concat!("Size of: ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cleanup_stack) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__cleanup_stack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__opaque)
        )
    );
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type va_list = __darwin_va_list;
extern "C" {
    pub fn renameat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renamex_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameatx_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sbuf() {
    const UNINIT: ::std::mem::MaybeUninit<__sbuf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sbuf>(),
        16usize,
        concat!("Size of: ", stringify!(__sbuf))
    );
    assert_eq!(
        ::std::mem::align_of::<__sbuf>(),
        8usize,
        concat!("Alignment of ", stringify!(__sbuf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILEX {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub _read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_char,
            __n: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _seek: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: fpos_t,
            arg3: ::std::os::raw::c_int,
        ) -> fpos_t,
    >,
    pub _write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_char,
            __n: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _ub: __sbuf,
    pub _extra: *mut __sFILEX,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
}
#[test]
fn bindgen_test_layout___sFILE() {
    const UNINIT: ::std::mem::MaybeUninit<__sFILE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sFILE>(),
        152usize,
        concat!("Size of: ", stringify!(__sFILE))
    );
    assert_eq!(
        ::std::mem::align_of::<__sFILE>(),
        8usize,
        concat!("Alignment of ", stringify!(__sFILE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._r) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_r)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._w) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._file) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._bf) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_bf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lbfsize) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lbfsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._cookie) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_cookie)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._close) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_close)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._read) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._seek) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_seek)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._write) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ub) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._extra) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_extra)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ur) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ur)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ubuf) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ubuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._nbuf) as usize - ptr as usize },
        119usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_nbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lb) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._blksize) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_blksize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._offset) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_offset)
        )
    );
}
pub type FILE = __sFILE;
extern "C" {
    pub fn clearerr(arg1: *mut FILE);
}
extern "C" {
    pub fn fclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn feof(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        arg1: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_int,
        arg2: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputs(arg1: *const ::std::os::raw::c_char, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn freopen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseek(
        arg1: *mut FILE,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(arg1: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn getc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gets(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn perror(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn putc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewind(arg1: *mut FILE);
}
extern "C" {
    pub fn scanf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ungetc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        arg1: *const ::std::os::raw::c_char,
        arg2: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fdopen(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fileno(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn __srget(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __svfscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __swbuf(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn getc_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __prefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type off_t = __darwin_off_t;
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __offset: off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> off_t;
}
extern "C" {
    pub fn snprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __str: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdelim(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> isize;
}
extern "C" {
    pub fn getline(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __stream: *mut FILE,
    ) -> isize;
}
extern "C" {
    pub fn fmemopen(
        __buf: *mut ::std::os::raw::c_void,
        __size: usize,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufp: *mut *mut ::std::os::raw::c_char,
        __sizep: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub fn asprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid_r(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fgetln(arg1: *mut FILE, __len: *mut usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fmtcheck(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn fpurge(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn setlinebuf(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funopen(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_char,
                __n: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_char,
                __n: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: fpos_t,
                arg3: ::std::os::raw::c_int,
            ) -> fpos_t,
        >,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
    ) -> *mut FILE;
}
extern "C" {
    pub fn __sprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: usize,
        arg4: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __snprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        __maxlen: usize,
        arg2: ::std::os::raw::c_int,
        arg3: usize,
        arg4: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __vsprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: usize,
        arg4: *const ::std::os::raw::c_char,
        arg5: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __vsnprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        __maxlen: usize,
        arg2: ::std::os::raw::c_int,
        arg3: usize,
        arg4: *const ::std::os::raw::c_char,
        arg5: va_list,
    ) -> ::std::os::raw::c_int;
}
pub type __gnuc_va_list = __builtin_va_list;
pub type jint = ::std::os::raw::c_int;
pub type jlong = ::std::os::raw::c_long;
pub type jbyte = ::std::os::raw::c_schar;
pub type jboolean = ::std::os::raw::c_uchar;
pub type jchar = ::std::os::raw::c_ushort;
pub type jshort = ::std::os::raw::c_short;
pub type jfloat = f32;
pub type jdouble = f64;
pub type jsize = jint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jobject {
    _unused: [u8; 0],
}
pub type jobject = *mut _jobject;
pub type jclass = jobject;
pub type jthrowable = jobject;
pub type jstring = jobject;
pub type jarray = jobject;
pub type jbooleanArray = jarray;
pub type jbyteArray = jarray;
pub type jcharArray = jarray;
pub type jshortArray = jarray;
pub type jintArray = jarray;
pub type jlongArray = jarray;
pub type jfloatArray = jarray;
pub type jdoubleArray = jarray;
pub type jobjectArray = jarray;
pub type jweak = jobject;
#[repr(C)]
#[derive(Copy, Clone)]
pub union jvalue {
    pub z: jboolean,
    pub b: jbyte,
    pub c: jchar,
    pub s: jshort,
    pub i: jint,
    pub j: jlong,
    pub f: jfloat,
    pub d: jdouble,
    pub l: jobject,
}
#[test]
fn bindgen_test_layout_jvalue() {
    const UNINIT: ::std::mem::MaybeUninit<jvalue> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<jvalue>(),
        8usize,
        concat!("Size of: ", stringify!(jvalue))
    );
    assert_eq!(
        ::std::mem::align_of::<jvalue>(),
        8usize,
        concat!("Alignment of ", stringify!(jvalue))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(jvalue), "::", stringify!(z))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(jvalue), "::", stringify!(b))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(jvalue), "::", stringify!(c))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(jvalue), "::", stringify!(s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).i) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(jvalue), "::", stringify!(i))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).j) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(jvalue), "::", stringify!(j))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(jvalue), "::", stringify!(f))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(jvalue), "::", stringify!(d))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(jvalue), "::", stringify!(l))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jfieldID {
    _unused: [u8; 0],
}
pub type jfieldID = *mut _jfieldID;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jmethodID {
    _unused: [u8; 0],
}
pub type jmethodID = *mut _jmethodID;
pub const _jobjectType_JNIInvalidRefType: _jobjectType = 0;
pub const _jobjectType_JNILocalRefType: _jobjectType = 1;
pub const _jobjectType_JNIGlobalRefType: _jobjectType = 2;
pub const _jobjectType_JNIWeakGlobalRefType: _jobjectType = 3;
pub type _jobjectType = ::std::os::raw::c_uint;
pub use self::_jobjectType as jobjectRefType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JNINativeMethod {
    pub name: *mut ::std::os::raw::c_char,
    pub signature: *mut ::std::os::raw::c_char,
    pub fnPtr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_JNINativeMethod() {
    const UNINIT: ::std::mem::MaybeUninit<JNINativeMethod> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JNINativeMethod>(),
        24usize,
        concat!("Size of: ", stringify!(JNINativeMethod))
    );
    assert_eq!(
        ::std::mem::align_of::<JNINativeMethod>(),
        8usize,
        concat!("Alignment of ", stringify!(JNINativeMethod))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeMethod),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).signature) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeMethod),
            "::",
            stringify!(signature)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fnPtr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeMethod),
            "::",
            stringify!(fnPtr)
        )
    );
}
pub type JNIEnv = *const JNINativeInterface_;
pub type JavaVM = *const JNIInvokeInterface_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JNINativeInterface_ {
    pub reserved0: *mut ::std::os::raw::c_void,
    pub reserved1: *mut ::std::os::raw::c_void,
    pub reserved2: *mut ::std::os::raw::c_void,
    pub reserved3: *mut ::std::os::raw::c_void,
    pub GetVersion: ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv) -> jint>,
    pub DefineClass: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            name: *const ::std::os::raw::c_char,
            loader: jobject,
            buf: *const jbyte,
            len: jsize,
        ) -> jclass,
    >,
    pub FindClass: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, name: *const ::std::os::raw::c_char) -> jclass,
    >,
    pub FromReflectedMethod:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, method: jobject) -> jmethodID>,
    pub FromReflectedField:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, field: jobject) -> jfieldID>,
    pub ToReflectedMethod: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            cls: jclass,
            methodID: jmethodID,
            isStatic: jboolean,
        ) -> jobject,
    >,
    pub GetSuperclass:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, sub: jclass) -> jclass>,
    pub IsAssignableFrom: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, sub: jclass, sup: jclass) -> jboolean,
    >,
    pub ToReflectedField: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            cls: jclass,
            fieldID: jfieldID,
            isStatic: jboolean,
        ) -> jobject,
    >,
    pub Throw:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jthrowable) -> jint>,
    pub ThrowNew: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            clazz: jclass,
            msg: *const ::std::os::raw::c_char,
        ) -> jint,
    >,
    pub ExceptionOccurred:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv) -> jthrowable>,
    pub ExceptionDescribe: ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv)>,
    pub ExceptionClear: ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv)>,
    pub FatalError: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, msg: *const ::std::os::raw::c_char),
    >,
    pub PushLocalFrame:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, capacity: jint) -> jint>,
    pub PopLocalFrame:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, result: jobject) -> jobject>,
    pub NewGlobalRef:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, lobj: jobject) -> jobject>,
    pub DeleteGlobalRef:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, gref: jobject)>,
    pub DeleteLocalRef: ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject)>,
    pub IsSameObject: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj1: jobject, obj2: jobject) -> jboolean,
    >,
    pub NewLocalRef:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, ref_: jobject) -> jobject>,
    pub EnsureLocalCapacity:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, capacity: jint) -> jint>,
    pub AllocObject:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass) -> jobject>,
    pub NewObject: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, methodID: jmethodID, ...) -> jobject,
    >,
    pub NewObjectV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            clazz: jclass,
            methodID: jmethodID,
            args: va_list,
        ) -> jobject,
    >,
    pub NewObjectA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            clazz: jclass,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jobject,
    >,
    pub GetObjectClass:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject) -> jclass>,
    pub IsInstanceOf: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, clazz: jclass) -> jboolean,
    >,
    pub GetMethodID: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            clazz: jclass,
            name: *const ::std::os::raw::c_char,
            sig: *const ::std::os::raw::c_char,
        ) -> jmethodID,
    >,
    pub CallObjectMethod: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, methodID: jmethodID, ...) -> jobject,
    >,
    pub CallObjectMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            methodID: jmethodID,
            args: va_list,
        ) -> jobject,
    >,
    pub CallObjectMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jobject,
    >,
    pub CallBooleanMethod: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, methodID: jmethodID, ...) -> jboolean,
    >,
    pub CallBooleanMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            methodID: jmethodID,
            args: va_list,
        ) -> jboolean,
    >,
    pub CallBooleanMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jboolean,
    >,
    pub CallByteMethod: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, methodID: jmethodID, ...) -> jbyte,
    >,
    pub CallByteMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            methodID: jmethodID,
            args: va_list,
        ) -> jbyte,
    >,
    pub CallByteMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jbyte,
    >,
    pub CallCharMethod: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, methodID: jmethodID, ...) -> jchar,
    >,
    pub CallCharMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            methodID: jmethodID,
            args: va_list,
        ) -> jchar,
    >,
    pub CallCharMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jchar,
    >,
    pub CallShortMethod: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, methodID: jmethodID, ...) -> jshort,
    >,
    pub CallShortMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            methodID: jmethodID,
            args: va_list,
        ) -> jshort,
    >,
    pub CallShortMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jshort,
    >,
    pub CallIntMethod: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, methodID: jmethodID, ...) -> jint,
    >,
    pub CallIntMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            methodID: jmethodID,
            args: va_list,
        ) -> jint,
    >,
    pub CallIntMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jint,
    >,
    pub CallLongMethod: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, methodID: jmethodID, ...) -> jlong,
    >,
    pub CallLongMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            methodID: jmethodID,
            args: va_list,
        ) -> jlong,
    >,
    pub CallLongMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jlong,
    >,
    pub CallFloatMethod: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, methodID: jmethodID, ...) -> jfloat,
    >,
    pub CallFloatMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            methodID: jmethodID,
            args: va_list,
        ) -> jfloat,
    >,
    pub CallFloatMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jfloat,
    >,
    pub CallDoubleMethod: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, methodID: jmethodID, ...) -> jdouble,
    >,
    pub CallDoubleMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            methodID: jmethodID,
            args: va_list,
        ) -> jdouble,
    >,
    pub CallDoubleMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jdouble,
    >,
    pub CallVoidMethod: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, methodID: jmethodID, ...),
    >,
    pub CallVoidMethodV: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, methodID: jmethodID, args: va_list),
    >,
    pub CallVoidMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            methodID: jmethodID,
            args: *const jvalue,
        ),
    >,
    pub CallNonvirtualObjectMethod: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            ...
        ) -> jobject,
    >,
    pub CallNonvirtualObjectMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            args: va_list,
        ) -> jobject,
    >,
    pub CallNonvirtualObjectMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jobject,
    >,
    pub CallNonvirtualBooleanMethod: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            ...
        ) -> jboolean,
    >,
    pub CallNonvirtualBooleanMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            args: va_list,
        ) -> jboolean,
    >,
    pub CallNonvirtualBooleanMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jboolean,
    >,
    pub CallNonvirtualByteMethod: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            ...
        ) -> jbyte,
    >,
    pub CallNonvirtualByteMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            args: va_list,
        ) -> jbyte,
    >,
    pub CallNonvirtualByteMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jbyte,
    >,
    pub CallNonvirtualCharMethod: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            ...
        ) -> jchar,
    >,
    pub CallNonvirtualCharMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            args: va_list,
        ) -> jchar,
    >,
    pub CallNonvirtualCharMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jchar,
    >,
    pub CallNonvirtualShortMethod: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            ...
        ) -> jshort,
    >,
    pub CallNonvirtualShortMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            args: va_list,
        ) -> jshort,
    >,
    pub CallNonvirtualShortMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jshort,
    >,
    pub CallNonvirtualIntMethod: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            ...
        ) -> jint,
    >,
    pub CallNonvirtualIntMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            args: va_list,
        ) -> jint,
    >,
    pub CallNonvirtualIntMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jint,
    >,
    pub CallNonvirtualLongMethod: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            ...
        ) -> jlong,
    >,
    pub CallNonvirtualLongMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            args: va_list,
        ) -> jlong,
    >,
    pub CallNonvirtualLongMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jlong,
    >,
    pub CallNonvirtualFloatMethod: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            ...
        ) -> jfloat,
    >,
    pub CallNonvirtualFloatMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            args: va_list,
        ) -> jfloat,
    >,
    pub CallNonvirtualFloatMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jfloat,
    >,
    pub CallNonvirtualDoubleMethod: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            ...
        ) -> jdouble,
    >,
    pub CallNonvirtualDoubleMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            args: va_list,
        ) -> jdouble,
    >,
    pub CallNonvirtualDoubleMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jdouble,
    >,
    pub CallNonvirtualVoidMethod: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            ...
        ),
    >,
    pub CallNonvirtualVoidMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            args: va_list,
        ),
    >,
    pub CallNonvirtualVoidMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            obj: jobject,
            clazz: jclass,
            methodID: jmethodID,
            args: *const jvalue,
        ),
    >,
    pub GetFieldID: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            clazz: jclass,
            name: *const ::std::os::raw::c_char,
            sig: *const ::std::os::raw::c_char,
        ) -> jfieldID,
    >,
    pub GetObjectField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID) -> jobject,
    >,
    pub GetBooleanField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID) -> jboolean,
    >,
    pub GetByteField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID) -> jbyte,
    >,
    pub GetCharField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID) -> jchar,
    >,
    pub GetShortField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID) -> jshort,
    >,
    pub GetIntField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID) -> jint,
    >,
    pub GetLongField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID) -> jlong,
    >,
    pub GetFloatField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID) -> jfloat,
    >,
    pub GetDoubleField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID) -> jdouble,
    >,
    pub SetObjectField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID, val: jobject),
    >,
    pub SetBooleanField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID, val: jboolean),
    >,
    pub SetByteField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID, val: jbyte),
    >,
    pub SetCharField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID, val: jchar),
    >,
    pub SetShortField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID, val: jshort),
    >,
    pub SetIntField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID, val: jint),
    >,
    pub SetLongField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID, val: jlong),
    >,
    pub SetFloatField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID, val: jfloat),
    >,
    pub SetDoubleField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject, fieldID: jfieldID, val: jdouble),
    >,
    pub GetStaticMethodID: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            clazz: jclass,
            name: *const ::std::os::raw::c_char,
            sig: *const ::std::os::raw::c_char,
        ) -> jmethodID,
    >,
    pub CallStaticObjectMethod: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, methodID: jmethodID, ...) -> jobject,
    >,
    pub CallStaticObjectMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            clazz: jclass,
            methodID: jmethodID,
            args: va_list,
        ) -> jobject,
    >,
    pub CallStaticObjectMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            clazz: jclass,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jobject,
    >,
    pub CallStaticBooleanMethod: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, methodID: jmethodID, ...) -> jboolean,
    >,
    pub CallStaticBooleanMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            clazz: jclass,
            methodID: jmethodID,
            args: va_list,
        ) -> jboolean,
    >,
    pub CallStaticBooleanMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            clazz: jclass,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jboolean,
    >,
    pub CallStaticByteMethod: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, methodID: jmethodID, ...) -> jbyte,
    >,
    pub CallStaticByteMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            clazz: jclass,
            methodID: jmethodID,
            args: va_list,
        ) -> jbyte,
    >,
    pub CallStaticByteMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            clazz: jclass,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jbyte,
    >,
    pub CallStaticCharMethod: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, methodID: jmethodID, ...) -> jchar,
    >,
    pub CallStaticCharMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            clazz: jclass,
            methodID: jmethodID,
            args: va_list,
        ) -> jchar,
    >,
    pub CallStaticCharMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            clazz: jclass,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jchar,
    >,
    pub CallStaticShortMethod: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, methodID: jmethodID, ...) -> jshort,
    >,
    pub CallStaticShortMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            clazz: jclass,
            methodID: jmethodID,
            args: va_list,
        ) -> jshort,
    >,
    pub CallStaticShortMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            clazz: jclass,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jshort,
    >,
    pub CallStaticIntMethod: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, methodID: jmethodID, ...) -> jint,
    >,
    pub CallStaticIntMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            clazz: jclass,
            methodID: jmethodID,
            args: va_list,
        ) -> jint,
    >,
    pub CallStaticIntMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            clazz: jclass,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jint,
    >,
    pub CallStaticLongMethod: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, methodID: jmethodID, ...) -> jlong,
    >,
    pub CallStaticLongMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            clazz: jclass,
            methodID: jmethodID,
            args: va_list,
        ) -> jlong,
    >,
    pub CallStaticLongMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            clazz: jclass,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jlong,
    >,
    pub CallStaticFloatMethod: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, methodID: jmethodID, ...) -> jfloat,
    >,
    pub CallStaticFloatMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            clazz: jclass,
            methodID: jmethodID,
            args: va_list,
        ) -> jfloat,
    >,
    pub CallStaticFloatMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            clazz: jclass,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jfloat,
    >,
    pub CallStaticDoubleMethod: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, methodID: jmethodID, ...) -> jdouble,
    >,
    pub CallStaticDoubleMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            clazz: jclass,
            methodID: jmethodID,
            args: va_list,
        ) -> jdouble,
    >,
    pub CallStaticDoubleMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            clazz: jclass,
            methodID: jmethodID,
            args: *const jvalue,
        ) -> jdouble,
    >,
    pub CallStaticVoidMethod: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, cls: jclass, methodID: jmethodID, ...),
    >,
    pub CallStaticVoidMethodV: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, cls: jclass, methodID: jmethodID, args: va_list),
    >,
    pub CallStaticVoidMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            cls: jclass,
            methodID: jmethodID,
            args: *const jvalue,
        ),
    >,
    pub GetStaticFieldID: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            clazz: jclass,
            name: *const ::std::os::raw::c_char,
            sig: *const ::std::os::raw::c_char,
        ) -> jfieldID,
    >,
    pub GetStaticObjectField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID) -> jobject,
    >,
    pub GetStaticBooleanField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID) -> jboolean,
    >,
    pub GetStaticByteField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID) -> jbyte,
    >,
    pub GetStaticCharField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID) -> jchar,
    >,
    pub GetStaticShortField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID) -> jshort,
    >,
    pub GetStaticIntField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID) -> jint,
    >,
    pub GetStaticLongField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID) -> jlong,
    >,
    pub GetStaticFloatField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID) -> jfloat,
    >,
    pub GetStaticDoubleField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID) -> jdouble,
    >,
    pub SetStaticObjectField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID, value: jobject),
    >,
    pub SetStaticBooleanField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID, value: jboolean),
    >,
    pub SetStaticByteField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID, value: jbyte),
    >,
    pub SetStaticCharField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID, value: jchar),
    >,
    pub SetStaticShortField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID, value: jshort),
    >,
    pub SetStaticIntField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID, value: jint),
    >,
    pub SetStaticLongField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID, value: jlong),
    >,
    pub SetStaticFloatField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID, value: jfloat),
    >,
    pub SetStaticDoubleField: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass, fieldID: jfieldID, value: jdouble),
    >,
    pub NewString: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, unicode: *const jchar, len: jsize) -> jstring,
    >,
    pub GetStringLength:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, str_: jstring) -> jsize>,
    pub GetStringChars: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            str_: jstring,
            isCopy: *mut jboolean,
        ) -> *const jchar,
    >,
    pub ReleaseStringChars: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, str_: jstring, chars: *const jchar),
    >,
    pub NewStringUTF: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, utf: *const ::std::os::raw::c_char) -> jstring,
    >,
    pub GetStringUTFLength:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, str_: jstring) -> jsize>,
    pub GetStringUTFChars: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            str_: jstring,
            isCopy: *mut jboolean,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub ReleaseStringUTFChars: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, str_: jstring, chars: *const ::std::os::raw::c_char),
    >,
    pub GetArrayLength:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, array: jarray) -> jsize>,
    pub NewObjectArray: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            len: jsize,
            clazz: jclass,
            init: jobject,
        ) -> jobjectArray,
    >,
    pub GetObjectArrayElement: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, array: jobjectArray, index: jsize) -> jobject,
    >,
    pub SetObjectArrayElement: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, array: jobjectArray, index: jsize, val: jobject),
    >,
    pub NewBooleanArray:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, len: jsize) -> jbooleanArray>,
    pub NewByteArray:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, len: jsize) -> jbyteArray>,
    pub NewCharArray:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, len: jsize) -> jcharArray>,
    pub NewShortArray:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, len: jsize) -> jshortArray>,
    pub NewIntArray:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, len: jsize) -> jintArray>,
    pub NewLongArray:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, len: jsize) -> jlongArray>,
    pub NewFloatArray:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, len: jsize) -> jfloatArray>,
    pub NewDoubleArray:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, len: jsize) -> jdoubleArray>,
    pub GetBooleanArrayElements: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jbooleanArray,
            isCopy: *mut jboolean,
        ) -> *mut jboolean,
    >,
    pub GetByteArrayElements: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jbyteArray,
            isCopy: *mut jboolean,
        ) -> *mut jbyte,
    >,
    pub GetCharArrayElements: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jcharArray,
            isCopy: *mut jboolean,
        ) -> *mut jchar,
    >,
    pub GetShortArrayElements: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jshortArray,
            isCopy: *mut jboolean,
        ) -> *mut jshort,
    >,
    pub GetIntArrayElements: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jintArray,
            isCopy: *mut jboolean,
        ) -> *mut jint,
    >,
    pub GetLongArrayElements: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jlongArray,
            isCopy: *mut jboolean,
        ) -> *mut jlong,
    >,
    pub GetFloatArrayElements: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jfloatArray,
            isCopy: *mut jboolean,
        ) -> *mut jfloat,
    >,
    pub GetDoubleArrayElements: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jdoubleArray,
            isCopy: *mut jboolean,
        ) -> *mut jdouble,
    >,
    pub ReleaseBooleanArrayElements: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jbooleanArray,
            elems: *mut jboolean,
            mode: jint,
        ),
    >,
    pub ReleaseByteArrayElements: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, array: jbyteArray, elems: *mut jbyte, mode: jint),
    >,
    pub ReleaseCharArrayElements: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, array: jcharArray, elems: *mut jchar, mode: jint),
    >,
    pub ReleaseShortArrayElements: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, array: jshortArray, elems: *mut jshort, mode: jint),
    >,
    pub ReleaseIntArrayElements: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, array: jintArray, elems: *mut jint, mode: jint),
    >,
    pub ReleaseLongArrayElements: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, array: jlongArray, elems: *mut jlong, mode: jint),
    >,
    pub ReleaseFloatArrayElements: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, array: jfloatArray, elems: *mut jfloat, mode: jint),
    >,
    pub ReleaseDoubleArrayElements: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jdoubleArray,
            elems: *mut jdouble,
            mode: jint,
        ),
    >,
    pub GetBooleanArrayRegion: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jbooleanArray,
            start: jsize,
            l: jsize,
            buf: *mut jboolean,
        ),
    >,
    pub GetByteArrayRegion: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jbyteArray,
            start: jsize,
            len: jsize,
            buf: *mut jbyte,
        ),
    >,
    pub GetCharArrayRegion: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jcharArray,
            start: jsize,
            len: jsize,
            buf: *mut jchar,
        ),
    >,
    pub GetShortArrayRegion: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jshortArray,
            start: jsize,
            len: jsize,
            buf: *mut jshort,
        ),
    >,
    pub GetIntArrayRegion: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jintArray,
            start: jsize,
            len: jsize,
            buf: *mut jint,
        ),
    >,
    pub GetLongArrayRegion: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jlongArray,
            start: jsize,
            len: jsize,
            buf: *mut jlong,
        ),
    >,
    pub GetFloatArrayRegion: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jfloatArray,
            start: jsize,
            len: jsize,
            buf: *mut jfloat,
        ),
    >,
    pub GetDoubleArrayRegion: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jdoubleArray,
            start: jsize,
            len: jsize,
            buf: *mut jdouble,
        ),
    >,
    pub SetBooleanArrayRegion: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jbooleanArray,
            start: jsize,
            l: jsize,
            buf: *const jboolean,
        ),
    >,
    pub SetByteArrayRegion: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jbyteArray,
            start: jsize,
            len: jsize,
            buf: *const jbyte,
        ),
    >,
    pub SetCharArrayRegion: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jcharArray,
            start: jsize,
            len: jsize,
            buf: *const jchar,
        ),
    >,
    pub SetShortArrayRegion: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jshortArray,
            start: jsize,
            len: jsize,
            buf: *const jshort,
        ),
    >,
    pub SetIntArrayRegion: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jintArray,
            start: jsize,
            len: jsize,
            buf: *const jint,
        ),
    >,
    pub SetLongArrayRegion: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jlongArray,
            start: jsize,
            len: jsize,
            buf: *const jlong,
        ),
    >,
    pub SetFloatArrayRegion: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jfloatArray,
            start: jsize,
            len: jsize,
            buf: *const jfloat,
        ),
    >,
    pub SetDoubleArrayRegion: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jdoubleArray,
            start: jsize,
            len: jsize,
            buf: *const jdouble,
        ),
    >,
    pub RegisterNatives: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            clazz: jclass,
            methods: *const JNINativeMethod,
            nMethods: jint,
        ) -> jint,
    >,
    pub UnregisterNatives:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass) -> jint>,
    pub MonitorEnter:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject) -> jint>,
    pub MonitorExit:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject) -> jint>,
    pub GetJavaVM:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, vm: *mut *mut JavaVM) -> jint>,
    pub GetStringRegion: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            str_: jstring,
            start: jsize,
            len: jsize,
            buf: *mut jchar,
        ),
    >,
    pub GetStringUTFRegion: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            str_: jstring,
            start: jsize,
            len: jsize,
            buf: *mut ::std::os::raw::c_char,
        ),
    >,
    pub GetPrimitiveArrayCritical: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jarray,
            isCopy: *mut jboolean,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub ReleasePrimitiveArrayCritical: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            array: jarray,
            carray: *mut ::std::os::raw::c_void,
            mode: jint,
        ),
    >,
    pub GetStringCritical: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            string: jstring,
            isCopy: *mut jboolean,
        ) -> *const jchar,
    >,
    pub ReleaseStringCritical: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, string: jstring, cstring: *const jchar),
    >,
    pub NewWeakGlobalRef:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject) -> jweak>,
    pub DeleteWeakGlobalRef:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, ref_: jweak)>,
    pub ExceptionCheck: ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv) -> jboolean>,
    pub NewDirectByteBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut JNIEnv,
            address: *mut ::std::os::raw::c_void,
            capacity: jlong,
        ) -> jobject,
    >,
    pub GetDirectBufferAddress: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, buf: jobject) -> *mut ::std::os::raw::c_void,
    >,
    pub GetDirectBufferCapacity:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, buf: jobject) -> jlong>,
    pub GetObjectRefType: ::std::option::Option<
        unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject) -> jobjectRefType,
    >,
    pub GetModule:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, clazz: jclass) -> jobject>,
    pub IsVirtualThread:
        ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv, obj: jobject) -> jboolean>,
}
#[test]
fn bindgen_test_layout_JNINativeInterface_() {
    const UNINIT: ::std::mem::MaybeUninit<JNINativeInterface_> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JNINativeInterface_>(),
        1880usize,
        concat!("Size of: ", stringify!(JNINativeInterface_))
    );
    assert_eq!(
        ::std::mem::align_of::<JNINativeInterface_>(),
        8usize,
        concat!("Alignment of ", stringify!(JNINativeInterface_))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(reserved0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(reserved2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved3) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(reserved3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetVersion) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DefineClass) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(DefineClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FindClass) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(FindClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FromReflectedMethod) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(FromReflectedMethod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FromReflectedField) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(FromReflectedField)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ToReflectedMethod) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(ToReflectedMethod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetSuperclass) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetSuperclass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsAssignableFrom) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(IsAssignableFrom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ToReflectedField) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(ToReflectedField)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Throw) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(Throw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ThrowNew) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(ThrowNew)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ExceptionOccurred) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(ExceptionOccurred)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ExceptionDescribe) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(ExceptionDescribe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ExceptionClear) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(ExceptionClear)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FatalError) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(FatalError)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PushLocalFrame) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(PushLocalFrame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PopLocalFrame) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(PopLocalFrame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NewGlobalRef) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(NewGlobalRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeleteGlobalRef) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(DeleteGlobalRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeleteLocalRef) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(DeleteLocalRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsSameObject) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(IsSameObject)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NewLocalRef) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(NewLocalRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EnsureLocalCapacity) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(EnsureLocalCapacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AllocObject) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(AllocObject)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NewObject) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(NewObject)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NewObjectV) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(NewObjectV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NewObjectA) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(NewObjectA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetObjectClass) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetObjectClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsInstanceOf) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(IsInstanceOf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetMethodID) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetMethodID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallObjectMethod) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallObjectMethod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallObjectMethodV) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallObjectMethodV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallObjectMethodA) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallObjectMethodA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallBooleanMethod) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallBooleanMethod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallBooleanMethodV) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallBooleanMethodV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallBooleanMethodA) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallBooleanMethodA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallByteMethod) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallByteMethod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallByteMethodV) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallByteMethodV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallByteMethodA) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallByteMethodA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallCharMethod) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallCharMethod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallCharMethodV) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallCharMethodV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallCharMethodA) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallCharMethodA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallShortMethod) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallShortMethod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallShortMethodV) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallShortMethodV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallShortMethodA) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallShortMethodA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallIntMethod) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallIntMethod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallIntMethodV) as usize - ptr as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallIntMethodV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallIntMethodA) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallIntMethodA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallLongMethod) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallLongMethod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallLongMethodV) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallLongMethodV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallLongMethodA) as usize - ptr as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallLongMethodA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallFloatMethod) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallFloatMethod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallFloatMethodV) as usize - ptr as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallFloatMethodV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallFloatMethodA) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallFloatMethodA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallDoubleMethod) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallDoubleMethod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallDoubleMethodV) as usize - ptr as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallDoubleMethodV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallDoubleMethodA) as usize - ptr as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallDoubleMethodA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallVoidMethod) as usize - ptr as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallVoidMethod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallVoidMethodV) as usize - ptr as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallVoidMethodV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallVoidMethodA) as usize - ptr as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallVoidMethodA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallNonvirtualObjectMethod) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallNonvirtualObjectMethod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallNonvirtualObjectMethodV) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallNonvirtualObjectMethodV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallNonvirtualObjectMethodA) as usize - ptr as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallNonvirtualObjectMethodA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallNonvirtualBooleanMethod) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallNonvirtualBooleanMethod)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).CallNonvirtualBooleanMethodV) as usize - ptr as usize
        },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallNonvirtualBooleanMethodV)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).CallNonvirtualBooleanMethodA) as usize - ptr as usize
        },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallNonvirtualBooleanMethodA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallNonvirtualByteMethod) as usize - ptr as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallNonvirtualByteMethod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallNonvirtualByteMethodV) as usize - ptr as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallNonvirtualByteMethodV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallNonvirtualByteMethodA) as usize - ptr as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallNonvirtualByteMethodA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallNonvirtualCharMethod) as usize - ptr as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallNonvirtualCharMethod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallNonvirtualCharMethodV) as usize - ptr as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallNonvirtualCharMethodV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallNonvirtualCharMethodA) as usize - ptr as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallNonvirtualCharMethodA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallNonvirtualShortMethod) as usize - ptr as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallNonvirtualShortMethod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallNonvirtualShortMethodV) as usize - ptr as usize },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallNonvirtualShortMethodV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallNonvirtualShortMethodA) as usize - ptr as usize },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallNonvirtualShortMethodA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallNonvirtualIntMethod) as usize - ptr as usize },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallNonvirtualIntMethod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallNonvirtualIntMethodV) as usize - ptr as usize },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallNonvirtualIntMethodV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallNonvirtualIntMethodA) as usize - ptr as usize },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallNonvirtualIntMethodA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallNonvirtualLongMethod) as usize - ptr as usize },
        656usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallNonvirtualLongMethod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallNonvirtualLongMethodV) as usize - ptr as usize },
        664usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallNonvirtualLongMethodV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallNonvirtualLongMethodA) as usize - ptr as usize },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallNonvirtualLongMethodA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallNonvirtualFloatMethod) as usize - ptr as usize },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallNonvirtualFloatMethod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallNonvirtualFloatMethodV) as usize - ptr as usize },
        688usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallNonvirtualFloatMethodV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallNonvirtualFloatMethodA) as usize - ptr as usize },
        696usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallNonvirtualFloatMethodA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallNonvirtualDoubleMethod) as usize - ptr as usize },
        704usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallNonvirtualDoubleMethod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallNonvirtualDoubleMethodV) as usize - ptr as usize },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallNonvirtualDoubleMethodV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallNonvirtualDoubleMethodA) as usize - ptr as usize },
        720usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallNonvirtualDoubleMethodA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallNonvirtualVoidMethod) as usize - ptr as usize },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallNonvirtualVoidMethod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallNonvirtualVoidMethodV) as usize - ptr as usize },
        736usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallNonvirtualVoidMethodV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallNonvirtualVoidMethodA) as usize - ptr as usize },
        744usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallNonvirtualVoidMethodA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetFieldID) as usize - ptr as usize },
        752usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetFieldID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetObjectField) as usize - ptr as usize },
        760usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetObjectField)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBooleanField) as usize - ptr as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetBooleanField)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetByteField) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetByteField)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetCharField) as usize - ptr as usize },
        784usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetCharField)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetShortField) as usize - ptr as usize },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetShortField)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetIntField) as usize - ptr as usize },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetIntField)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetLongField) as usize - ptr as usize },
        808usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetLongField)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetFloatField) as usize - ptr as usize },
        816usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetFloatField)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDoubleField) as usize - ptr as usize },
        824usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetDoubleField)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetObjectField) as usize - ptr as usize },
        832usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(SetObjectField)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetBooleanField) as usize - ptr as usize },
        840usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(SetBooleanField)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetByteField) as usize - ptr as usize },
        848usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(SetByteField)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetCharField) as usize - ptr as usize },
        856usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(SetCharField)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetShortField) as usize - ptr as usize },
        864usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(SetShortField)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetIntField) as usize - ptr as usize },
        872usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(SetIntField)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetLongField) as usize - ptr as usize },
        880usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(SetLongField)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetFloatField) as usize - ptr as usize },
        888usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(SetFloatField)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetDoubleField) as usize - ptr as usize },
        896usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(SetDoubleField)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetStaticMethodID) as usize - ptr as usize },
        904usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetStaticMethodID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallStaticObjectMethod) as usize - ptr as usize },
        912usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallStaticObjectMethod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallStaticObjectMethodV) as usize - ptr as usize },
        920usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallStaticObjectMethodV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallStaticObjectMethodA) as usize - ptr as usize },
        928usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallStaticObjectMethodA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallStaticBooleanMethod) as usize - ptr as usize },
        936usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallStaticBooleanMethod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallStaticBooleanMethodV) as usize - ptr as usize },
        944usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallStaticBooleanMethodV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallStaticBooleanMethodA) as usize - ptr as usize },
        952usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallStaticBooleanMethodA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallStaticByteMethod) as usize - ptr as usize },
        960usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallStaticByteMethod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallStaticByteMethodV) as usize - ptr as usize },
        968usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallStaticByteMethodV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallStaticByteMethodA) as usize - ptr as usize },
        976usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallStaticByteMethodA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallStaticCharMethod) as usize - ptr as usize },
        984usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallStaticCharMethod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallStaticCharMethodV) as usize - ptr as usize },
        992usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallStaticCharMethodV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallStaticCharMethodA) as usize - ptr as usize },
        1000usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallStaticCharMethodA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallStaticShortMethod) as usize - ptr as usize },
        1008usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallStaticShortMethod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallStaticShortMethodV) as usize - ptr as usize },
        1016usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallStaticShortMethodV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallStaticShortMethodA) as usize - ptr as usize },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallStaticShortMethodA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallStaticIntMethod) as usize - ptr as usize },
        1032usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallStaticIntMethod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallStaticIntMethodV) as usize - ptr as usize },
        1040usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallStaticIntMethodV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallStaticIntMethodA) as usize - ptr as usize },
        1048usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallStaticIntMethodA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallStaticLongMethod) as usize - ptr as usize },
        1056usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallStaticLongMethod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallStaticLongMethodV) as usize - ptr as usize },
        1064usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallStaticLongMethodV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallStaticLongMethodA) as usize - ptr as usize },
        1072usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallStaticLongMethodA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallStaticFloatMethod) as usize - ptr as usize },
        1080usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallStaticFloatMethod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallStaticFloatMethodV) as usize - ptr as usize },
        1088usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallStaticFloatMethodV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallStaticFloatMethodA) as usize - ptr as usize },
        1096usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallStaticFloatMethodA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallStaticDoubleMethod) as usize - ptr as usize },
        1104usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallStaticDoubleMethod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallStaticDoubleMethodV) as usize - ptr as usize },
        1112usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallStaticDoubleMethodV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallStaticDoubleMethodA) as usize - ptr as usize },
        1120usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallStaticDoubleMethodA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallStaticVoidMethod) as usize - ptr as usize },
        1128usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallStaticVoidMethod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallStaticVoidMethodV) as usize - ptr as usize },
        1136usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallStaticVoidMethodV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallStaticVoidMethodA) as usize - ptr as usize },
        1144usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(CallStaticVoidMethodA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetStaticFieldID) as usize - ptr as usize },
        1152usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetStaticFieldID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetStaticObjectField) as usize - ptr as usize },
        1160usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetStaticObjectField)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetStaticBooleanField) as usize - ptr as usize },
        1168usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetStaticBooleanField)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetStaticByteField) as usize - ptr as usize },
        1176usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetStaticByteField)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetStaticCharField) as usize - ptr as usize },
        1184usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetStaticCharField)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetStaticShortField) as usize - ptr as usize },
        1192usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetStaticShortField)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetStaticIntField) as usize - ptr as usize },
        1200usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetStaticIntField)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetStaticLongField) as usize - ptr as usize },
        1208usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetStaticLongField)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetStaticFloatField) as usize - ptr as usize },
        1216usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetStaticFloatField)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetStaticDoubleField) as usize - ptr as usize },
        1224usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetStaticDoubleField)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetStaticObjectField) as usize - ptr as usize },
        1232usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(SetStaticObjectField)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetStaticBooleanField) as usize - ptr as usize },
        1240usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(SetStaticBooleanField)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetStaticByteField) as usize - ptr as usize },
        1248usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(SetStaticByteField)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetStaticCharField) as usize - ptr as usize },
        1256usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(SetStaticCharField)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetStaticShortField) as usize - ptr as usize },
        1264usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(SetStaticShortField)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetStaticIntField) as usize - ptr as usize },
        1272usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(SetStaticIntField)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetStaticLongField) as usize - ptr as usize },
        1280usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(SetStaticLongField)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetStaticFloatField) as usize - ptr as usize },
        1288usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(SetStaticFloatField)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetStaticDoubleField) as usize - ptr as usize },
        1296usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(SetStaticDoubleField)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NewString) as usize - ptr as usize },
        1304usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(NewString)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetStringLength) as usize - ptr as usize },
        1312usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetStringLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetStringChars) as usize - ptr as usize },
        1320usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetStringChars)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReleaseStringChars) as usize - ptr as usize },
        1328usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(ReleaseStringChars)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NewStringUTF) as usize - ptr as usize },
        1336usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(NewStringUTF)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetStringUTFLength) as usize - ptr as usize },
        1344usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetStringUTFLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetStringUTFChars) as usize - ptr as usize },
        1352usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetStringUTFChars)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReleaseStringUTFChars) as usize - ptr as usize },
        1360usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(ReleaseStringUTFChars)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetArrayLength) as usize - ptr as usize },
        1368usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetArrayLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NewObjectArray) as usize - ptr as usize },
        1376usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(NewObjectArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetObjectArrayElement) as usize - ptr as usize },
        1384usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetObjectArrayElement)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetObjectArrayElement) as usize - ptr as usize },
        1392usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(SetObjectArrayElement)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NewBooleanArray) as usize - ptr as usize },
        1400usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(NewBooleanArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NewByteArray) as usize - ptr as usize },
        1408usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(NewByteArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NewCharArray) as usize - ptr as usize },
        1416usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(NewCharArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NewShortArray) as usize - ptr as usize },
        1424usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(NewShortArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NewIntArray) as usize - ptr as usize },
        1432usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(NewIntArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NewLongArray) as usize - ptr as usize },
        1440usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(NewLongArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NewFloatArray) as usize - ptr as usize },
        1448usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(NewFloatArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NewDoubleArray) as usize - ptr as usize },
        1456usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(NewDoubleArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBooleanArrayElements) as usize - ptr as usize },
        1464usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetBooleanArrayElements)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetByteArrayElements) as usize - ptr as usize },
        1472usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetByteArrayElements)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetCharArrayElements) as usize - ptr as usize },
        1480usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetCharArrayElements)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetShortArrayElements) as usize - ptr as usize },
        1488usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetShortArrayElements)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetIntArrayElements) as usize - ptr as usize },
        1496usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetIntArrayElements)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetLongArrayElements) as usize - ptr as usize },
        1504usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetLongArrayElements)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetFloatArrayElements) as usize - ptr as usize },
        1512usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetFloatArrayElements)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDoubleArrayElements) as usize - ptr as usize },
        1520usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetDoubleArrayElements)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReleaseBooleanArrayElements) as usize - ptr as usize },
        1528usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(ReleaseBooleanArrayElements)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReleaseByteArrayElements) as usize - ptr as usize },
        1536usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(ReleaseByteArrayElements)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReleaseCharArrayElements) as usize - ptr as usize },
        1544usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(ReleaseCharArrayElements)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReleaseShortArrayElements) as usize - ptr as usize },
        1552usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(ReleaseShortArrayElements)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReleaseIntArrayElements) as usize - ptr as usize },
        1560usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(ReleaseIntArrayElements)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReleaseLongArrayElements) as usize - ptr as usize },
        1568usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(ReleaseLongArrayElements)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReleaseFloatArrayElements) as usize - ptr as usize },
        1576usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(ReleaseFloatArrayElements)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReleaseDoubleArrayElements) as usize - ptr as usize },
        1584usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(ReleaseDoubleArrayElements)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBooleanArrayRegion) as usize - ptr as usize },
        1592usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetBooleanArrayRegion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetByteArrayRegion) as usize - ptr as usize },
        1600usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetByteArrayRegion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetCharArrayRegion) as usize - ptr as usize },
        1608usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetCharArrayRegion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetShortArrayRegion) as usize - ptr as usize },
        1616usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetShortArrayRegion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetIntArrayRegion) as usize - ptr as usize },
        1624usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetIntArrayRegion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetLongArrayRegion) as usize - ptr as usize },
        1632usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetLongArrayRegion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetFloatArrayRegion) as usize - ptr as usize },
        1640usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetFloatArrayRegion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDoubleArrayRegion) as usize - ptr as usize },
        1648usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetDoubleArrayRegion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetBooleanArrayRegion) as usize - ptr as usize },
        1656usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(SetBooleanArrayRegion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetByteArrayRegion) as usize - ptr as usize },
        1664usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(SetByteArrayRegion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetCharArrayRegion) as usize - ptr as usize },
        1672usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(SetCharArrayRegion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetShortArrayRegion) as usize - ptr as usize },
        1680usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(SetShortArrayRegion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetIntArrayRegion) as usize - ptr as usize },
        1688usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(SetIntArrayRegion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetLongArrayRegion) as usize - ptr as usize },
        1696usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(SetLongArrayRegion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetFloatArrayRegion) as usize - ptr as usize },
        1704usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(SetFloatArrayRegion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetDoubleArrayRegion) as usize - ptr as usize },
        1712usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(SetDoubleArrayRegion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RegisterNatives) as usize - ptr as usize },
        1720usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(RegisterNatives)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UnregisterNatives) as usize - ptr as usize },
        1728usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(UnregisterNatives)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MonitorEnter) as usize - ptr as usize },
        1736usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(MonitorEnter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MonitorExit) as usize - ptr as usize },
        1744usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(MonitorExit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetJavaVM) as usize - ptr as usize },
        1752usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetJavaVM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetStringRegion) as usize - ptr as usize },
        1760usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetStringRegion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetStringUTFRegion) as usize - ptr as usize },
        1768usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetStringUTFRegion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetPrimitiveArrayCritical) as usize - ptr as usize },
        1776usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetPrimitiveArrayCritical)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ReleasePrimitiveArrayCritical) as usize - ptr as usize
        },
        1784usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(ReleasePrimitiveArrayCritical)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetStringCritical) as usize - ptr as usize },
        1792usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetStringCritical)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReleaseStringCritical) as usize - ptr as usize },
        1800usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(ReleaseStringCritical)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NewWeakGlobalRef) as usize - ptr as usize },
        1808usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(NewWeakGlobalRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeleteWeakGlobalRef) as usize - ptr as usize },
        1816usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(DeleteWeakGlobalRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ExceptionCheck) as usize - ptr as usize },
        1824usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(ExceptionCheck)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NewDirectByteBuffer) as usize - ptr as usize },
        1832usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(NewDirectByteBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDirectBufferAddress) as usize - ptr as usize },
        1840usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetDirectBufferAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetDirectBufferCapacity) as usize - ptr as usize },
        1848usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetDirectBufferCapacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetObjectRefType) as usize - ptr as usize },
        1856usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetObjectRefType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetModule) as usize - ptr as usize },
        1864usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(GetModule)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsVirtualThread) as usize - ptr as usize },
        1872usize,
        concat!(
            "Offset of field: ",
            stringify!(JNINativeInterface_),
            "::",
            stringify!(IsVirtualThread)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JNIEnv_ {
    pub functions: *const JNINativeInterface_,
}
#[test]
fn bindgen_test_layout_JNIEnv_() {
    const UNINIT: ::std::mem::MaybeUninit<JNIEnv_> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JNIEnv_>(),
        8usize,
        concat!("Size of: ", stringify!(JNIEnv_))
    );
    assert_eq!(
        ::std::mem::align_of::<JNIEnv_>(),
        8usize,
        concat!("Alignment of ", stringify!(JNIEnv_))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).functions) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JNIEnv_),
            "::",
            stringify!(functions)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JavaVMOption {
    pub optionString: *mut ::std::os::raw::c_char,
    pub extraInfo: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_JavaVMOption() {
    const UNINIT: ::std::mem::MaybeUninit<JavaVMOption> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JavaVMOption>(),
        16usize,
        concat!("Size of: ", stringify!(JavaVMOption))
    );
    assert_eq!(
        ::std::mem::align_of::<JavaVMOption>(),
        8usize,
        concat!("Alignment of ", stringify!(JavaVMOption))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).optionString) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JavaVMOption),
            "::",
            stringify!(optionString)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extraInfo) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JavaVMOption),
            "::",
            stringify!(extraInfo)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JavaVMInitArgs {
    pub version: jint,
    pub nOptions: jint,
    pub options: *mut JavaVMOption,
    pub ignoreUnrecognized: jboolean,
}
#[test]
fn bindgen_test_layout_JavaVMInitArgs() {
    const UNINIT: ::std::mem::MaybeUninit<JavaVMInitArgs> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JavaVMInitArgs>(),
        24usize,
        concat!("Size of: ", stringify!(JavaVMInitArgs))
    );
    assert_eq!(
        ::std::mem::align_of::<JavaVMInitArgs>(),
        8usize,
        concat!("Alignment of ", stringify!(JavaVMInitArgs))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JavaVMInitArgs),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nOptions) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JavaVMInitArgs),
            "::",
            stringify!(nOptions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).options) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JavaVMInitArgs),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ignoreUnrecognized) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(JavaVMInitArgs),
            "::",
            stringify!(ignoreUnrecognized)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JavaVMAttachArgs {
    pub version: jint,
    pub name: *mut ::std::os::raw::c_char,
    pub group: jobject,
}
#[test]
fn bindgen_test_layout_JavaVMAttachArgs() {
    const UNINIT: ::std::mem::MaybeUninit<JavaVMAttachArgs> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JavaVMAttachArgs>(),
        24usize,
        concat!("Size of: ", stringify!(JavaVMAttachArgs))
    );
    assert_eq!(
        ::std::mem::align_of::<JavaVMAttachArgs>(),
        8usize,
        concat!("Alignment of ", stringify!(JavaVMAttachArgs))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JavaVMAttachArgs),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JavaVMAttachArgs),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).group) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(JavaVMAttachArgs),
            "::",
            stringify!(group)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JNIInvokeInterface_ {
    pub reserved0: *mut ::std::os::raw::c_void,
    pub reserved1: *mut ::std::os::raw::c_void,
    pub reserved2: *mut ::std::os::raw::c_void,
    pub DestroyJavaVM: ::std::option::Option<unsafe extern "C" fn(vm: *mut JavaVM) -> jint>,
    pub AttachCurrentThread: ::std::option::Option<
        unsafe extern "C" fn(
            vm: *mut JavaVM,
            penv: *mut *mut ::std::os::raw::c_void,
            args: *mut ::std::os::raw::c_void,
        ) -> jint,
    >,
    pub DetachCurrentThread: ::std::option::Option<unsafe extern "C" fn(vm: *mut JavaVM) -> jint>,
    pub GetEnv: ::std::option::Option<
        unsafe extern "C" fn(
            vm: *mut JavaVM,
            penv: *mut *mut ::std::os::raw::c_void,
            version: jint,
        ) -> jint,
    >,
    pub AttachCurrentThreadAsDaemon: ::std::option::Option<
        unsafe extern "C" fn(
            vm: *mut JavaVM,
            penv: *mut *mut ::std::os::raw::c_void,
            args: *mut ::std::os::raw::c_void,
        ) -> jint,
    >,
}
#[test]
fn bindgen_test_layout_JNIInvokeInterface_() {
    const UNINIT: ::std::mem::MaybeUninit<JNIInvokeInterface_> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JNIInvokeInterface_>(),
        64usize,
        concat!("Size of: ", stringify!(JNIInvokeInterface_))
    );
    assert_eq!(
        ::std::mem::align_of::<JNIInvokeInterface_>(),
        8usize,
        concat!("Alignment of ", stringify!(JNIInvokeInterface_))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JNIInvokeInterface_),
            "::",
            stringify!(reserved0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JNIInvokeInterface_),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(JNIInvokeInterface_),
            "::",
            stringify!(reserved2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DestroyJavaVM) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(JNIInvokeInterface_),
            "::",
            stringify!(DestroyJavaVM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AttachCurrentThread) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(JNIInvokeInterface_),
            "::",
            stringify!(AttachCurrentThread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DetachCurrentThread) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(JNIInvokeInterface_),
            "::",
            stringify!(DetachCurrentThread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetEnv) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(JNIInvokeInterface_),
            "::",
            stringify!(GetEnv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AttachCurrentThreadAsDaemon) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(JNIInvokeInterface_),
            "::",
            stringify!(AttachCurrentThreadAsDaemon)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JavaVM_ {
    pub functions: *const JNIInvokeInterface_,
}
#[test]
fn bindgen_test_layout_JavaVM_() {
    const UNINIT: ::std::mem::MaybeUninit<JavaVM_> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JavaVM_>(),
        8usize,
        concat!("Size of: ", stringify!(JavaVM_))
    );
    assert_eq!(
        ::std::mem::align_of::<JavaVM_>(),
        8usize,
        concat!("Alignment of ", stringify!(JavaVM_))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).functions) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JavaVM_),
            "::",
            stringify!(functions)
        )
    );
}
extern "C" {
    pub fn JNI_GetDefaultJavaVMInitArgs(args: *mut ::std::os::raw::c_void) -> jint;
}
extern "C" {
    pub fn JNI_CreateJavaVM(
        pvm: *mut *mut JavaVM,
        penv: *mut *mut ::std::os::raw::c_void,
        args: *mut ::std::os::raw::c_void,
    ) -> jint;
}
extern "C" {
    pub fn JNI_GetCreatedJavaVMs(arg1: *mut *mut JavaVM, arg2: jsize, arg3: *mut jsize) -> jint;
}
extern "C" {
    pub fn JNI_OnLoad(vm: *mut JavaVM, reserved: *mut ::std::os::raw::c_void) -> jint;
}
extern "C" {
    pub fn JNI_OnUnload(vm: *mut JavaVM, reserved: *mut ::std::os::raw::c_void);
}
pub const JVMTI_VERSION_1: _bindgen_ty_1 = 805371904;
pub const JVMTI_VERSION_1_0: _bindgen_ty_1 = 805371904;
pub const JVMTI_VERSION_1_1: _bindgen_ty_1 = 805372160;
pub const JVMTI_VERSION_1_2: _bindgen_ty_1 = 805372416;
pub const JVMTI_VERSION_9: _bindgen_ty_1 = 805896192;
pub const JVMTI_VERSION_11: _bindgen_ty_1 = 806027264;
pub const JVMTI_VERSION_19: _bindgen_ty_1 = 806551552;
pub const JVMTI_VERSION_21: _bindgen_ty_1 = 806682624;
pub const JVMTI_VERSION: _bindgen_ty_1 = 806682624;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
extern "C" {
    pub fn Agent_OnLoad(
        vm: *mut JavaVM,
        options: *mut ::std::os::raw::c_char,
        reserved: *mut ::std::os::raw::c_void,
    ) -> jint;
}
extern "C" {
    pub fn Agent_OnAttach(
        vm: *mut JavaVM,
        options: *mut ::std::os::raw::c_char,
        reserved: *mut ::std::os::raw::c_void,
    ) -> jint;
}
extern "C" {
    pub fn Agent_OnUnload(vm: *mut JavaVM);
}
pub type jvmtiEnv = *const jvmtiInterface_1_;
pub type jthread = jobject;
pub type jthreadGroup = jobject;
pub type jlocation = jlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jrawMonitorID {
    _unused: [u8; 0],
}
pub type jrawMonitorID = *mut _jrawMonitorID;
pub type jniNativeInterface = JNINativeInterface_;
pub const JVMTI_THREAD_STATE_ALIVE: _bindgen_ty_2 = 1;
pub const JVMTI_THREAD_STATE_TERMINATED: _bindgen_ty_2 = 2;
pub const JVMTI_THREAD_STATE_RUNNABLE: _bindgen_ty_2 = 4;
pub const JVMTI_THREAD_STATE_BLOCKED_ON_MONITOR_ENTER: _bindgen_ty_2 = 1024;
pub const JVMTI_THREAD_STATE_WAITING: _bindgen_ty_2 = 128;
pub const JVMTI_THREAD_STATE_WAITING_INDEFINITELY: _bindgen_ty_2 = 16;
pub const JVMTI_THREAD_STATE_WAITING_WITH_TIMEOUT: _bindgen_ty_2 = 32;
pub const JVMTI_THREAD_STATE_SLEEPING: _bindgen_ty_2 = 64;
pub const JVMTI_THREAD_STATE_IN_OBJECT_WAIT: _bindgen_ty_2 = 256;
pub const JVMTI_THREAD_STATE_PARKED: _bindgen_ty_2 = 512;
pub const JVMTI_THREAD_STATE_SUSPENDED: _bindgen_ty_2 = 1048576;
pub const JVMTI_THREAD_STATE_INTERRUPTED: _bindgen_ty_2 = 2097152;
pub const JVMTI_THREAD_STATE_IN_NATIVE: _bindgen_ty_2 = 4194304;
pub const JVMTI_THREAD_STATE_VENDOR_1: _bindgen_ty_2 = 268435456;
pub const JVMTI_THREAD_STATE_VENDOR_2: _bindgen_ty_2 = 536870912;
pub const JVMTI_THREAD_STATE_VENDOR_3: _bindgen_ty_2 = 1073741824;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub const JVMTI_JAVA_LANG_THREAD_STATE_MASK: _bindgen_ty_3 = 1207;
pub const JVMTI_JAVA_LANG_THREAD_STATE_NEW: _bindgen_ty_3 = 0;
pub const JVMTI_JAVA_LANG_THREAD_STATE_TERMINATED: _bindgen_ty_3 = 2;
pub const JVMTI_JAVA_LANG_THREAD_STATE_RUNNABLE: _bindgen_ty_3 = 5;
pub const JVMTI_JAVA_LANG_THREAD_STATE_BLOCKED: _bindgen_ty_3 = 1025;
pub const JVMTI_JAVA_LANG_THREAD_STATE_WAITING: _bindgen_ty_3 = 145;
pub const JVMTI_JAVA_LANG_THREAD_STATE_TIMED_WAITING: _bindgen_ty_3 = 161;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
pub const JVMTI_THREAD_MIN_PRIORITY: _bindgen_ty_4 = 1;
pub const JVMTI_THREAD_NORM_PRIORITY: _bindgen_ty_4 = 5;
pub const JVMTI_THREAD_MAX_PRIORITY: _bindgen_ty_4 = 10;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
pub const JVMTI_HEAP_FILTER_TAGGED: _bindgen_ty_5 = 4;
pub const JVMTI_HEAP_FILTER_UNTAGGED: _bindgen_ty_5 = 8;
pub const JVMTI_HEAP_FILTER_CLASS_TAGGED: _bindgen_ty_5 = 16;
pub const JVMTI_HEAP_FILTER_CLASS_UNTAGGED: _bindgen_ty_5 = 32;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
pub const JVMTI_VISIT_OBJECTS: _bindgen_ty_6 = 256;
pub const JVMTI_VISIT_ABORT: _bindgen_ty_6 = 32768;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
pub const jvmtiHeapReferenceKind_JVMTI_HEAP_REFERENCE_CLASS: jvmtiHeapReferenceKind = 1;
pub const jvmtiHeapReferenceKind_JVMTI_HEAP_REFERENCE_FIELD: jvmtiHeapReferenceKind = 2;
pub const jvmtiHeapReferenceKind_JVMTI_HEAP_REFERENCE_ARRAY_ELEMENT: jvmtiHeapReferenceKind = 3;
pub const jvmtiHeapReferenceKind_JVMTI_HEAP_REFERENCE_CLASS_LOADER: jvmtiHeapReferenceKind = 4;
pub const jvmtiHeapReferenceKind_JVMTI_HEAP_REFERENCE_SIGNERS: jvmtiHeapReferenceKind = 5;
pub const jvmtiHeapReferenceKind_JVMTI_HEAP_REFERENCE_PROTECTION_DOMAIN: jvmtiHeapReferenceKind = 6;
pub const jvmtiHeapReferenceKind_JVMTI_HEAP_REFERENCE_INTERFACE: jvmtiHeapReferenceKind = 7;
pub const jvmtiHeapReferenceKind_JVMTI_HEAP_REFERENCE_STATIC_FIELD: jvmtiHeapReferenceKind = 8;
pub const jvmtiHeapReferenceKind_JVMTI_HEAP_REFERENCE_CONSTANT_POOL: jvmtiHeapReferenceKind = 9;
pub const jvmtiHeapReferenceKind_JVMTI_HEAP_REFERENCE_SUPERCLASS: jvmtiHeapReferenceKind = 10;
pub const jvmtiHeapReferenceKind_JVMTI_HEAP_REFERENCE_JNI_GLOBAL: jvmtiHeapReferenceKind = 21;
pub const jvmtiHeapReferenceKind_JVMTI_HEAP_REFERENCE_SYSTEM_CLASS: jvmtiHeapReferenceKind = 22;
pub const jvmtiHeapReferenceKind_JVMTI_HEAP_REFERENCE_MONITOR: jvmtiHeapReferenceKind = 23;
pub const jvmtiHeapReferenceKind_JVMTI_HEAP_REFERENCE_STACK_LOCAL: jvmtiHeapReferenceKind = 24;
pub const jvmtiHeapReferenceKind_JVMTI_HEAP_REFERENCE_JNI_LOCAL: jvmtiHeapReferenceKind = 25;
pub const jvmtiHeapReferenceKind_JVMTI_HEAP_REFERENCE_THREAD: jvmtiHeapReferenceKind = 26;
pub const jvmtiHeapReferenceKind_JVMTI_HEAP_REFERENCE_OTHER: jvmtiHeapReferenceKind = 27;
pub type jvmtiHeapReferenceKind = ::std::os::raw::c_uint;
pub const jvmtiPrimitiveType_JVMTI_PRIMITIVE_TYPE_BOOLEAN: jvmtiPrimitiveType = 90;
pub const jvmtiPrimitiveType_JVMTI_PRIMITIVE_TYPE_BYTE: jvmtiPrimitiveType = 66;
pub const jvmtiPrimitiveType_JVMTI_PRIMITIVE_TYPE_CHAR: jvmtiPrimitiveType = 67;
pub const jvmtiPrimitiveType_JVMTI_PRIMITIVE_TYPE_SHORT: jvmtiPrimitiveType = 83;
pub const jvmtiPrimitiveType_JVMTI_PRIMITIVE_TYPE_INT: jvmtiPrimitiveType = 73;
pub const jvmtiPrimitiveType_JVMTI_PRIMITIVE_TYPE_LONG: jvmtiPrimitiveType = 74;
pub const jvmtiPrimitiveType_JVMTI_PRIMITIVE_TYPE_FLOAT: jvmtiPrimitiveType = 70;
pub const jvmtiPrimitiveType_JVMTI_PRIMITIVE_TYPE_DOUBLE: jvmtiPrimitiveType = 68;
pub type jvmtiPrimitiveType = ::std::os::raw::c_uint;
pub const jvmtiHeapObjectFilter_JVMTI_HEAP_OBJECT_TAGGED: jvmtiHeapObjectFilter = 1;
pub const jvmtiHeapObjectFilter_JVMTI_HEAP_OBJECT_UNTAGGED: jvmtiHeapObjectFilter = 2;
pub const jvmtiHeapObjectFilter_JVMTI_HEAP_OBJECT_EITHER: jvmtiHeapObjectFilter = 3;
pub type jvmtiHeapObjectFilter = ::std::os::raw::c_uint;
pub const jvmtiHeapRootKind_JVMTI_HEAP_ROOT_JNI_GLOBAL: jvmtiHeapRootKind = 1;
pub const jvmtiHeapRootKind_JVMTI_HEAP_ROOT_SYSTEM_CLASS: jvmtiHeapRootKind = 2;
pub const jvmtiHeapRootKind_JVMTI_HEAP_ROOT_MONITOR: jvmtiHeapRootKind = 3;
pub const jvmtiHeapRootKind_JVMTI_HEAP_ROOT_STACK_LOCAL: jvmtiHeapRootKind = 4;
pub const jvmtiHeapRootKind_JVMTI_HEAP_ROOT_JNI_LOCAL: jvmtiHeapRootKind = 5;
pub const jvmtiHeapRootKind_JVMTI_HEAP_ROOT_THREAD: jvmtiHeapRootKind = 6;
pub const jvmtiHeapRootKind_JVMTI_HEAP_ROOT_OTHER: jvmtiHeapRootKind = 7;
pub type jvmtiHeapRootKind = ::std::os::raw::c_uint;
pub const jvmtiObjectReferenceKind_JVMTI_REFERENCE_CLASS: jvmtiObjectReferenceKind = 1;
pub const jvmtiObjectReferenceKind_JVMTI_REFERENCE_FIELD: jvmtiObjectReferenceKind = 2;
pub const jvmtiObjectReferenceKind_JVMTI_REFERENCE_ARRAY_ELEMENT: jvmtiObjectReferenceKind = 3;
pub const jvmtiObjectReferenceKind_JVMTI_REFERENCE_CLASS_LOADER: jvmtiObjectReferenceKind = 4;
pub const jvmtiObjectReferenceKind_JVMTI_REFERENCE_SIGNERS: jvmtiObjectReferenceKind = 5;
pub const jvmtiObjectReferenceKind_JVMTI_REFERENCE_PROTECTION_DOMAIN: jvmtiObjectReferenceKind = 6;
pub const jvmtiObjectReferenceKind_JVMTI_REFERENCE_INTERFACE: jvmtiObjectReferenceKind = 7;
pub const jvmtiObjectReferenceKind_JVMTI_REFERENCE_STATIC_FIELD: jvmtiObjectReferenceKind = 8;
pub const jvmtiObjectReferenceKind_JVMTI_REFERENCE_CONSTANT_POOL: jvmtiObjectReferenceKind = 9;
pub type jvmtiObjectReferenceKind = ::std::os::raw::c_uint;
pub const jvmtiIterationControl_JVMTI_ITERATION_CONTINUE: jvmtiIterationControl = 1;
pub const jvmtiIterationControl_JVMTI_ITERATION_IGNORE: jvmtiIterationControl = 2;
pub const jvmtiIterationControl_JVMTI_ITERATION_ABORT: jvmtiIterationControl = 0;
pub type jvmtiIterationControl = ::std::os::raw::c_uint;
pub const JVMTI_CLASS_STATUS_VERIFIED: _bindgen_ty_7 = 1;
pub const JVMTI_CLASS_STATUS_PREPARED: _bindgen_ty_7 = 2;
pub const JVMTI_CLASS_STATUS_INITIALIZED: _bindgen_ty_7 = 4;
pub const JVMTI_CLASS_STATUS_ERROR: _bindgen_ty_7 = 8;
pub const JVMTI_CLASS_STATUS_ARRAY: _bindgen_ty_7 = 16;
pub const JVMTI_CLASS_STATUS_PRIMITIVE: _bindgen_ty_7 = 32;
pub type _bindgen_ty_7 = ::std::os::raw::c_uint;
pub const jvmtiEventMode_JVMTI_ENABLE: jvmtiEventMode = 1;
pub const jvmtiEventMode_JVMTI_DISABLE: jvmtiEventMode = 0;
pub type jvmtiEventMode = ::std::os::raw::c_uint;
pub const jvmtiParamTypes_JVMTI_TYPE_JBYTE: jvmtiParamTypes = 101;
pub const jvmtiParamTypes_JVMTI_TYPE_JCHAR: jvmtiParamTypes = 102;
pub const jvmtiParamTypes_JVMTI_TYPE_JSHORT: jvmtiParamTypes = 103;
pub const jvmtiParamTypes_JVMTI_TYPE_JINT: jvmtiParamTypes = 104;
pub const jvmtiParamTypes_JVMTI_TYPE_JLONG: jvmtiParamTypes = 105;
pub const jvmtiParamTypes_JVMTI_TYPE_JFLOAT: jvmtiParamTypes = 106;
pub const jvmtiParamTypes_JVMTI_TYPE_JDOUBLE: jvmtiParamTypes = 107;
pub const jvmtiParamTypes_JVMTI_TYPE_JBOOLEAN: jvmtiParamTypes = 108;
pub const jvmtiParamTypes_JVMTI_TYPE_JOBJECT: jvmtiParamTypes = 109;
pub const jvmtiParamTypes_JVMTI_TYPE_JTHREAD: jvmtiParamTypes = 110;
pub const jvmtiParamTypes_JVMTI_TYPE_JCLASS: jvmtiParamTypes = 111;
pub const jvmtiParamTypes_JVMTI_TYPE_JVALUE: jvmtiParamTypes = 112;
pub const jvmtiParamTypes_JVMTI_TYPE_JFIELDID: jvmtiParamTypes = 113;
pub const jvmtiParamTypes_JVMTI_TYPE_JMETHODID: jvmtiParamTypes = 114;
pub const jvmtiParamTypes_JVMTI_TYPE_CCHAR: jvmtiParamTypes = 115;
pub const jvmtiParamTypes_JVMTI_TYPE_CVOID: jvmtiParamTypes = 116;
pub const jvmtiParamTypes_JVMTI_TYPE_JNIENV: jvmtiParamTypes = 117;
pub type jvmtiParamTypes = ::std::os::raw::c_uint;
pub const jvmtiParamKind_JVMTI_KIND_IN: jvmtiParamKind = 91;
pub const jvmtiParamKind_JVMTI_KIND_IN_PTR: jvmtiParamKind = 92;
pub const jvmtiParamKind_JVMTI_KIND_IN_BUF: jvmtiParamKind = 93;
pub const jvmtiParamKind_JVMTI_KIND_ALLOC_BUF: jvmtiParamKind = 94;
pub const jvmtiParamKind_JVMTI_KIND_ALLOC_ALLOC_BUF: jvmtiParamKind = 95;
pub const jvmtiParamKind_JVMTI_KIND_OUT: jvmtiParamKind = 96;
pub const jvmtiParamKind_JVMTI_KIND_OUT_BUF: jvmtiParamKind = 97;
pub type jvmtiParamKind = ::std::os::raw::c_uint;
pub const jvmtiTimerKind_JVMTI_TIMER_USER_CPU: jvmtiTimerKind = 30;
pub const jvmtiTimerKind_JVMTI_TIMER_TOTAL_CPU: jvmtiTimerKind = 31;
pub const jvmtiTimerKind_JVMTI_TIMER_ELAPSED: jvmtiTimerKind = 32;
pub type jvmtiTimerKind = ::std::os::raw::c_uint;
pub const jvmtiPhase_JVMTI_PHASE_ONLOAD: jvmtiPhase = 1;
pub const jvmtiPhase_JVMTI_PHASE_PRIMORDIAL: jvmtiPhase = 2;
pub const jvmtiPhase_JVMTI_PHASE_START: jvmtiPhase = 6;
pub const jvmtiPhase_JVMTI_PHASE_LIVE: jvmtiPhase = 4;
pub const jvmtiPhase_JVMTI_PHASE_DEAD: jvmtiPhase = 8;
pub type jvmtiPhase = ::std::os::raw::c_uint;
pub const JVMTI_VERSION_INTERFACE_JNI: _bindgen_ty_8 = 0;
pub const JVMTI_VERSION_INTERFACE_JVMTI: _bindgen_ty_8 = 805306368;
pub type _bindgen_ty_8 = ::std::os::raw::c_uint;
pub const JVMTI_VERSION_MASK_INTERFACE_TYPE: _bindgen_ty_9 = 1879048192;
pub const JVMTI_VERSION_MASK_MAJOR: _bindgen_ty_9 = 268369920;
pub const JVMTI_VERSION_MASK_MINOR: _bindgen_ty_9 = 65280;
pub const JVMTI_VERSION_MASK_MICRO: _bindgen_ty_9 = 255;
pub type _bindgen_ty_9 = ::std::os::raw::c_uint;
pub const JVMTI_VERSION_SHIFT_MAJOR: _bindgen_ty_10 = 16;
pub const JVMTI_VERSION_SHIFT_MINOR: _bindgen_ty_10 = 8;
pub const JVMTI_VERSION_SHIFT_MICRO: _bindgen_ty_10 = 0;
pub type _bindgen_ty_10 = ::std::os::raw::c_uint;
pub const jvmtiVerboseFlag_JVMTI_VERBOSE_OTHER: jvmtiVerboseFlag = 0;
pub const jvmtiVerboseFlag_JVMTI_VERBOSE_GC: jvmtiVerboseFlag = 1;
pub const jvmtiVerboseFlag_JVMTI_VERBOSE_CLASS: jvmtiVerboseFlag = 2;
pub const jvmtiVerboseFlag_JVMTI_VERBOSE_JNI: jvmtiVerboseFlag = 4;
pub type jvmtiVerboseFlag = ::std::os::raw::c_uint;
pub const jvmtiJlocationFormat_JVMTI_JLOCATION_JVMBCI: jvmtiJlocationFormat = 1;
pub const jvmtiJlocationFormat_JVMTI_JLOCATION_MACHINEPC: jvmtiJlocationFormat = 2;
pub const jvmtiJlocationFormat_JVMTI_JLOCATION_OTHER: jvmtiJlocationFormat = 0;
pub type jvmtiJlocationFormat = ::std::os::raw::c_uint;
pub const JVMTI_RESOURCE_EXHAUSTED_OOM_ERROR: _bindgen_ty_11 = 1;
pub const JVMTI_RESOURCE_EXHAUSTED_JAVA_HEAP: _bindgen_ty_11 = 2;
pub const JVMTI_RESOURCE_EXHAUSTED_THREADS: _bindgen_ty_11 = 4;
pub type _bindgen_ty_11 = ::std::os::raw::c_uint;
pub const jvmtiError_JVMTI_ERROR_NONE: jvmtiError = 0;
pub const jvmtiError_JVMTI_ERROR_INVALID_THREAD: jvmtiError = 10;
pub const jvmtiError_JVMTI_ERROR_INVALID_THREAD_GROUP: jvmtiError = 11;
pub const jvmtiError_JVMTI_ERROR_INVALID_PRIORITY: jvmtiError = 12;
pub const jvmtiError_JVMTI_ERROR_THREAD_NOT_SUSPENDED: jvmtiError = 13;
pub const jvmtiError_JVMTI_ERROR_THREAD_SUSPENDED: jvmtiError = 14;
pub const jvmtiError_JVMTI_ERROR_THREAD_NOT_ALIVE: jvmtiError = 15;
pub const jvmtiError_JVMTI_ERROR_INVALID_OBJECT: jvmtiError = 20;
pub const jvmtiError_JVMTI_ERROR_INVALID_CLASS: jvmtiError = 21;
pub const jvmtiError_JVMTI_ERROR_CLASS_NOT_PREPARED: jvmtiError = 22;
pub const jvmtiError_JVMTI_ERROR_INVALID_METHODID: jvmtiError = 23;
pub const jvmtiError_JVMTI_ERROR_INVALID_LOCATION: jvmtiError = 24;
pub const jvmtiError_JVMTI_ERROR_INVALID_FIELDID: jvmtiError = 25;
pub const jvmtiError_JVMTI_ERROR_INVALID_MODULE: jvmtiError = 26;
pub const jvmtiError_JVMTI_ERROR_NO_MORE_FRAMES: jvmtiError = 31;
pub const jvmtiError_JVMTI_ERROR_OPAQUE_FRAME: jvmtiError = 32;
pub const jvmtiError_JVMTI_ERROR_TYPE_MISMATCH: jvmtiError = 34;
pub const jvmtiError_JVMTI_ERROR_INVALID_SLOT: jvmtiError = 35;
pub const jvmtiError_JVMTI_ERROR_DUPLICATE: jvmtiError = 40;
pub const jvmtiError_JVMTI_ERROR_NOT_FOUND: jvmtiError = 41;
pub const jvmtiError_JVMTI_ERROR_INVALID_MONITOR: jvmtiError = 50;
pub const jvmtiError_JVMTI_ERROR_NOT_MONITOR_OWNER: jvmtiError = 51;
pub const jvmtiError_JVMTI_ERROR_INTERRUPT: jvmtiError = 52;
pub const jvmtiError_JVMTI_ERROR_INVALID_CLASS_FORMAT: jvmtiError = 60;
pub const jvmtiError_JVMTI_ERROR_CIRCULAR_CLASS_DEFINITION: jvmtiError = 61;
pub const jvmtiError_JVMTI_ERROR_FAILS_VERIFICATION: jvmtiError = 62;
pub const jvmtiError_JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_ADDED: jvmtiError = 63;
pub const jvmtiError_JVMTI_ERROR_UNSUPPORTED_REDEFINITION_SCHEMA_CHANGED: jvmtiError = 64;
pub const jvmtiError_JVMTI_ERROR_INVALID_TYPESTATE: jvmtiError = 65;
pub const jvmtiError_JVMTI_ERROR_UNSUPPORTED_REDEFINITION_HIERARCHY_CHANGED: jvmtiError = 66;
pub const jvmtiError_JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_DELETED: jvmtiError = 67;
pub const jvmtiError_JVMTI_ERROR_UNSUPPORTED_VERSION: jvmtiError = 68;
pub const jvmtiError_JVMTI_ERROR_NAMES_DONT_MATCH: jvmtiError = 69;
pub const jvmtiError_JVMTI_ERROR_UNSUPPORTED_REDEFINITION_CLASS_MODIFIERS_CHANGED: jvmtiError = 70;
pub const jvmtiError_JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_MODIFIERS_CHANGED: jvmtiError = 71;
pub const jvmtiError_JVMTI_ERROR_UNSUPPORTED_REDEFINITION_CLASS_ATTRIBUTE_CHANGED: jvmtiError = 72;
pub const jvmtiError_JVMTI_ERROR_UNSUPPORTED_OPERATION: jvmtiError = 73;
pub const jvmtiError_JVMTI_ERROR_UNMODIFIABLE_CLASS: jvmtiError = 79;
pub const jvmtiError_JVMTI_ERROR_UNMODIFIABLE_MODULE: jvmtiError = 80;
pub const jvmtiError_JVMTI_ERROR_NOT_AVAILABLE: jvmtiError = 98;
pub const jvmtiError_JVMTI_ERROR_MUST_POSSESS_CAPABILITY: jvmtiError = 99;
pub const jvmtiError_JVMTI_ERROR_NULL_POINTER: jvmtiError = 100;
pub const jvmtiError_JVMTI_ERROR_ABSENT_INFORMATION: jvmtiError = 101;
pub const jvmtiError_JVMTI_ERROR_INVALID_EVENT_TYPE: jvmtiError = 102;
pub const jvmtiError_JVMTI_ERROR_ILLEGAL_ARGUMENT: jvmtiError = 103;
pub const jvmtiError_JVMTI_ERROR_NATIVE_METHOD: jvmtiError = 104;
pub const jvmtiError_JVMTI_ERROR_CLASS_LOADER_UNSUPPORTED: jvmtiError = 106;
pub const jvmtiError_JVMTI_ERROR_OUT_OF_MEMORY: jvmtiError = 110;
pub const jvmtiError_JVMTI_ERROR_ACCESS_DENIED: jvmtiError = 111;
pub const jvmtiError_JVMTI_ERROR_WRONG_PHASE: jvmtiError = 112;
pub const jvmtiError_JVMTI_ERROR_INTERNAL: jvmtiError = 113;
pub const jvmtiError_JVMTI_ERROR_UNATTACHED_THREAD: jvmtiError = 115;
pub const jvmtiError_JVMTI_ERROR_INVALID_ENVIRONMENT: jvmtiError = 116;
pub const jvmtiError_JVMTI_ERROR_MAX: jvmtiError = 116;
pub type jvmtiError = ::std::os::raw::c_uint;
pub const jvmtiEvent_JVMTI_MIN_EVENT_TYPE_VAL: jvmtiEvent = 50;
pub const jvmtiEvent_JVMTI_EVENT_VM_INIT: jvmtiEvent = 50;
pub const jvmtiEvent_JVMTI_EVENT_VM_DEATH: jvmtiEvent = 51;
pub const jvmtiEvent_JVMTI_EVENT_THREAD_START: jvmtiEvent = 52;
pub const jvmtiEvent_JVMTI_EVENT_THREAD_END: jvmtiEvent = 53;
pub const jvmtiEvent_JVMTI_EVENT_CLASS_FILE_LOAD_HOOK: jvmtiEvent = 54;
pub const jvmtiEvent_JVMTI_EVENT_CLASS_LOAD: jvmtiEvent = 55;
pub const jvmtiEvent_JVMTI_EVENT_CLASS_PREPARE: jvmtiEvent = 56;
pub const jvmtiEvent_JVMTI_EVENT_VM_START: jvmtiEvent = 57;
pub const jvmtiEvent_JVMTI_EVENT_EXCEPTION: jvmtiEvent = 58;
pub const jvmtiEvent_JVMTI_EVENT_EXCEPTION_CATCH: jvmtiEvent = 59;
pub const jvmtiEvent_JVMTI_EVENT_SINGLE_STEP: jvmtiEvent = 60;
pub const jvmtiEvent_JVMTI_EVENT_FRAME_POP: jvmtiEvent = 61;
pub const jvmtiEvent_JVMTI_EVENT_BREAKPOINT: jvmtiEvent = 62;
pub const jvmtiEvent_JVMTI_EVENT_FIELD_ACCESS: jvmtiEvent = 63;
pub const jvmtiEvent_JVMTI_EVENT_FIELD_MODIFICATION: jvmtiEvent = 64;
pub const jvmtiEvent_JVMTI_EVENT_METHOD_ENTRY: jvmtiEvent = 65;
pub const jvmtiEvent_JVMTI_EVENT_METHOD_EXIT: jvmtiEvent = 66;
pub const jvmtiEvent_JVMTI_EVENT_NATIVE_METHOD_BIND: jvmtiEvent = 67;
pub const jvmtiEvent_JVMTI_EVENT_COMPILED_METHOD_LOAD: jvmtiEvent = 68;
pub const jvmtiEvent_JVMTI_EVENT_COMPILED_METHOD_UNLOAD: jvmtiEvent = 69;
pub const jvmtiEvent_JVMTI_EVENT_DYNAMIC_CODE_GENERATED: jvmtiEvent = 70;
pub const jvmtiEvent_JVMTI_EVENT_DATA_DUMP_REQUEST: jvmtiEvent = 71;
pub const jvmtiEvent_JVMTI_EVENT_MONITOR_WAIT: jvmtiEvent = 73;
pub const jvmtiEvent_JVMTI_EVENT_MONITOR_WAITED: jvmtiEvent = 74;
pub const jvmtiEvent_JVMTI_EVENT_MONITOR_CONTENDED_ENTER: jvmtiEvent = 75;
pub const jvmtiEvent_JVMTI_EVENT_MONITOR_CONTENDED_ENTERED: jvmtiEvent = 76;
pub const jvmtiEvent_JVMTI_EVENT_RESOURCE_EXHAUSTED: jvmtiEvent = 80;
pub const jvmtiEvent_JVMTI_EVENT_GARBAGE_COLLECTION_START: jvmtiEvent = 81;
pub const jvmtiEvent_JVMTI_EVENT_GARBAGE_COLLECTION_FINISH: jvmtiEvent = 82;
pub const jvmtiEvent_JVMTI_EVENT_OBJECT_FREE: jvmtiEvent = 83;
pub const jvmtiEvent_JVMTI_EVENT_VM_OBJECT_ALLOC: jvmtiEvent = 84;
pub const jvmtiEvent_JVMTI_EVENT_SAMPLED_OBJECT_ALLOC: jvmtiEvent = 86;
pub const jvmtiEvent_JVMTI_EVENT_VIRTUAL_THREAD_START: jvmtiEvent = 87;
pub const jvmtiEvent_JVMTI_EVENT_VIRTUAL_THREAD_END: jvmtiEvent = 88;
pub const jvmtiEvent_JVMTI_MAX_EVENT_TYPE_VAL: jvmtiEvent = 88;
pub type jvmtiEvent = ::std::os::raw::c_uint;
pub type jvmtiStartFunction = ::std::option::Option<
    unsafe extern "C" fn(
        jvmti_env: *mut jvmtiEnv,
        jni_env: *mut JNIEnv,
        arg: *mut ::std::os::raw::c_void,
    ),
>;
pub type jvmtiHeapIterationCallback = ::std::option::Option<
    unsafe extern "C" fn(
        class_tag: jlong,
        size: jlong,
        tag_ptr: *mut jlong,
        length: jint,
        user_data: *mut ::std::os::raw::c_void,
    ) -> jint,
>;
pub type jvmtiHeapReferenceCallback = ::std::option::Option<
    unsafe extern "C" fn(
        reference_kind: jvmtiHeapReferenceKind,
        reference_info: *const jvmtiHeapReferenceInfo,
        class_tag: jlong,
        referrer_class_tag: jlong,
        size: jlong,
        tag_ptr: *mut jlong,
        referrer_tag_ptr: *mut jlong,
        length: jint,
        user_data: *mut ::std::os::raw::c_void,
    ) -> jint,
>;
pub type jvmtiPrimitiveFieldCallback = ::std::option::Option<
    unsafe extern "C" fn(
        kind: jvmtiHeapReferenceKind,
        info: *const jvmtiHeapReferenceInfo,
        object_class_tag: jlong,
        object_tag_ptr: *mut jlong,
        value: jvalue,
        value_type: jvmtiPrimitiveType,
        user_data: *mut ::std::os::raw::c_void,
    ) -> jint,
>;
pub type jvmtiArrayPrimitiveValueCallback = ::std::option::Option<
    unsafe extern "C" fn(
        class_tag: jlong,
        size: jlong,
        tag_ptr: *mut jlong,
        element_count: jint,
        element_type: jvmtiPrimitiveType,
        elements: *const ::std::os::raw::c_void,
        user_data: *mut ::std::os::raw::c_void,
    ) -> jint,
>;
pub type jvmtiStringPrimitiveValueCallback = ::std::option::Option<
    unsafe extern "C" fn(
        class_tag: jlong,
        size: jlong,
        tag_ptr: *mut jlong,
        value: *const jchar,
        value_length: jint,
        user_data: *mut ::std::os::raw::c_void,
    ) -> jint,
>;
pub type jvmtiReservedCallback = ::std::option::Option<unsafe extern "C" fn() -> jint>;
pub type jvmtiHeapObjectCallback = ::std::option::Option<
    unsafe extern "C" fn(
        class_tag: jlong,
        size: jlong,
        tag_ptr: *mut jlong,
        user_data: *mut ::std::os::raw::c_void,
    ) -> jvmtiIterationControl,
>;
pub type jvmtiHeapRootCallback = ::std::option::Option<
    unsafe extern "C" fn(
        root_kind: jvmtiHeapRootKind,
        class_tag: jlong,
        size: jlong,
        tag_ptr: *mut jlong,
        user_data: *mut ::std::os::raw::c_void,
    ) -> jvmtiIterationControl,
>;
pub type jvmtiStackReferenceCallback = ::std::option::Option<
    unsafe extern "C" fn(
        root_kind: jvmtiHeapRootKind,
        class_tag: jlong,
        size: jlong,
        tag_ptr: *mut jlong,
        thread_tag: jlong,
        depth: jint,
        method: jmethodID,
        slot: jint,
        user_data: *mut ::std::os::raw::c_void,
    ) -> jvmtiIterationControl,
>;
pub type jvmtiObjectReferenceCallback = ::std::option::Option<
    unsafe extern "C" fn(
        reference_kind: jvmtiObjectReferenceKind,
        class_tag: jlong,
        size: jlong,
        tag_ptr: *mut jlong,
        referrer_tag: jlong,
        referrer_index: jint,
        user_data: *mut ::std::os::raw::c_void,
    ) -> jvmtiIterationControl,
>;
pub type jvmtiExtensionFunction =
    ::std::option::Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv, ...) -> jvmtiError>;
pub type jvmtiExtensionEvent =
    ::std::option::Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv, ...)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvmtiThreadInfo {
    pub name: *mut ::std::os::raw::c_char,
    pub priority: jint,
    pub is_daemon: jboolean,
    pub thread_group: jthreadGroup,
    pub context_class_loader: jobject,
}
#[test]
fn bindgen_test_layout_jvmtiThreadInfo() {
    const UNINIT: ::std::mem::MaybeUninit<jvmtiThreadInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<jvmtiThreadInfo>(),
        32usize,
        concat!("Size of: ", stringify!(jvmtiThreadInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<jvmtiThreadInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(jvmtiThreadInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiThreadInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiThreadInfo),
            "::",
            stringify!(priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_daemon) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiThreadInfo),
            "::",
            stringify!(is_daemon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread_group) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiThreadInfo),
            "::",
            stringify!(thread_group)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context_class_loader) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiThreadInfo),
            "::",
            stringify!(context_class_loader)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvmtiMonitorStackDepthInfo {
    pub monitor: jobject,
    pub stack_depth: jint,
}
#[test]
fn bindgen_test_layout_jvmtiMonitorStackDepthInfo() {
    const UNINIT: ::std::mem::MaybeUninit<jvmtiMonitorStackDepthInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<jvmtiMonitorStackDepthInfo>(),
        16usize,
        concat!("Size of: ", stringify!(jvmtiMonitorStackDepthInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<jvmtiMonitorStackDepthInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(jvmtiMonitorStackDepthInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).monitor) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiMonitorStackDepthInfo),
            "::",
            stringify!(monitor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stack_depth) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiMonitorStackDepthInfo),
            "::",
            stringify!(stack_depth)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvmtiThreadGroupInfo {
    pub parent: jthreadGroup,
    pub name: *mut ::std::os::raw::c_char,
    pub max_priority: jint,
    pub is_daemon: jboolean,
}
#[test]
fn bindgen_test_layout_jvmtiThreadGroupInfo() {
    const UNINIT: ::std::mem::MaybeUninit<jvmtiThreadGroupInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<jvmtiThreadGroupInfo>(),
        24usize,
        concat!("Size of: ", stringify!(jvmtiThreadGroupInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<jvmtiThreadGroupInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(jvmtiThreadGroupInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiThreadGroupInfo),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiThreadGroupInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_priority) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiThreadGroupInfo),
            "::",
            stringify!(max_priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_daemon) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiThreadGroupInfo),
            "::",
            stringify!(is_daemon)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvmtiFrameInfo {
    pub method: jmethodID,
    pub location: jlocation,
}
#[test]
fn bindgen_test_layout_jvmtiFrameInfo() {
    const UNINIT: ::std::mem::MaybeUninit<jvmtiFrameInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<jvmtiFrameInfo>(),
        16usize,
        concat!("Size of: ", stringify!(jvmtiFrameInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<jvmtiFrameInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(jvmtiFrameInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).method) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiFrameInfo),
            "::",
            stringify!(method)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).location) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiFrameInfo),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvmtiStackInfo {
    pub thread: jthread,
    pub state: jint,
    pub frame_buffer: *mut jvmtiFrameInfo,
    pub frame_count: jint,
}
#[test]
fn bindgen_test_layout_jvmtiStackInfo() {
    const UNINIT: ::std::mem::MaybeUninit<jvmtiStackInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<jvmtiStackInfo>(),
        32usize,
        concat!("Size of: ", stringify!(jvmtiStackInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<jvmtiStackInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(jvmtiStackInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiStackInfo),
            "::",
            stringify!(thread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiStackInfo),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frame_buffer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiStackInfo),
            "::",
            stringify!(frame_buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frame_count) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiStackInfo),
            "::",
            stringify!(frame_count)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvmtiHeapReferenceInfoField {
    pub index: jint,
}
#[test]
fn bindgen_test_layout_jvmtiHeapReferenceInfoField() {
    const UNINIT: ::std::mem::MaybeUninit<jvmtiHeapReferenceInfoField> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<jvmtiHeapReferenceInfoField>(),
        4usize,
        concat!("Size of: ", stringify!(jvmtiHeapReferenceInfoField))
    );
    assert_eq!(
        ::std::mem::align_of::<jvmtiHeapReferenceInfoField>(),
        4usize,
        concat!("Alignment of ", stringify!(jvmtiHeapReferenceInfoField))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiHeapReferenceInfoField),
            "::",
            stringify!(index)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvmtiHeapReferenceInfoArray {
    pub index: jint,
}
#[test]
fn bindgen_test_layout_jvmtiHeapReferenceInfoArray() {
    const UNINIT: ::std::mem::MaybeUninit<jvmtiHeapReferenceInfoArray> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<jvmtiHeapReferenceInfoArray>(),
        4usize,
        concat!("Size of: ", stringify!(jvmtiHeapReferenceInfoArray))
    );
    assert_eq!(
        ::std::mem::align_of::<jvmtiHeapReferenceInfoArray>(),
        4usize,
        concat!("Alignment of ", stringify!(jvmtiHeapReferenceInfoArray))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiHeapReferenceInfoArray),
            "::",
            stringify!(index)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvmtiHeapReferenceInfoConstantPool {
    pub index: jint,
}
#[test]
fn bindgen_test_layout_jvmtiHeapReferenceInfoConstantPool() {
    const UNINIT: ::std::mem::MaybeUninit<jvmtiHeapReferenceInfoConstantPool> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<jvmtiHeapReferenceInfoConstantPool>(),
        4usize,
        concat!("Size of: ", stringify!(jvmtiHeapReferenceInfoConstantPool))
    );
    assert_eq!(
        ::std::mem::align_of::<jvmtiHeapReferenceInfoConstantPool>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(jvmtiHeapReferenceInfoConstantPool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiHeapReferenceInfoConstantPool),
            "::",
            stringify!(index)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvmtiHeapReferenceInfoStackLocal {
    pub thread_tag: jlong,
    pub thread_id: jlong,
    pub depth: jint,
    pub method: jmethodID,
    pub location: jlocation,
    pub slot: jint,
}
#[test]
fn bindgen_test_layout_jvmtiHeapReferenceInfoStackLocal() {
    const UNINIT: ::std::mem::MaybeUninit<jvmtiHeapReferenceInfoStackLocal> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<jvmtiHeapReferenceInfoStackLocal>(),
        48usize,
        concat!("Size of: ", stringify!(jvmtiHeapReferenceInfoStackLocal))
    );
    assert_eq!(
        ::std::mem::align_of::<jvmtiHeapReferenceInfoStackLocal>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(jvmtiHeapReferenceInfoStackLocal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread_tag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiHeapReferenceInfoStackLocal),
            "::",
            stringify!(thread_tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread_id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiHeapReferenceInfoStackLocal),
            "::",
            stringify!(thread_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiHeapReferenceInfoStackLocal),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).method) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiHeapReferenceInfoStackLocal),
            "::",
            stringify!(method)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).location) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiHeapReferenceInfoStackLocal),
            "::",
            stringify!(location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slot) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiHeapReferenceInfoStackLocal),
            "::",
            stringify!(slot)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvmtiHeapReferenceInfoJniLocal {
    pub thread_tag: jlong,
    pub thread_id: jlong,
    pub depth: jint,
    pub method: jmethodID,
}
#[test]
fn bindgen_test_layout_jvmtiHeapReferenceInfoJniLocal() {
    const UNINIT: ::std::mem::MaybeUninit<jvmtiHeapReferenceInfoJniLocal> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<jvmtiHeapReferenceInfoJniLocal>(),
        32usize,
        concat!("Size of: ", stringify!(jvmtiHeapReferenceInfoJniLocal))
    );
    assert_eq!(
        ::std::mem::align_of::<jvmtiHeapReferenceInfoJniLocal>(),
        8usize,
        concat!("Alignment of ", stringify!(jvmtiHeapReferenceInfoJniLocal))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread_tag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiHeapReferenceInfoJniLocal),
            "::",
            stringify!(thread_tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread_id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiHeapReferenceInfoJniLocal),
            "::",
            stringify!(thread_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiHeapReferenceInfoJniLocal),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).method) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiHeapReferenceInfoJniLocal),
            "::",
            stringify!(method)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvmtiHeapReferenceInfoReserved {
    pub reserved1: jlong,
    pub reserved2: jlong,
    pub reserved3: jlong,
    pub reserved4: jlong,
    pub reserved5: jlong,
    pub reserved6: jlong,
    pub reserved7: jlong,
    pub reserved8: jlong,
}
#[test]
fn bindgen_test_layout_jvmtiHeapReferenceInfoReserved() {
    const UNINIT: ::std::mem::MaybeUninit<jvmtiHeapReferenceInfoReserved> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<jvmtiHeapReferenceInfoReserved>(),
        64usize,
        concat!("Size of: ", stringify!(jvmtiHeapReferenceInfoReserved))
    );
    assert_eq!(
        ::std::mem::align_of::<jvmtiHeapReferenceInfoReserved>(),
        8usize,
        concat!("Alignment of ", stringify!(jvmtiHeapReferenceInfoReserved))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiHeapReferenceInfoReserved),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiHeapReferenceInfoReserved),
            "::",
            stringify!(reserved2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved3) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiHeapReferenceInfoReserved),
            "::",
            stringify!(reserved3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved4) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiHeapReferenceInfoReserved),
            "::",
            stringify!(reserved4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved5) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiHeapReferenceInfoReserved),
            "::",
            stringify!(reserved5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved6) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiHeapReferenceInfoReserved),
            "::",
            stringify!(reserved6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved7) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiHeapReferenceInfoReserved),
            "::",
            stringify!(reserved7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved8) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiHeapReferenceInfoReserved),
            "::",
            stringify!(reserved8)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union jvmtiHeapReferenceInfo {
    pub field: jvmtiHeapReferenceInfoField,
    pub array: jvmtiHeapReferenceInfoArray,
    pub constant_pool: jvmtiHeapReferenceInfoConstantPool,
    pub stack_local: jvmtiHeapReferenceInfoStackLocal,
    pub jni_local: jvmtiHeapReferenceInfoJniLocal,
    pub other: jvmtiHeapReferenceInfoReserved,
}
#[test]
fn bindgen_test_layout_jvmtiHeapReferenceInfo() {
    const UNINIT: ::std::mem::MaybeUninit<jvmtiHeapReferenceInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<jvmtiHeapReferenceInfo>(),
        64usize,
        concat!("Size of: ", stringify!(jvmtiHeapReferenceInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<jvmtiHeapReferenceInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(jvmtiHeapReferenceInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).field) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiHeapReferenceInfo),
            "::",
            stringify!(field)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).array) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiHeapReferenceInfo),
            "::",
            stringify!(array)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).constant_pool) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiHeapReferenceInfo),
            "::",
            stringify!(constant_pool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stack_local) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiHeapReferenceInfo),
            "::",
            stringify!(stack_local)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jni_local) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiHeapReferenceInfo),
            "::",
            stringify!(jni_local)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).other) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiHeapReferenceInfo),
            "::",
            stringify!(other)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvmtiHeapCallbacks {
    pub heap_iteration_callback: jvmtiHeapIterationCallback,
    pub heap_reference_callback: jvmtiHeapReferenceCallback,
    pub primitive_field_callback: jvmtiPrimitiveFieldCallback,
    pub array_primitive_value_callback: jvmtiArrayPrimitiveValueCallback,
    pub string_primitive_value_callback: jvmtiStringPrimitiveValueCallback,
    pub reserved5: jvmtiReservedCallback,
    pub reserved6: jvmtiReservedCallback,
    pub reserved7: jvmtiReservedCallback,
    pub reserved8: jvmtiReservedCallback,
    pub reserved9: jvmtiReservedCallback,
    pub reserved10: jvmtiReservedCallback,
    pub reserved11: jvmtiReservedCallback,
    pub reserved12: jvmtiReservedCallback,
    pub reserved13: jvmtiReservedCallback,
    pub reserved14: jvmtiReservedCallback,
    pub reserved15: jvmtiReservedCallback,
}
#[test]
fn bindgen_test_layout_jvmtiHeapCallbacks() {
    const UNINIT: ::std::mem::MaybeUninit<jvmtiHeapCallbacks> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<jvmtiHeapCallbacks>(),
        128usize,
        concat!("Size of: ", stringify!(jvmtiHeapCallbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<jvmtiHeapCallbacks>(),
        8usize,
        concat!("Alignment of ", stringify!(jvmtiHeapCallbacks))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).heap_iteration_callback) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiHeapCallbacks),
            "::",
            stringify!(heap_iteration_callback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).heap_reference_callback) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiHeapCallbacks),
            "::",
            stringify!(heap_reference_callback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).primitive_field_callback) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiHeapCallbacks),
            "::",
            stringify!(primitive_field_callback)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).array_primitive_value_callback) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiHeapCallbacks),
            "::",
            stringify!(array_primitive_value_callback)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).string_primitive_value_callback) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiHeapCallbacks),
            "::",
            stringify!(string_primitive_value_callback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved5) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiHeapCallbacks),
            "::",
            stringify!(reserved5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved6) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiHeapCallbacks),
            "::",
            stringify!(reserved6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved7) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiHeapCallbacks),
            "::",
            stringify!(reserved7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved8) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiHeapCallbacks),
            "::",
            stringify!(reserved8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved9) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiHeapCallbacks),
            "::",
            stringify!(reserved9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved10) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiHeapCallbacks),
            "::",
            stringify!(reserved10)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved11) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiHeapCallbacks),
            "::",
            stringify!(reserved11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved12) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiHeapCallbacks),
            "::",
            stringify!(reserved12)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved13) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiHeapCallbacks),
            "::",
            stringify!(reserved13)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved14) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiHeapCallbacks),
            "::",
            stringify!(reserved14)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved15) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiHeapCallbacks),
            "::",
            stringify!(reserved15)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvmtiClassDefinition {
    pub klass: jclass,
    pub class_byte_count: jint,
    pub class_bytes: *const ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_jvmtiClassDefinition() {
    const UNINIT: ::std::mem::MaybeUninit<jvmtiClassDefinition> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<jvmtiClassDefinition>(),
        24usize,
        concat!("Size of: ", stringify!(jvmtiClassDefinition))
    );
    assert_eq!(
        ::std::mem::align_of::<jvmtiClassDefinition>(),
        8usize,
        concat!("Alignment of ", stringify!(jvmtiClassDefinition))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).klass) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiClassDefinition),
            "::",
            stringify!(klass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_byte_count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiClassDefinition),
            "::",
            stringify!(class_byte_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).class_bytes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiClassDefinition),
            "::",
            stringify!(class_bytes)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvmtiMonitorUsage {
    pub owner: jthread,
    pub entry_count: jint,
    pub waiter_count: jint,
    pub waiters: *mut jthread,
    pub notify_waiter_count: jint,
    pub notify_waiters: *mut jthread,
}
#[test]
fn bindgen_test_layout_jvmtiMonitorUsage() {
    const UNINIT: ::std::mem::MaybeUninit<jvmtiMonitorUsage> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<jvmtiMonitorUsage>(),
        40usize,
        concat!("Size of: ", stringify!(jvmtiMonitorUsage))
    );
    assert_eq!(
        ::std::mem::align_of::<jvmtiMonitorUsage>(),
        8usize,
        concat!("Alignment of ", stringify!(jvmtiMonitorUsage))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).owner) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiMonitorUsage),
            "::",
            stringify!(owner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entry_count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiMonitorUsage),
            "::",
            stringify!(entry_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).waiter_count) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiMonitorUsage),
            "::",
            stringify!(waiter_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).waiters) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiMonitorUsage),
            "::",
            stringify!(waiters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notify_waiter_count) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiMonitorUsage),
            "::",
            stringify!(notify_waiter_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notify_waiters) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiMonitorUsage),
            "::",
            stringify!(notify_waiters)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvmtiLineNumberEntry {
    pub start_location: jlocation,
    pub line_number: jint,
}
#[test]
fn bindgen_test_layout_jvmtiLineNumberEntry() {
    const UNINIT: ::std::mem::MaybeUninit<jvmtiLineNumberEntry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<jvmtiLineNumberEntry>(),
        16usize,
        concat!("Size of: ", stringify!(jvmtiLineNumberEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<jvmtiLineNumberEntry>(),
        8usize,
        concat!("Alignment of ", stringify!(jvmtiLineNumberEntry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_location) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiLineNumberEntry),
            "::",
            stringify!(start_location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line_number) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiLineNumberEntry),
            "::",
            stringify!(line_number)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvmtiLocalVariableEntry {
    pub start_location: jlocation,
    pub length: jint,
    pub name: *mut ::std::os::raw::c_char,
    pub signature: *mut ::std::os::raw::c_char,
    pub generic_signature: *mut ::std::os::raw::c_char,
    pub slot: jint,
}
#[test]
fn bindgen_test_layout_jvmtiLocalVariableEntry() {
    const UNINIT: ::std::mem::MaybeUninit<jvmtiLocalVariableEntry> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<jvmtiLocalVariableEntry>(),
        48usize,
        concat!("Size of: ", stringify!(jvmtiLocalVariableEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<jvmtiLocalVariableEntry>(),
        8usize,
        concat!("Alignment of ", stringify!(jvmtiLocalVariableEntry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_location) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiLocalVariableEntry),
            "::",
            stringify!(start_location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiLocalVariableEntry),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiLocalVariableEntry),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).signature) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiLocalVariableEntry),
            "::",
            stringify!(signature)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).generic_signature) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiLocalVariableEntry),
            "::",
            stringify!(generic_signature)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slot) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiLocalVariableEntry),
            "::",
            stringify!(slot)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvmtiParamInfo {
    pub name: *mut ::std::os::raw::c_char,
    pub kind: jvmtiParamKind,
    pub base_type: jvmtiParamTypes,
    pub null_ok: jboolean,
}
#[test]
fn bindgen_test_layout_jvmtiParamInfo() {
    const UNINIT: ::std::mem::MaybeUninit<jvmtiParamInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<jvmtiParamInfo>(),
        24usize,
        concat!("Size of: ", stringify!(jvmtiParamInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<jvmtiParamInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(jvmtiParamInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiParamInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiParamInfo),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_type) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiParamInfo),
            "::",
            stringify!(base_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).null_ok) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiParamInfo),
            "::",
            stringify!(null_ok)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvmtiExtensionFunctionInfo {
    pub func: jvmtiExtensionFunction,
    pub id: *mut ::std::os::raw::c_char,
    pub short_description: *mut ::std::os::raw::c_char,
    pub param_count: jint,
    pub params: *mut jvmtiParamInfo,
    pub error_count: jint,
    pub errors: *mut jvmtiError,
}
#[test]
fn bindgen_test_layout_jvmtiExtensionFunctionInfo() {
    const UNINIT: ::std::mem::MaybeUninit<jvmtiExtensionFunctionInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<jvmtiExtensionFunctionInfo>(),
        56usize,
        concat!("Size of: ", stringify!(jvmtiExtensionFunctionInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<jvmtiExtensionFunctionInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(jvmtiExtensionFunctionInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiExtensionFunctionInfo),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiExtensionFunctionInfo),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).short_description) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiExtensionFunctionInfo),
            "::",
            stringify!(short_description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_count) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiExtensionFunctionInfo),
            "::",
            stringify!(param_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).params) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiExtensionFunctionInfo),
            "::",
            stringify!(params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error_count) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiExtensionFunctionInfo),
            "::",
            stringify!(error_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).errors) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiExtensionFunctionInfo),
            "::",
            stringify!(errors)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvmtiExtensionEventInfo {
    pub extension_event_index: jint,
    pub id: *mut ::std::os::raw::c_char,
    pub short_description: *mut ::std::os::raw::c_char,
    pub param_count: jint,
    pub params: *mut jvmtiParamInfo,
}
#[test]
fn bindgen_test_layout_jvmtiExtensionEventInfo() {
    const UNINIT: ::std::mem::MaybeUninit<jvmtiExtensionEventInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<jvmtiExtensionEventInfo>(),
        40usize,
        concat!("Size of: ", stringify!(jvmtiExtensionEventInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<jvmtiExtensionEventInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(jvmtiExtensionEventInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extension_event_index) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiExtensionEventInfo),
            "::",
            stringify!(extension_event_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiExtensionEventInfo),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).short_description) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiExtensionEventInfo),
            "::",
            stringify!(short_description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_count) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiExtensionEventInfo),
            "::",
            stringify!(param_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).params) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiExtensionEventInfo),
            "::",
            stringify!(params)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvmtiTimerInfo {
    pub max_value: jlong,
    pub may_skip_forward: jboolean,
    pub may_skip_backward: jboolean,
    pub kind: jvmtiTimerKind,
    pub reserved1: jlong,
    pub reserved2: jlong,
}
#[test]
fn bindgen_test_layout_jvmtiTimerInfo() {
    const UNINIT: ::std::mem::MaybeUninit<jvmtiTimerInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<jvmtiTimerInfo>(),
        32usize,
        concat!("Size of: ", stringify!(jvmtiTimerInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<jvmtiTimerInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(jvmtiTimerInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiTimerInfo),
            "::",
            stringify!(max_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).may_skip_forward) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiTimerInfo),
            "::",
            stringify!(may_skip_forward)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).may_skip_backward) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiTimerInfo),
            "::",
            stringify!(may_skip_backward)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiTimerInfo),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiTimerInfo),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved2) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiTimerInfo),
            "::",
            stringify!(reserved2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvmtiAddrLocationMap {
    pub start_address: *const ::std::os::raw::c_void,
    pub location: jlocation,
}
#[test]
fn bindgen_test_layout_jvmtiAddrLocationMap() {
    const UNINIT: ::std::mem::MaybeUninit<jvmtiAddrLocationMap> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<jvmtiAddrLocationMap>(),
        16usize,
        concat!("Size of: ", stringify!(jvmtiAddrLocationMap))
    );
    assert_eq!(
        ::std::mem::align_of::<jvmtiAddrLocationMap>(),
        8usize,
        concat!("Alignment of ", stringify!(jvmtiAddrLocationMap))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiAddrLocationMap),
            "::",
            stringify!(start_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).location) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiAddrLocationMap),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct jvmtiCapabilities {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 16usize]>,
}
#[test]
fn bindgen_test_layout_jvmtiCapabilities() {
    assert_eq!(
        ::std::mem::size_of::<jvmtiCapabilities>(),
        16usize,
        concat!("Size of: ", stringify!(jvmtiCapabilities))
    );
    assert_eq!(
        ::std::mem::align_of::<jvmtiCapabilities>(),
        4usize,
        concat!("Alignment of ", stringify!(jvmtiCapabilities))
    );
}
impl jvmtiCapabilities {
    #[inline]
    pub fn can_tag_objects(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_tag_objects(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_generate_field_modification_events(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_generate_field_modification_events(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_generate_field_access_events(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_generate_field_access_events(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_get_bytecodes(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_get_bytecodes(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_get_synthetic_attribute(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_get_synthetic_attribute(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_get_owned_monitor_info(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_get_owned_monitor_info(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_get_current_contended_monitor(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_get_current_contended_monitor(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_get_monitor_info(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_get_monitor_info(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_pop_frame(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_pop_frame(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_redefine_classes(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_redefine_classes(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_signal_thread(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_signal_thread(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_get_source_file_name(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_get_source_file_name(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_get_line_numbers(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_get_line_numbers(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_get_source_debug_extension(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_get_source_debug_extension(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_access_local_variables(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_access_local_variables(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_maintain_original_method_order(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_maintain_original_method_order(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_generate_single_step_events(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_generate_single_step_events(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_generate_exception_events(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_generate_exception_events(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_generate_frame_pop_events(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_generate_frame_pop_events(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_generate_breakpoint_events(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_generate_breakpoint_events(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_suspend(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_suspend(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_redefine_any_class(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_redefine_any_class(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(21usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_get_current_thread_cpu_time(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_get_current_thread_cpu_time(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(22usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_get_thread_cpu_time(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_get_thread_cpu_time(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_generate_method_entry_events(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_generate_method_entry_events(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_generate_method_exit_events(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(25usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_generate_method_exit_events(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(25usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_generate_all_class_hook_events(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(26usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_generate_all_class_hook_events(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(26usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_generate_compiled_method_load_events(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_generate_compiled_method_load_events(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_generate_monitor_events(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_generate_monitor_events(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_generate_vm_object_alloc_events(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_generate_vm_object_alloc_events(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_generate_native_method_bind_events(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_generate_native_method_bind_events(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_generate_garbage_collection_events(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_generate_garbage_collection_events(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_generate_object_free_events(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_generate_object_free_events(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_force_early_return(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(33usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_force_early_return(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(33usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_get_owned_monitor_stack_depth_info(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(34usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_get_owned_monitor_stack_depth_info(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(34usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_get_constant_pool(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(35usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_get_constant_pool(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(35usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_set_native_method_prefix(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(36usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_set_native_method_prefix(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(36usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_retransform_classes(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(37usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_retransform_classes(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(37usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_retransform_any_class(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(38usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_retransform_any_class(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(38usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_generate_resource_exhaustion_heap_events(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(39usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_generate_resource_exhaustion_heap_events(
        &mut self,
        val: ::std::os::raw::c_uint,
    ) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(39usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_generate_resource_exhaustion_threads_events(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(40usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_generate_resource_exhaustion_threads_events(
        &mut self,
        val: ::std::os::raw::c_uint,
    ) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(40usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_generate_early_vmstart(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(41usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_generate_early_vmstart(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(41usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_generate_early_class_hook_events(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(42usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_generate_early_class_hook_events(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(42usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_generate_sampled_object_alloc_events(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(43usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_generate_sampled_object_alloc_events(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(43usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn can_support_virtual_threads(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(44usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_can_support_virtual_threads(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(44usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        can_tag_objects: ::std::os::raw::c_uint,
        can_generate_field_modification_events: ::std::os::raw::c_uint,
        can_generate_field_access_events: ::std::os::raw::c_uint,
        can_get_bytecodes: ::std::os::raw::c_uint,
        can_get_synthetic_attribute: ::std::os::raw::c_uint,
        can_get_owned_monitor_info: ::std::os::raw::c_uint,
        can_get_current_contended_monitor: ::std::os::raw::c_uint,
        can_get_monitor_info: ::std::os::raw::c_uint,
        can_pop_frame: ::std::os::raw::c_uint,
        can_redefine_classes: ::std::os::raw::c_uint,
        can_signal_thread: ::std::os::raw::c_uint,
        can_get_source_file_name: ::std::os::raw::c_uint,
        can_get_line_numbers: ::std::os::raw::c_uint,
        can_get_source_debug_extension: ::std::os::raw::c_uint,
        can_access_local_variables: ::std::os::raw::c_uint,
        can_maintain_original_method_order: ::std::os::raw::c_uint,
        can_generate_single_step_events: ::std::os::raw::c_uint,
        can_generate_exception_events: ::std::os::raw::c_uint,
        can_generate_frame_pop_events: ::std::os::raw::c_uint,
        can_generate_breakpoint_events: ::std::os::raw::c_uint,
        can_suspend: ::std::os::raw::c_uint,
        can_redefine_any_class: ::std::os::raw::c_uint,
        can_get_current_thread_cpu_time: ::std::os::raw::c_uint,
        can_get_thread_cpu_time: ::std::os::raw::c_uint,
        can_generate_method_entry_events: ::std::os::raw::c_uint,
        can_generate_method_exit_events: ::std::os::raw::c_uint,
        can_generate_all_class_hook_events: ::std::os::raw::c_uint,
        can_generate_compiled_method_load_events: ::std::os::raw::c_uint,
        can_generate_monitor_events: ::std::os::raw::c_uint,
        can_generate_vm_object_alloc_events: ::std::os::raw::c_uint,
        can_generate_native_method_bind_events: ::std::os::raw::c_uint,
        can_generate_garbage_collection_events: ::std::os::raw::c_uint,
        can_generate_object_free_events: ::std::os::raw::c_uint,
        can_force_early_return: ::std::os::raw::c_uint,
        can_get_owned_monitor_stack_depth_info: ::std::os::raw::c_uint,
        can_get_constant_pool: ::std::os::raw::c_uint,
        can_set_native_method_prefix: ::std::os::raw::c_uint,
        can_retransform_classes: ::std::os::raw::c_uint,
        can_retransform_any_class: ::std::os::raw::c_uint,
        can_generate_resource_exhaustion_heap_events: ::std::os::raw::c_uint,
        can_generate_resource_exhaustion_threads_events: ::std::os::raw::c_uint,
        can_generate_early_vmstart: ::std::os::raw::c_uint,
        can_generate_early_class_hook_events: ::std::os::raw::c_uint,
        can_generate_sampled_object_alloc_events: ::std::os::raw::c_uint,
        can_support_virtual_threads: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 16usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 16usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let can_tag_objects: u32 = unsafe { ::std::mem::transmute(can_tag_objects) };
            can_tag_objects as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let can_generate_field_modification_events: u32 =
                unsafe { ::std::mem::transmute(can_generate_field_modification_events) };
            can_generate_field_modification_events as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let can_generate_field_access_events: u32 =
                unsafe { ::std::mem::transmute(can_generate_field_access_events) };
            can_generate_field_access_events as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let can_get_bytecodes: u32 = unsafe { ::std::mem::transmute(can_get_bytecodes) };
            can_get_bytecodes as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let can_get_synthetic_attribute: u32 =
                unsafe { ::std::mem::transmute(can_get_synthetic_attribute) };
            can_get_synthetic_attribute as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let can_get_owned_monitor_info: u32 =
                unsafe { ::std::mem::transmute(can_get_owned_monitor_info) };
            can_get_owned_monitor_info as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let can_get_current_contended_monitor: u32 =
                unsafe { ::std::mem::transmute(can_get_current_contended_monitor) };
            can_get_current_contended_monitor as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let can_get_monitor_info: u32 = unsafe { ::std::mem::transmute(can_get_monitor_info) };
            can_get_monitor_info as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let can_pop_frame: u32 = unsafe { ::std::mem::transmute(can_pop_frame) };
            can_pop_frame as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let can_redefine_classes: u32 = unsafe { ::std::mem::transmute(can_redefine_classes) };
            can_redefine_classes as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let can_signal_thread: u32 = unsafe { ::std::mem::transmute(can_signal_thread) };
            can_signal_thread as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let can_get_source_file_name: u32 =
                unsafe { ::std::mem::transmute(can_get_source_file_name) };
            can_get_source_file_name as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let can_get_line_numbers: u32 = unsafe { ::std::mem::transmute(can_get_line_numbers) };
            can_get_line_numbers as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let can_get_source_debug_extension: u32 =
                unsafe { ::std::mem::transmute(can_get_source_debug_extension) };
            can_get_source_debug_extension as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let can_access_local_variables: u32 =
                unsafe { ::std::mem::transmute(can_access_local_variables) };
            can_access_local_variables as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let can_maintain_original_method_order: u32 =
                unsafe { ::std::mem::transmute(can_maintain_original_method_order) };
            can_maintain_original_method_order as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let can_generate_single_step_events: u32 =
                unsafe { ::std::mem::transmute(can_generate_single_step_events) };
            can_generate_single_step_events as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let can_generate_exception_events: u32 =
                unsafe { ::std::mem::transmute(can_generate_exception_events) };
            can_generate_exception_events as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let can_generate_frame_pop_events: u32 =
                unsafe { ::std::mem::transmute(can_generate_frame_pop_events) };
            can_generate_frame_pop_events as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let can_generate_breakpoint_events: u32 =
                unsafe { ::std::mem::transmute(can_generate_breakpoint_events) };
            can_generate_breakpoint_events as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let can_suspend: u32 = unsafe { ::std::mem::transmute(can_suspend) };
            can_suspend as u64
        });
        __bindgen_bitfield_unit.set(21usize, 1u8, {
            let can_redefine_any_class: u32 =
                unsafe { ::std::mem::transmute(can_redefine_any_class) };
            can_redefine_any_class as u64
        });
        __bindgen_bitfield_unit.set(22usize, 1u8, {
            let can_get_current_thread_cpu_time: u32 =
                unsafe { ::std::mem::transmute(can_get_current_thread_cpu_time) };
            can_get_current_thread_cpu_time as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let can_get_thread_cpu_time: u32 =
                unsafe { ::std::mem::transmute(can_get_thread_cpu_time) };
            can_get_thread_cpu_time as u64
        });
        __bindgen_bitfield_unit.set(24usize, 1u8, {
            let can_generate_method_entry_events: u32 =
                unsafe { ::std::mem::transmute(can_generate_method_entry_events) };
            can_generate_method_entry_events as u64
        });
        __bindgen_bitfield_unit.set(25usize, 1u8, {
            let can_generate_method_exit_events: u32 =
                unsafe { ::std::mem::transmute(can_generate_method_exit_events) };
            can_generate_method_exit_events as u64
        });
        __bindgen_bitfield_unit.set(26usize, 1u8, {
            let can_generate_all_class_hook_events: u32 =
                unsafe { ::std::mem::transmute(can_generate_all_class_hook_events) };
            can_generate_all_class_hook_events as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let can_generate_compiled_method_load_events: u32 =
                unsafe { ::std::mem::transmute(can_generate_compiled_method_load_events) };
            can_generate_compiled_method_load_events as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let can_generate_monitor_events: u32 =
                unsafe { ::std::mem::transmute(can_generate_monitor_events) };
            can_generate_monitor_events as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let can_generate_vm_object_alloc_events: u32 =
                unsafe { ::std::mem::transmute(can_generate_vm_object_alloc_events) };
            can_generate_vm_object_alloc_events as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let can_generate_native_method_bind_events: u32 =
                unsafe { ::std::mem::transmute(can_generate_native_method_bind_events) };
            can_generate_native_method_bind_events as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let can_generate_garbage_collection_events: u32 =
                unsafe { ::std::mem::transmute(can_generate_garbage_collection_events) };
            can_generate_garbage_collection_events as u64
        });
        __bindgen_bitfield_unit.set(32usize, 1u8, {
            let can_generate_object_free_events: u32 =
                unsafe { ::std::mem::transmute(can_generate_object_free_events) };
            can_generate_object_free_events as u64
        });
        __bindgen_bitfield_unit.set(33usize, 1u8, {
            let can_force_early_return: u32 =
                unsafe { ::std::mem::transmute(can_force_early_return) };
            can_force_early_return as u64
        });
        __bindgen_bitfield_unit.set(34usize, 1u8, {
            let can_get_owned_monitor_stack_depth_info: u32 =
                unsafe { ::std::mem::transmute(can_get_owned_monitor_stack_depth_info) };
            can_get_owned_monitor_stack_depth_info as u64
        });
        __bindgen_bitfield_unit.set(35usize, 1u8, {
            let can_get_constant_pool: u32 =
                unsafe { ::std::mem::transmute(can_get_constant_pool) };
            can_get_constant_pool as u64
        });
        __bindgen_bitfield_unit.set(36usize, 1u8, {
            let can_set_native_method_prefix: u32 =
                unsafe { ::std::mem::transmute(can_set_native_method_prefix) };
            can_set_native_method_prefix as u64
        });
        __bindgen_bitfield_unit.set(37usize, 1u8, {
            let can_retransform_classes: u32 =
                unsafe { ::std::mem::transmute(can_retransform_classes) };
            can_retransform_classes as u64
        });
        __bindgen_bitfield_unit.set(38usize, 1u8, {
            let can_retransform_any_class: u32 =
                unsafe { ::std::mem::transmute(can_retransform_any_class) };
            can_retransform_any_class as u64
        });
        __bindgen_bitfield_unit.set(39usize, 1u8, {
            let can_generate_resource_exhaustion_heap_events: u32 =
                unsafe { ::std::mem::transmute(can_generate_resource_exhaustion_heap_events) };
            can_generate_resource_exhaustion_heap_events as u64
        });
        __bindgen_bitfield_unit.set(40usize, 1u8, {
            let can_generate_resource_exhaustion_threads_events: u32 =
                unsafe { ::std::mem::transmute(can_generate_resource_exhaustion_threads_events) };
            can_generate_resource_exhaustion_threads_events as u64
        });
        __bindgen_bitfield_unit.set(41usize, 1u8, {
            let can_generate_early_vmstart: u32 =
                unsafe { ::std::mem::transmute(can_generate_early_vmstart) };
            can_generate_early_vmstart as u64
        });
        __bindgen_bitfield_unit.set(42usize, 1u8, {
            let can_generate_early_class_hook_events: u32 =
                unsafe { ::std::mem::transmute(can_generate_early_class_hook_events) };
            can_generate_early_class_hook_events as u64
        });
        __bindgen_bitfield_unit.set(43usize, 1u8, {
            let can_generate_sampled_object_alloc_events: u32 =
                unsafe { ::std::mem::transmute(can_generate_sampled_object_alloc_events) };
            can_generate_sampled_object_alloc_events as u64
        });
        __bindgen_bitfield_unit.set(44usize, 1u8, {
            let can_support_virtual_threads: u32 =
                unsafe { ::std::mem::transmute(can_support_virtual_threads) };
            can_support_virtual_threads as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type jvmtiEventReserved = ::std::option::Option<unsafe extern "C" fn()>;
pub type jvmtiEventBreakpoint = ::std::option::Option<
    unsafe extern "C" fn(
        jvmti_env: *mut jvmtiEnv,
        jni_env: *mut JNIEnv,
        thread: jthread,
        method: jmethodID,
        location: jlocation,
    ),
>;
pub type jvmtiEventClassFileLoadHook = ::std::option::Option<
    unsafe extern "C" fn(
        jvmti_env: *mut jvmtiEnv,
        jni_env: *mut JNIEnv,
        class_being_redefined: jclass,
        loader: jobject,
        name: *const ::std::os::raw::c_char,
        protection_domain: jobject,
        class_data_len: jint,
        class_data: *const ::std::os::raw::c_uchar,
        new_class_data_len: *mut jint,
        new_class_data: *mut *mut ::std::os::raw::c_uchar,
    ),
>;
pub type jvmtiEventClassLoad = ::std::option::Option<
    unsafe extern "C" fn(
        jvmti_env: *mut jvmtiEnv,
        jni_env: *mut JNIEnv,
        thread: jthread,
        klass: jclass,
    ),
>;
pub type jvmtiEventClassPrepare = ::std::option::Option<
    unsafe extern "C" fn(
        jvmti_env: *mut jvmtiEnv,
        jni_env: *mut JNIEnv,
        thread: jthread,
        klass: jclass,
    ),
>;
pub type jvmtiEventCompiledMethodLoad = ::std::option::Option<
    unsafe extern "C" fn(
        jvmti_env: *mut jvmtiEnv,
        method: jmethodID,
        code_size: jint,
        code_addr: *const ::std::os::raw::c_void,
        map_length: jint,
        map: *const jvmtiAddrLocationMap,
        compile_info: *const ::std::os::raw::c_void,
    ),
>;
pub type jvmtiEventCompiledMethodUnload = ::std::option::Option<
    unsafe extern "C" fn(
        jvmti_env: *mut jvmtiEnv,
        method: jmethodID,
        code_addr: *const ::std::os::raw::c_void,
    ),
>;
pub type jvmtiEventDataDumpRequest =
    ::std::option::Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv)>;
pub type jvmtiEventDynamicCodeGenerated = ::std::option::Option<
    unsafe extern "C" fn(
        jvmti_env: *mut jvmtiEnv,
        name: *const ::std::os::raw::c_char,
        address: *const ::std::os::raw::c_void,
        length: jint,
    ),
>;
pub type jvmtiEventException = ::std::option::Option<
    unsafe extern "C" fn(
        jvmti_env: *mut jvmtiEnv,
        jni_env: *mut JNIEnv,
        thread: jthread,
        method: jmethodID,
        location: jlocation,
        exception: jobject,
        catch_method: jmethodID,
        catch_location: jlocation,
    ),
>;
pub type jvmtiEventExceptionCatch = ::std::option::Option<
    unsafe extern "C" fn(
        jvmti_env: *mut jvmtiEnv,
        jni_env: *mut JNIEnv,
        thread: jthread,
        method: jmethodID,
        location: jlocation,
        exception: jobject,
    ),
>;
pub type jvmtiEventFieldAccess = ::std::option::Option<
    unsafe extern "C" fn(
        jvmti_env: *mut jvmtiEnv,
        jni_env: *mut JNIEnv,
        thread: jthread,
        method: jmethodID,
        location: jlocation,
        field_klass: jclass,
        object: jobject,
        field: jfieldID,
    ),
>;
pub type jvmtiEventFieldModification = ::std::option::Option<
    unsafe extern "C" fn(
        jvmti_env: *mut jvmtiEnv,
        jni_env: *mut JNIEnv,
        thread: jthread,
        method: jmethodID,
        location: jlocation,
        field_klass: jclass,
        object: jobject,
        field: jfieldID,
        signature_type: ::std::os::raw::c_char,
        new_value: jvalue,
    ),
>;
pub type jvmtiEventFramePop = ::std::option::Option<
    unsafe extern "C" fn(
        jvmti_env: *mut jvmtiEnv,
        jni_env: *mut JNIEnv,
        thread: jthread,
        method: jmethodID,
        was_popped_by_exception: jboolean,
    ),
>;
pub type jvmtiEventGarbageCollectionFinish =
    ::std::option::Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv)>;
pub type jvmtiEventGarbageCollectionStart =
    ::std::option::Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv)>;
pub type jvmtiEventMethodEntry = ::std::option::Option<
    unsafe extern "C" fn(
        jvmti_env: *mut jvmtiEnv,
        jni_env: *mut JNIEnv,
        thread: jthread,
        method: jmethodID,
    ),
>;
pub type jvmtiEventMethodExit = ::std::option::Option<
    unsafe extern "C" fn(
        jvmti_env: *mut jvmtiEnv,
        jni_env: *mut JNIEnv,
        thread: jthread,
        method: jmethodID,
        was_popped_by_exception: jboolean,
        return_value: jvalue,
    ),
>;
pub type jvmtiEventMonitorContendedEnter = ::std::option::Option<
    unsafe extern "C" fn(
        jvmti_env: *mut jvmtiEnv,
        jni_env: *mut JNIEnv,
        thread: jthread,
        object: jobject,
    ),
>;
pub type jvmtiEventMonitorContendedEntered = ::std::option::Option<
    unsafe extern "C" fn(
        jvmti_env: *mut jvmtiEnv,
        jni_env: *mut JNIEnv,
        thread: jthread,
        object: jobject,
    ),
>;
pub type jvmtiEventMonitorWait = ::std::option::Option<
    unsafe extern "C" fn(
        jvmti_env: *mut jvmtiEnv,
        jni_env: *mut JNIEnv,
        thread: jthread,
        object: jobject,
        timeout: jlong,
    ),
>;
pub type jvmtiEventMonitorWaited = ::std::option::Option<
    unsafe extern "C" fn(
        jvmti_env: *mut jvmtiEnv,
        jni_env: *mut JNIEnv,
        thread: jthread,
        object: jobject,
        timed_out: jboolean,
    ),
>;
pub type jvmtiEventNativeMethodBind = ::std::option::Option<
    unsafe extern "C" fn(
        jvmti_env: *mut jvmtiEnv,
        jni_env: *mut JNIEnv,
        thread: jthread,
        method: jmethodID,
        address: *mut ::std::os::raw::c_void,
        new_address_ptr: *mut *mut ::std::os::raw::c_void,
    ),
>;
pub type jvmtiEventObjectFree =
    ::std::option::Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv, tag: jlong)>;
pub type jvmtiEventResourceExhausted = ::std::option::Option<
    unsafe extern "C" fn(
        jvmti_env: *mut jvmtiEnv,
        jni_env: *mut JNIEnv,
        flags: jint,
        reserved: *const ::std::os::raw::c_void,
        description: *const ::std::os::raw::c_char,
    ),
>;
pub type jvmtiEventSampledObjectAlloc = ::std::option::Option<
    unsafe extern "C" fn(
        jvmti_env: *mut jvmtiEnv,
        jni_env: *mut JNIEnv,
        thread: jthread,
        object: jobject,
        object_klass: jclass,
        size: jlong,
    ),
>;
pub type jvmtiEventSingleStep = ::std::option::Option<
    unsafe extern "C" fn(
        jvmti_env: *mut jvmtiEnv,
        jni_env: *mut JNIEnv,
        thread: jthread,
        method: jmethodID,
        location: jlocation,
    ),
>;
pub type jvmtiEventThreadEnd = ::std::option::Option<
    unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv, jni_env: *mut JNIEnv, thread: jthread),
>;
pub type jvmtiEventThreadStart = ::std::option::Option<
    unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv, jni_env: *mut JNIEnv, thread: jthread),
>;
pub type jvmtiEventVirtualThreadEnd = ::std::option::Option<
    unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv, jni_env: *mut JNIEnv, virtual_thread: jthread),
>;
pub type jvmtiEventVirtualThreadStart = ::std::option::Option<
    unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv, jni_env: *mut JNIEnv, virtual_thread: jthread),
>;
pub type jvmtiEventVMDeath =
    ::std::option::Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv, jni_env: *mut JNIEnv)>;
pub type jvmtiEventVMInit = ::std::option::Option<
    unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv, jni_env: *mut JNIEnv, thread: jthread),
>;
pub type jvmtiEventVMObjectAlloc = ::std::option::Option<
    unsafe extern "C" fn(
        jvmti_env: *mut jvmtiEnv,
        jni_env: *mut JNIEnv,
        thread: jthread,
        object: jobject,
        object_klass: jclass,
        size: jlong,
    ),
>;
pub type jvmtiEventVMStart =
    ::std::option::Option<unsafe extern "C" fn(jvmti_env: *mut jvmtiEnv, jni_env: *mut JNIEnv)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvmtiEventCallbacks {
    pub VMInit: jvmtiEventVMInit,
    pub VMDeath: jvmtiEventVMDeath,
    pub ThreadStart: jvmtiEventThreadStart,
    pub ThreadEnd: jvmtiEventThreadEnd,
    pub ClassFileLoadHook: jvmtiEventClassFileLoadHook,
    pub ClassLoad: jvmtiEventClassLoad,
    pub ClassPrepare: jvmtiEventClassPrepare,
    pub VMStart: jvmtiEventVMStart,
    pub Exception: jvmtiEventException,
    pub ExceptionCatch: jvmtiEventExceptionCatch,
    pub SingleStep: jvmtiEventSingleStep,
    pub FramePop: jvmtiEventFramePop,
    pub Breakpoint: jvmtiEventBreakpoint,
    pub FieldAccess: jvmtiEventFieldAccess,
    pub FieldModification: jvmtiEventFieldModification,
    pub MethodEntry: jvmtiEventMethodEntry,
    pub MethodExit: jvmtiEventMethodExit,
    pub NativeMethodBind: jvmtiEventNativeMethodBind,
    pub CompiledMethodLoad: jvmtiEventCompiledMethodLoad,
    pub CompiledMethodUnload: jvmtiEventCompiledMethodUnload,
    pub DynamicCodeGenerated: jvmtiEventDynamicCodeGenerated,
    pub DataDumpRequest: jvmtiEventDataDumpRequest,
    pub reserved72: jvmtiEventReserved,
    pub MonitorWait: jvmtiEventMonitorWait,
    pub MonitorWaited: jvmtiEventMonitorWaited,
    pub MonitorContendedEnter: jvmtiEventMonitorContendedEnter,
    pub MonitorContendedEntered: jvmtiEventMonitorContendedEntered,
    pub reserved77: jvmtiEventReserved,
    pub reserved78: jvmtiEventReserved,
    pub reserved79: jvmtiEventReserved,
    pub ResourceExhausted: jvmtiEventResourceExhausted,
    pub GarbageCollectionStart: jvmtiEventGarbageCollectionStart,
    pub GarbageCollectionFinish: jvmtiEventGarbageCollectionFinish,
    pub ObjectFree: jvmtiEventObjectFree,
    pub VMObjectAlloc: jvmtiEventVMObjectAlloc,
    pub reserved85: jvmtiEventReserved,
    pub SampledObjectAlloc: jvmtiEventSampledObjectAlloc,
    pub VirtualThreadStart: jvmtiEventVirtualThreadStart,
    pub VirtualThreadEnd: jvmtiEventVirtualThreadEnd,
}
#[test]
fn bindgen_test_layout_jvmtiEventCallbacks() {
    const UNINIT: ::std::mem::MaybeUninit<jvmtiEventCallbacks> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<jvmtiEventCallbacks>(),
        312usize,
        concat!("Size of: ", stringify!(jvmtiEventCallbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<jvmtiEventCallbacks>(),
        8usize,
        concat!("Alignment of ", stringify!(jvmtiEventCallbacks))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VMInit) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiEventCallbacks),
            "::",
            stringify!(VMInit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VMDeath) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiEventCallbacks),
            "::",
            stringify!(VMDeath)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ThreadStart) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiEventCallbacks),
            "::",
            stringify!(ThreadStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ThreadEnd) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiEventCallbacks),
            "::",
            stringify!(ThreadEnd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClassFileLoadHook) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiEventCallbacks),
            "::",
            stringify!(ClassFileLoadHook)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClassLoad) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiEventCallbacks),
            "::",
            stringify!(ClassLoad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClassPrepare) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiEventCallbacks),
            "::",
            stringify!(ClassPrepare)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VMStart) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiEventCallbacks),
            "::",
            stringify!(VMStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Exception) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiEventCallbacks),
            "::",
            stringify!(Exception)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ExceptionCatch) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiEventCallbacks),
            "::",
            stringify!(ExceptionCatch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SingleStep) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiEventCallbacks),
            "::",
            stringify!(SingleStep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FramePop) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiEventCallbacks),
            "::",
            stringify!(FramePop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Breakpoint) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiEventCallbacks),
            "::",
            stringify!(Breakpoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FieldAccess) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiEventCallbacks),
            "::",
            stringify!(FieldAccess)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FieldModification) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiEventCallbacks),
            "::",
            stringify!(FieldModification)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MethodEntry) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiEventCallbacks),
            "::",
            stringify!(MethodEntry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MethodExit) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiEventCallbacks),
            "::",
            stringify!(MethodExit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NativeMethodBind) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiEventCallbacks),
            "::",
            stringify!(NativeMethodBind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CompiledMethodLoad) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiEventCallbacks),
            "::",
            stringify!(CompiledMethodLoad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CompiledMethodUnload) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiEventCallbacks),
            "::",
            stringify!(CompiledMethodUnload)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DynamicCodeGenerated) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiEventCallbacks),
            "::",
            stringify!(DynamicCodeGenerated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DataDumpRequest) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiEventCallbacks),
            "::",
            stringify!(DataDumpRequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved72) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiEventCallbacks),
            "::",
            stringify!(reserved72)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MonitorWait) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiEventCallbacks),
            "::",
            stringify!(MonitorWait)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MonitorWaited) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiEventCallbacks),
            "::",
            stringify!(MonitorWaited)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MonitorContendedEnter) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiEventCallbacks),
            "::",
            stringify!(MonitorContendedEnter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MonitorContendedEntered) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiEventCallbacks),
            "::",
            stringify!(MonitorContendedEntered)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved77) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiEventCallbacks),
            "::",
            stringify!(reserved77)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved78) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiEventCallbacks),
            "::",
            stringify!(reserved78)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved79) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiEventCallbacks),
            "::",
            stringify!(reserved79)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ResourceExhausted) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiEventCallbacks),
            "::",
            stringify!(ResourceExhausted)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GarbageCollectionStart) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiEventCallbacks),
            "::",
            stringify!(GarbageCollectionStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GarbageCollectionFinish) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiEventCallbacks),
            "::",
            stringify!(GarbageCollectionFinish)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ObjectFree) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiEventCallbacks),
            "::",
            stringify!(ObjectFree)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VMObjectAlloc) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiEventCallbacks),
            "::",
            stringify!(VMObjectAlloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved85) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiEventCallbacks),
            "::",
            stringify!(reserved85)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SampledObjectAlloc) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiEventCallbacks),
            "::",
            stringify!(SampledObjectAlloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VirtualThreadStart) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiEventCallbacks),
            "::",
            stringify!(VirtualThreadStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VirtualThreadEnd) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiEventCallbacks),
            "::",
            stringify!(VirtualThreadEnd)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvmtiInterface_1_ {
    pub reserved1: *mut ::std::os::raw::c_void,
    pub SetEventNotificationMode: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            mode: jvmtiEventMode,
            event_type: jvmtiEvent,
            event_thread: jthread,
            ...
        ) -> jvmtiError,
    >,
    pub GetAllModules: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            module_count_ptr: *mut jint,
            modules_ptr: *mut *mut jobject,
        ) -> jvmtiError,
    >,
    pub GetAllThreads: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            threads_count_ptr: *mut jint,
            threads_ptr: *mut *mut jthread,
        ) -> jvmtiError,
    >,
    pub SuspendThread: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread) -> jvmtiError,
    >,
    pub ResumeThread: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread) -> jvmtiError,
    >,
    pub StopThread: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread, exception: jobject) -> jvmtiError,
    >,
    pub InterruptThread: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread) -> jvmtiError,
    >,
    pub GetThreadInfo: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            thread: jthread,
            info_ptr: *mut jvmtiThreadInfo,
        ) -> jvmtiError,
    >,
    pub GetOwnedMonitorInfo: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            thread: jthread,
            owned_monitor_count_ptr: *mut jint,
            owned_monitors_ptr: *mut *mut jobject,
        ) -> jvmtiError,
    >,
    pub GetCurrentContendedMonitor: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            thread: jthread,
            monitor_ptr: *mut jobject,
        ) -> jvmtiError,
    >,
    pub RunAgentThread: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            thread: jthread,
            proc_: jvmtiStartFunction,
            arg: *const ::std::os::raw::c_void,
            priority: jint,
        ) -> jvmtiError,
    >,
    pub GetTopThreadGroups: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            group_count_ptr: *mut jint,
            groups_ptr: *mut *mut jthreadGroup,
        ) -> jvmtiError,
    >,
    pub GetThreadGroupInfo: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            group: jthreadGroup,
            info_ptr: *mut jvmtiThreadGroupInfo,
        ) -> jvmtiError,
    >,
    pub GetThreadGroupChildren: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            group: jthreadGroup,
            thread_count_ptr: *mut jint,
            threads_ptr: *mut *mut jthread,
            group_count_ptr: *mut jint,
            groups_ptr: *mut *mut jthreadGroup,
        ) -> jvmtiError,
    >,
    pub GetFrameCount: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            thread: jthread,
            count_ptr: *mut jint,
        ) -> jvmtiError,
    >,
    pub GetThreadState: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            thread: jthread,
            thread_state_ptr: *mut jint,
        ) -> jvmtiError,
    >,
    pub GetCurrentThread: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, thread_ptr: *mut jthread) -> jvmtiError,
    >,
    pub GetFrameLocation: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            thread: jthread,
            depth: jint,
            method_ptr: *mut jmethodID,
            location_ptr: *mut jlocation,
        ) -> jvmtiError,
    >,
    pub NotifyFramePop: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread, depth: jint) -> jvmtiError,
    >,
    pub GetLocalObject: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            thread: jthread,
            depth: jint,
            slot: jint,
            value_ptr: *mut jobject,
        ) -> jvmtiError,
    >,
    pub GetLocalInt: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            thread: jthread,
            depth: jint,
            slot: jint,
            value_ptr: *mut jint,
        ) -> jvmtiError,
    >,
    pub GetLocalLong: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            thread: jthread,
            depth: jint,
            slot: jint,
            value_ptr: *mut jlong,
        ) -> jvmtiError,
    >,
    pub GetLocalFloat: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            thread: jthread,
            depth: jint,
            slot: jint,
            value_ptr: *mut jfloat,
        ) -> jvmtiError,
    >,
    pub GetLocalDouble: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            thread: jthread,
            depth: jint,
            slot: jint,
            value_ptr: *mut jdouble,
        ) -> jvmtiError,
    >,
    pub SetLocalObject: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            thread: jthread,
            depth: jint,
            slot: jint,
            value: jobject,
        ) -> jvmtiError,
    >,
    pub SetLocalInt: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            thread: jthread,
            depth: jint,
            slot: jint,
            value: jint,
        ) -> jvmtiError,
    >,
    pub SetLocalLong: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            thread: jthread,
            depth: jint,
            slot: jint,
            value: jlong,
        ) -> jvmtiError,
    >,
    pub SetLocalFloat: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            thread: jthread,
            depth: jint,
            slot: jint,
            value: jfloat,
        ) -> jvmtiError,
    >,
    pub SetLocalDouble: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            thread: jthread,
            depth: jint,
            slot: jint,
            value: jdouble,
        ) -> jvmtiError,
    >,
    pub CreateRawMonitor: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            name: *const ::std::os::raw::c_char,
            monitor_ptr: *mut jrawMonitorID,
        ) -> jvmtiError,
    >,
    pub DestroyRawMonitor: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, monitor: jrawMonitorID) -> jvmtiError,
    >,
    pub RawMonitorEnter: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, monitor: jrawMonitorID) -> jvmtiError,
    >,
    pub RawMonitorExit: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, monitor: jrawMonitorID) -> jvmtiError,
    >,
    pub RawMonitorWait: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            monitor: jrawMonitorID,
            millis: jlong,
        ) -> jvmtiError,
    >,
    pub RawMonitorNotify: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, monitor: jrawMonitorID) -> jvmtiError,
    >,
    pub RawMonitorNotifyAll: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, monitor: jrawMonitorID) -> jvmtiError,
    >,
    pub SetBreakpoint: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            method: jmethodID,
            location: jlocation,
        ) -> jvmtiError,
    >,
    pub ClearBreakpoint: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            method: jmethodID,
            location: jlocation,
        ) -> jvmtiError,
    >,
    pub GetNamedModule: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            class_loader: jobject,
            package_name: *const ::std::os::raw::c_char,
            module_ptr: *mut jobject,
        ) -> jvmtiError,
    >,
    pub SetFieldAccessWatch: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, klass: jclass, field: jfieldID) -> jvmtiError,
    >,
    pub ClearFieldAccessWatch: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, klass: jclass, field: jfieldID) -> jvmtiError,
    >,
    pub SetFieldModificationWatch: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, klass: jclass, field: jfieldID) -> jvmtiError,
    >,
    pub ClearFieldModificationWatch: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, klass: jclass, field: jfieldID) -> jvmtiError,
    >,
    pub IsModifiableClass: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            klass: jclass,
            is_modifiable_class_ptr: *mut jboolean,
        ) -> jvmtiError,
    >,
    pub Allocate: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            size: jlong,
            mem_ptr: *mut *mut ::std::os::raw::c_uchar,
        ) -> jvmtiError,
    >,
    pub Deallocate: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, mem: *mut ::std::os::raw::c_uchar) -> jvmtiError,
    >,
    pub GetClassSignature: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            klass: jclass,
            signature_ptr: *mut *mut ::std::os::raw::c_char,
            generic_ptr: *mut *mut ::std::os::raw::c_char,
        ) -> jvmtiError,
    >,
    pub GetClassStatus: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            klass: jclass,
            status_ptr: *mut jint,
        ) -> jvmtiError,
    >,
    pub GetSourceFileName: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            klass: jclass,
            source_name_ptr: *mut *mut ::std::os::raw::c_char,
        ) -> jvmtiError,
    >,
    pub GetClassModifiers: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            klass: jclass,
            modifiers_ptr: *mut jint,
        ) -> jvmtiError,
    >,
    pub GetClassMethods: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            klass: jclass,
            method_count_ptr: *mut jint,
            methods_ptr: *mut *mut jmethodID,
        ) -> jvmtiError,
    >,
    pub GetClassFields: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            klass: jclass,
            field_count_ptr: *mut jint,
            fields_ptr: *mut *mut jfieldID,
        ) -> jvmtiError,
    >,
    pub GetImplementedInterfaces: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            klass: jclass,
            interface_count_ptr: *mut jint,
            interfaces_ptr: *mut *mut jclass,
        ) -> jvmtiError,
    >,
    pub IsInterface: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            klass: jclass,
            is_interface_ptr: *mut jboolean,
        ) -> jvmtiError,
    >,
    pub IsArrayClass: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            klass: jclass,
            is_array_class_ptr: *mut jboolean,
        ) -> jvmtiError,
    >,
    pub GetClassLoader: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            klass: jclass,
            classloader_ptr: *mut jobject,
        ) -> jvmtiError,
    >,
    pub GetObjectHashCode: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            object: jobject,
            hash_code_ptr: *mut jint,
        ) -> jvmtiError,
    >,
    pub GetObjectMonitorUsage: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            object: jobject,
            info_ptr: *mut jvmtiMonitorUsage,
        ) -> jvmtiError,
    >,
    pub GetFieldName: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            klass: jclass,
            field: jfieldID,
            name_ptr: *mut *mut ::std::os::raw::c_char,
            signature_ptr: *mut *mut ::std::os::raw::c_char,
            generic_ptr: *mut *mut ::std::os::raw::c_char,
        ) -> jvmtiError,
    >,
    pub GetFieldDeclaringClass: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            klass: jclass,
            field: jfieldID,
            declaring_class_ptr: *mut jclass,
        ) -> jvmtiError,
    >,
    pub GetFieldModifiers: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            klass: jclass,
            field: jfieldID,
            modifiers_ptr: *mut jint,
        ) -> jvmtiError,
    >,
    pub IsFieldSynthetic: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            klass: jclass,
            field: jfieldID,
            is_synthetic_ptr: *mut jboolean,
        ) -> jvmtiError,
    >,
    pub GetMethodName: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            method: jmethodID,
            name_ptr: *mut *mut ::std::os::raw::c_char,
            signature_ptr: *mut *mut ::std::os::raw::c_char,
            generic_ptr: *mut *mut ::std::os::raw::c_char,
        ) -> jvmtiError,
    >,
    pub GetMethodDeclaringClass: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            method: jmethodID,
            declaring_class_ptr: *mut jclass,
        ) -> jvmtiError,
    >,
    pub GetMethodModifiers: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            method: jmethodID,
            modifiers_ptr: *mut jint,
        ) -> jvmtiError,
    >,
    pub reserved67: *mut ::std::os::raw::c_void,
    pub GetMaxLocals: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            method: jmethodID,
            max_ptr: *mut jint,
        ) -> jvmtiError,
    >,
    pub GetArgumentsSize: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            method: jmethodID,
            size_ptr: *mut jint,
        ) -> jvmtiError,
    >,
    pub GetLineNumberTable: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            method: jmethodID,
            entry_count_ptr: *mut jint,
            table_ptr: *mut *mut jvmtiLineNumberEntry,
        ) -> jvmtiError,
    >,
    pub GetMethodLocation: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            method: jmethodID,
            start_location_ptr: *mut jlocation,
            end_location_ptr: *mut jlocation,
        ) -> jvmtiError,
    >,
    pub GetLocalVariableTable: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            method: jmethodID,
            entry_count_ptr: *mut jint,
            table_ptr: *mut *mut jvmtiLocalVariableEntry,
        ) -> jvmtiError,
    >,
    pub SetNativeMethodPrefix: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            prefix: *const ::std::os::raw::c_char,
        ) -> jvmtiError,
    >,
    pub SetNativeMethodPrefixes: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            prefix_count: jint,
            prefixes: *mut *mut ::std::os::raw::c_char,
        ) -> jvmtiError,
    >,
    pub GetBytecodes: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            method: jmethodID,
            bytecode_count_ptr: *mut jint,
            bytecodes_ptr: *mut *mut ::std::os::raw::c_uchar,
        ) -> jvmtiError,
    >,
    pub IsMethodNative: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            method: jmethodID,
            is_native_ptr: *mut jboolean,
        ) -> jvmtiError,
    >,
    pub IsMethodSynthetic: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            method: jmethodID,
            is_synthetic_ptr: *mut jboolean,
        ) -> jvmtiError,
    >,
    pub GetLoadedClasses: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            class_count_ptr: *mut jint,
            classes_ptr: *mut *mut jclass,
        ) -> jvmtiError,
    >,
    pub GetClassLoaderClasses: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            initiating_loader: jobject,
            class_count_ptr: *mut jint,
            classes_ptr: *mut *mut jclass,
        ) -> jvmtiError,
    >,
    pub PopFrame: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread) -> jvmtiError,
    >,
    pub ForceEarlyReturnObject: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread, value: jobject) -> jvmtiError,
    >,
    pub ForceEarlyReturnInt: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread, value: jint) -> jvmtiError,
    >,
    pub ForceEarlyReturnLong: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread, value: jlong) -> jvmtiError,
    >,
    pub ForceEarlyReturnFloat: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread, value: jfloat) -> jvmtiError,
    >,
    pub ForceEarlyReturnDouble: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread, value: jdouble) -> jvmtiError,
    >,
    pub ForceEarlyReturnVoid: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, thread: jthread) -> jvmtiError,
    >,
    pub RedefineClasses: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            class_count: jint,
            class_definitions: *const jvmtiClassDefinition,
        ) -> jvmtiError,
    >,
    pub GetVersionNumber: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, version_ptr: *mut jint) -> jvmtiError,
    >,
    pub GetCapabilities: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            capabilities_ptr: *mut jvmtiCapabilities,
        ) -> jvmtiError,
    >,
    pub GetSourceDebugExtension: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            klass: jclass,
            source_debug_extension_ptr: *mut *mut ::std::os::raw::c_char,
        ) -> jvmtiError,
    >,
    pub IsMethodObsolete: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            method: jmethodID,
            is_obsolete_ptr: *mut jboolean,
        ) -> jvmtiError,
    >,
    pub SuspendThreadList: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            request_count: jint,
            request_list: *const jthread,
            results: *mut jvmtiError,
        ) -> jvmtiError,
    >,
    pub ResumeThreadList: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            request_count: jint,
            request_list: *const jthread,
            results: *mut jvmtiError,
        ) -> jvmtiError,
    >,
    pub AddModuleReads: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, module: jobject, to_module: jobject) -> jvmtiError,
    >,
    pub AddModuleExports: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            module: jobject,
            pkg_name: *const ::std::os::raw::c_char,
            to_module: jobject,
        ) -> jvmtiError,
    >,
    pub AddModuleOpens: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            module: jobject,
            pkg_name: *const ::std::os::raw::c_char,
            to_module: jobject,
        ) -> jvmtiError,
    >,
    pub AddModuleUses: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, module: jobject, service: jclass) -> jvmtiError,
    >,
    pub AddModuleProvides: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            module: jobject,
            service: jclass,
            impl_class: jclass,
        ) -> jvmtiError,
    >,
    pub IsModifiableModule: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            module: jobject,
            is_modifiable_module_ptr: *mut jboolean,
        ) -> jvmtiError,
    >,
    pub GetAllStackTraces: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            max_frame_count: jint,
            stack_info_ptr: *mut *mut jvmtiStackInfo,
            thread_count_ptr: *mut jint,
        ) -> jvmtiError,
    >,
    pub GetThreadListStackTraces: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            thread_count: jint,
            thread_list: *const jthread,
            max_frame_count: jint,
            stack_info_ptr: *mut *mut jvmtiStackInfo,
        ) -> jvmtiError,
    >,
    pub GetThreadLocalStorage: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            thread: jthread,
            data_ptr: *mut *mut ::std::os::raw::c_void,
        ) -> jvmtiError,
    >,
    pub SetThreadLocalStorage: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            thread: jthread,
            data: *const ::std::os::raw::c_void,
        ) -> jvmtiError,
    >,
    pub GetStackTrace: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            thread: jthread,
            start_depth: jint,
            max_frame_count: jint,
            frame_buffer: *mut jvmtiFrameInfo,
            count_ptr: *mut jint,
        ) -> jvmtiError,
    >,
    pub reserved105: *mut ::std::os::raw::c_void,
    pub GetTag: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            object: jobject,
            tag_ptr: *mut jlong,
        ) -> jvmtiError,
    >,
    pub SetTag: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, object: jobject, tag: jlong) -> jvmtiError,
    >,
    pub ForceGarbageCollection:
        ::std::option::Option<unsafe extern "C" fn(env: *mut jvmtiEnv) -> jvmtiError>,
    pub IterateOverObjectsReachableFromObject: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            object: jobject,
            object_reference_callback: jvmtiObjectReferenceCallback,
            user_data: *const ::std::os::raw::c_void,
        ) -> jvmtiError,
    >,
    pub IterateOverReachableObjects: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            heap_root_callback: jvmtiHeapRootCallback,
            stack_ref_callback: jvmtiStackReferenceCallback,
            object_ref_callback: jvmtiObjectReferenceCallback,
            user_data: *const ::std::os::raw::c_void,
        ) -> jvmtiError,
    >,
    pub IterateOverHeap: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            object_filter: jvmtiHeapObjectFilter,
            heap_object_callback: jvmtiHeapObjectCallback,
            user_data: *const ::std::os::raw::c_void,
        ) -> jvmtiError,
    >,
    pub IterateOverInstancesOfClass: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            klass: jclass,
            object_filter: jvmtiHeapObjectFilter,
            heap_object_callback: jvmtiHeapObjectCallback,
            user_data: *const ::std::os::raw::c_void,
        ) -> jvmtiError,
    >,
    pub reserved113: *mut ::std::os::raw::c_void,
    pub GetObjectsWithTags: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            tag_count: jint,
            tags: *const jlong,
            count_ptr: *mut jint,
            object_result_ptr: *mut *mut jobject,
            tag_result_ptr: *mut *mut jlong,
        ) -> jvmtiError,
    >,
    pub FollowReferences: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            heap_filter: jint,
            klass: jclass,
            initial_object: jobject,
            callbacks: *const jvmtiHeapCallbacks,
            user_data: *const ::std::os::raw::c_void,
        ) -> jvmtiError,
    >,
    pub IterateThroughHeap: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            heap_filter: jint,
            klass: jclass,
            callbacks: *const jvmtiHeapCallbacks,
            user_data: *const ::std::os::raw::c_void,
        ) -> jvmtiError,
    >,
    pub reserved117: *mut ::std::os::raw::c_void,
    pub SuspendAllVirtualThreads: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            except_count: jint,
            except_list: *const jthread,
        ) -> jvmtiError,
    >,
    pub ResumeAllVirtualThreads: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            except_count: jint,
            except_list: *const jthread,
        ) -> jvmtiError,
    >,
    pub SetJNIFunctionTable: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            function_table: *const jniNativeInterface,
        ) -> jvmtiError,
    >,
    pub GetJNIFunctionTable: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            function_table: *mut *mut jniNativeInterface,
        ) -> jvmtiError,
    >,
    pub SetEventCallbacks: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            callbacks: *const jvmtiEventCallbacks,
            size_of_callbacks: jint,
        ) -> jvmtiError,
    >,
    pub GenerateEvents: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, event_type: jvmtiEvent) -> jvmtiError,
    >,
    pub GetExtensionFunctions: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            extension_count_ptr: *mut jint,
            extensions: *mut *mut jvmtiExtensionFunctionInfo,
        ) -> jvmtiError,
    >,
    pub GetExtensionEvents: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            extension_count_ptr: *mut jint,
            extensions: *mut *mut jvmtiExtensionEventInfo,
        ) -> jvmtiError,
    >,
    pub SetExtensionEventCallback: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            extension_event_index: jint,
            callback: jvmtiExtensionEvent,
        ) -> jvmtiError,
    >,
    pub DisposeEnvironment:
        ::std::option::Option<unsafe extern "C" fn(env: *mut jvmtiEnv) -> jvmtiError>,
    pub GetErrorName: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            error: jvmtiError,
            name_ptr: *mut *mut ::std::os::raw::c_char,
        ) -> jvmtiError,
    >,
    pub GetJLocationFormat: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            format_ptr: *mut jvmtiJlocationFormat,
        ) -> jvmtiError,
    >,
    pub GetSystemProperties: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            count_ptr: *mut jint,
            property_ptr: *mut *mut *mut ::std::os::raw::c_char,
        ) -> jvmtiError,
    >,
    pub GetSystemProperty: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            property: *const ::std::os::raw::c_char,
            value_ptr: *mut *mut ::std::os::raw::c_char,
        ) -> jvmtiError,
    >,
    pub SetSystemProperty: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            property: *const ::std::os::raw::c_char,
            value_ptr: *const ::std::os::raw::c_char,
        ) -> jvmtiError,
    >,
    pub GetPhase: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, phase_ptr: *mut jvmtiPhase) -> jvmtiError,
    >,
    pub GetCurrentThreadCpuTimerInfo: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, info_ptr: *mut jvmtiTimerInfo) -> jvmtiError,
    >,
    pub GetCurrentThreadCpuTime: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, nanos_ptr: *mut jlong) -> jvmtiError,
    >,
    pub GetThreadCpuTimerInfo: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, info_ptr: *mut jvmtiTimerInfo) -> jvmtiError,
    >,
    pub GetThreadCpuTime: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            thread: jthread,
            nanos_ptr: *mut jlong,
        ) -> jvmtiError,
    >,
    pub GetTimerInfo: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, info_ptr: *mut jvmtiTimerInfo) -> jvmtiError,
    >,
    pub GetTime: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, nanos_ptr: *mut jlong) -> jvmtiError,
    >,
    pub GetPotentialCapabilities: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            capabilities_ptr: *mut jvmtiCapabilities,
        ) -> jvmtiError,
    >,
    pub reserved141: *mut ::std::os::raw::c_void,
    pub AddCapabilities: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            capabilities_ptr: *const jvmtiCapabilities,
        ) -> jvmtiError,
    >,
    pub RelinquishCapabilities: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            capabilities_ptr: *const jvmtiCapabilities,
        ) -> jvmtiError,
    >,
    pub GetAvailableProcessors: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, processor_count_ptr: *mut jint) -> jvmtiError,
    >,
    pub GetClassVersionNumbers: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            klass: jclass,
            minor_version_ptr: *mut jint,
            major_version_ptr: *mut jint,
        ) -> jvmtiError,
    >,
    pub GetConstantPool: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            klass: jclass,
            constant_pool_count_ptr: *mut jint,
            constant_pool_byte_count_ptr: *mut jint,
            constant_pool_bytes_ptr: *mut *mut ::std::os::raw::c_uchar,
        ) -> jvmtiError,
    >,
    pub GetEnvironmentLocalStorage: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            data_ptr: *mut *mut ::std::os::raw::c_void,
        ) -> jvmtiError,
    >,
    pub SetEnvironmentLocalStorage: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, data: *const ::std::os::raw::c_void) -> jvmtiError,
    >,
    pub AddToBootstrapClassLoaderSearch: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            segment: *const ::std::os::raw::c_char,
        ) -> jvmtiError,
    >,
    pub SetVerboseFlag: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            flag: jvmtiVerboseFlag,
            value: jboolean,
        ) -> jvmtiError,
    >,
    pub AddToSystemClassLoaderSearch: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            segment: *const ::std::os::raw::c_char,
        ) -> jvmtiError,
    >,
    pub RetransformClasses: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            class_count: jint,
            classes: *const jclass,
        ) -> jvmtiError,
    >,
    pub GetOwnedMonitorStackDepthInfo: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            thread: jthread,
            monitor_info_count_ptr: *mut jint,
            monitor_info_ptr: *mut *mut jvmtiMonitorStackDepthInfo,
        ) -> jvmtiError,
    >,
    pub GetObjectSize: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            object: jobject,
            size_ptr: *mut jlong,
        ) -> jvmtiError,
    >,
    pub GetLocalInstance: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut jvmtiEnv,
            thread: jthread,
            depth: jint,
            value_ptr: *mut jobject,
        ) -> jvmtiError,
    >,
    pub SetHeapSamplingInterval: ::std::option::Option<
        unsafe extern "C" fn(env: *mut jvmtiEnv, sampling_interval: jint) -> jvmtiError,
    >,
}
#[test]
fn bindgen_test_layout_jvmtiInterface_1_() {
    const UNINIT: ::std::mem::MaybeUninit<jvmtiInterface_1_> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<jvmtiInterface_1_>(),
        1248usize,
        concat!("Size of: ", stringify!(jvmtiInterface_1_))
    );
    assert_eq!(
        ::std::mem::align_of::<jvmtiInterface_1_>(),
        8usize,
        concat!("Alignment of ", stringify!(jvmtiInterface_1_))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetEventNotificationMode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(SetEventNotificationMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetAllModules) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetAllModules)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetAllThreads) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetAllThreads)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SuspendThread) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(SuspendThread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ResumeThread) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(ResumeThread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).StopThread) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(StopThread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InterruptThread) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(InterruptThread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetThreadInfo) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetThreadInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetOwnedMonitorInfo) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetOwnedMonitorInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetCurrentContendedMonitor) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetCurrentContendedMonitor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RunAgentThread) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(RunAgentThread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetTopThreadGroups) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetTopThreadGroups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetThreadGroupInfo) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetThreadGroupInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetThreadGroupChildren) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetThreadGroupChildren)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetFrameCount) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetFrameCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetThreadState) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetThreadState)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetCurrentThread) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetCurrentThread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetFrameLocation) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetFrameLocation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NotifyFramePop) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(NotifyFramePop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetLocalObject) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetLocalObject)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetLocalInt) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetLocalInt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetLocalLong) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetLocalLong)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetLocalFloat) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetLocalFloat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetLocalDouble) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetLocalDouble)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetLocalObject) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(SetLocalObject)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetLocalInt) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(SetLocalInt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetLocalLong) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(SetLocalLong)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetLocalFloat) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(SetLocalFloat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetLocalDouble) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(SetLocalDouble)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CreateRawMonitor) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(CreateRawMonitor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DestroyRawMonitor) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(DestroyRawMonitor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RawMonitorEnter) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(RawMonitorEnter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RawMonitorExit) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(RawMonitorExit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RawMonitorWait) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(RawMonitorWait)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RawMonitorNotify) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(RawMonitorNotify)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RawMonitorNotifyAll) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(RawMonitorNotifyAll)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetBreakpoint) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(SetBreakpoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClearBreakpoint) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(ClearBreakpoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetNamedModule) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetNamedModule)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetFieldAccessWatch) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(SetFieldAccessWatch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClearFieldAccessWatch) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(ClearFieldAccessWatch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetFieldModificationWatch) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(SetFieldModificationWatch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClearFieldModificationWatch) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(ClearFieldModificationWatch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsModifiableClass) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(IsModifiableClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Allocate) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(Allocate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Deallocate) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(Deallocate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetClassSignature) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetClassSignature)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetClassStatus) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetClassStatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetSourceFileName) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetSourceFileName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetClassModifiers) as usize - ptr as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetClassModifiers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetClassMethods) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetClassMethods)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetClassFields) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetClassFields)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetImplementedInterfaces) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetImplementedInterfaces)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsInterface) as usize - ptr as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(IsInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsArrayClass) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(IsArrayClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetClassLoader) as usize - ptr as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetClassLoader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetObjectHashCode) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetObjectHashCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetObjectMonitorUsage) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetObjectMonitorUsage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetFieldName) as usize - ptr as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetFieldName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetFieldDeclaringClass) as usize - ptr as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetFieldDeclaringClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetFieldModifiers) as usize - ptr as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetFieldModifiers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsFieldSynthetic) as usize - ptr as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(IsFieldSynthetic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetMethodName) as usize - ptr as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetMethodName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetMethodDeclaringClass) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetMethodDeclaringClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetMethodModifiers) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetMethodModifiers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved67) as usize - ptr as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(reserved67)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetMaxLocals) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetMaxLocals)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetArgumentsSize) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetArgumentsSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetLineNumberTable) as usize - ptr as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetLineNumberTable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetMethodLocation) as usize - ptr as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetMethodLocation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetLocalVariableTable) as usize - ptr as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetLocalVariableTable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetNativeMethodPrefix) as usize - ptr as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(SetNativeMethodPrefix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetNativeMethodPrefixes) as usize - ptr as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(SetNativeMethodPrefixes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetBytecodes) as usize - ptr as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetBytecodes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsMethodNative) as usize - ptr as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(IsMethodNative)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsMethodSynthetic) as usize - ptr as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(IsMethodSynthetic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetLoadedClasses) as usize - ptr as usize },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetLoadedClasses)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetClassLoaderClasses) as usize - ptr as usize },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetClassLoaderClasses)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PopFrame) as usize - ptr as usize },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(PopFrame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ForceEarlyReturnObject) as usize - ptr as usize },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(ForceEarlyReturnObject)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ForceEarlyReturnInt) as usize - ptr as usize },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(ForceEarlyReturnInt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ForceEarlyReturnLong) as usize - ptr as usize },
        656usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(ForceEarlyReturnLong)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ForceEarlyReturnFloat) as usize - ptr as usize },
        664usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(ForceEarlyReturnFloat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ForceEarlyReturnDouble) as usize - ptr as usize },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(ForceEarlyReturnDouble)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ForceEarlyReturnVoid) as usize - ptr as usize },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(ForceEarlyReturnVoid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RedefineClasses) as usize - ptr as usize },
        688usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(RedefineClasses)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetVersionNumber) as usize - ptr as usize },
        696usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetVersionNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetCapabilities) as usize - ptr as usize },
        704usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetCapabilities)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetSourceDebugExtension) as usize - ptr as usize },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetSourceDebugExtension)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsMethodObsolete) as usize - ptr as usize },
        720usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(IsMethodObsolete)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SuspendThreadList) as usize - ptr as usize },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(SuspendThreadList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ResumeThreadList) as usize - ptr as usize },
        736usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(ResumeThreadList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddModuleReads) as usize - ptr as usize },
        744usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(AddModuleReads)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddModuleExports) as usize - ptr as usize },
        752usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(AddModuleExports)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddModuleOpens) as usize - ptr as usize },
        760usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(AddModuleOpens)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddModuleUses) as usize - ptr as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(AddModuleUses)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddModuleProvides) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(AddModuleProvides)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsModifiableModule) as usize - ptr as usize },
        784usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(IsModifiableModule)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetAllStackTraces) as usize - ptr as usize },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetAllStackTraces)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetThreadListStackTraces) as usize - ptr as usize },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetThreadListStackTraces)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetThreadLocalStorage) as usize - ptr as usize },
        808usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetThreadLocalStorage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetThreadLocalStorage) as usize - ptr as usize },
        816usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(SetThreadLocalStorage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetStackTrace) as usize - ptr as usize },
        824usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetStackTrace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved105) as usize - ptr as usize },
        832usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(reserved105)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetTag) as usize - ptr as usize },
        840usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetTag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetTag) as usize - ptr as usize },
        848usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(SetTag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ForceGarbageCollection) as usize - ptr as usize },
        856usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(ForceGarbageCollection)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).IterateOverObjectsReachableFromObject) as usize
                - ptr as usize
        },
        864usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(IterateOverObjectsReachableFromObject)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IterateOverReachableObjects) as usize - ptr as usize },
        872usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(IterateOverReachableObjects)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IterateOverHeap) as usize - ptr as usize },
        880usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(IterateOverHeap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IterateOverInstancesOfClass) as usize - ptr as usize },
        888usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(IterateOverInstancesOfClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved113) as usize - ptr as usize },
        896usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(reserved113)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetObjectsWithTags) as usize - ptr as usize },
        904usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetObjectsWithTags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FollowReferences) as usize - ptr as usize },
        912usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(FollowReferences)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IterateThroughHeap) as usize - ptr as usize },
        920usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(IterateThroughHeap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved117) as usize - ptr as usize },
        928usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(reserved117)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SuspendAllVirtualThreads) as usize - ptr as usize },
        936usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(SuspendAllVirtualThreads)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ResumeAllVirtualThreads) as usize - ptr as usize },
        944usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(ResumeAllVirtualThreads)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetJNIFunctionTable) as usize - ptr as usize },
        952usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(SetJNIFunctionTable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetJNIFunctionTable) as usize - ptr as usize },
        960usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetJNIFunctionTable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetEventCallbacks) as usize - ptr as usize },
        968usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(SetEventCallbacks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GenerateEvents) as usize - ptr as usize },
        976usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GenerateEvents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetExtensionFunctions) as usize - ptr as usize },
        984usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetExtensionFunctions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetExtensionEvents) as usize - ptr as usize },
        992usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetExtensionEvents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetExtensionEventCallback) as usize - ptr as usize },
        1000usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(SetExtensionEventCallback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DisposeEnvironment) as usize - ptr as usize },
        1008usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(DisposeEnvironment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetErrorName) as usize - ptr as usize },
        1016usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetErrorName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetJLocationFormat) as usize - ptr as usize },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetJLocationFormat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetSystemProperties) as usize - ptr as usize },
        1032usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetSystemProperties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetSystemProperty) as usize - ptr as usize },
        1040usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetSystemProperty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetSystemProperty) as usize - ptr as usize },
        1048usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(SetSystemProperty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetPhase) as usize - ptr as usize },
        1056usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetPhase)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).GetCurrentThreadCpuTimerInfo) as usize - ptr as usize
        },
        1064usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetCurrentThreadCpuTimerInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetCurrentThreadCpuTime) as usize - ptr as usize },
        1072usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetCurrentThreadCpuTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetThreadCpuTimerInfo) as usize - ptr as usize },
        1080usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetThreadCpuTimerInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetThreadCpuTime) as usize - ptr as usize },
        1088usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetThreadCpuTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetTimerInfo) as usize - ptr as usize },
        1096usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetTimerInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetTime) as usize - ptr as usize },
        1104usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetPotentialCapabilities) as usize - ptr as usize },
        1112usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetPotentialCapabilities)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved141) as usize - ptr as usize },
        1120usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(reserved141)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddCapabilities) as usize - ptr as usize },
        1128usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(AddCapabilities)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RelinquishCapabilities) as usize - ptr as usize },
        1136usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(RelinquishCapabilities)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetAvailableProcessors) as usize - ptr as usize },
        1144usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetAvailableProcessors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetClassVersionNumbers) as usize - ptr as usize },
        1152usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetClassVersionNumbers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetConstantPool) as usize - ptr as usize },
        1160usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetConstantPool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetEnvironmentLocalStorage) as usize - ptr as usize },
        1168usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetEnvironmentLocalStorage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetEnvironmentLocalStorage) as usize - ptr as usize },
        1176usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(SetEnvironmentLocalStorage)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).AddToBootstrapClassLoaderSearch) as usize - ptr as usize
        },
        1184usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(AddToBootstrapClassLoaderSearch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetVerboseFlag) as usize - ptr as usize },
        1192usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(SetVerboseFlag)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).AddToSystemClassLoaderSearch) as usize - ptr as usize
        },
        1200usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(AddToSystemClassLoaderSearch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetransformClasses) as usize - ptr as usize },
        1208usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(RetransformClasses)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).GetOwnedMonitorStackDepthInfo) as usize - ptr as usize
        },
        1216usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetOwnedMonitorStackDepthInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetObjectSize) as usize - ptr as usize },
        1224usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetObjectSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetLocalInstance) as usize - ptr as usize },
        1232usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(GetLocalInstance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetHeapSamplingInterval) as usize - ptr as usize },
        1240usize,
        concat!(
            "Offset of field: ",
            stringify!(jvmtiInterface_1_),
            "::",
            stringify!(SetHeapSamplingInterval)
        )
    );
}
pub type jvmtiInterface_1 = jvmtiInterface_1_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jvmtiEnv {
    pub functions: *const jvmtiInterface_1_,
}
#[test]
fn bindgen_test_layout__jvmtiEnv() {
    const UNINIT: ::std::mem::MaybeUninit<_jvmtiEnv> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_jvmtiEnv>(),
        8usize,
        concat!("Size of: ", stringify!(_jvmtiEnv))
    );
    assert_eq!(
        ::std::mem::align_of::<_jvmtiEnv>(),
        8usize,
        concat!("Alignment of ", stringify!(_jvmtiEnv))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).functions) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_jvmtiEnv),
            "::",
            stringify!(functions)
        )
    );
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
